### YamlMime:ApiPage
title: Class DatabaseProvider
body:
- api1: Class DatabaseProvider
  id: DataLinq_DatabaseProvider
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database/DatabaseProvider.cs#L56
  metadata:
    uid: DataLinq.DatabaseProvider
    commentId: T:DataLinq.DatabaseProvider
- facts:
  - name: Namespace
    value:
      text: DataLinq
      url: DataLinq.html
  - name: Assembly
    value: DataLinq.dll
- markdown: Abstract base class for database providers, encapsulating common database operations and properties.
- code: 'public abstract class DatabaseProvider : IDatabaseProvider, IDisposable'
- h4: Inheritance
- inheritance:
  - text: object
    url: https://learn.microsoft.com/dotnet/api/system.object
  - text: DatabaseProvider
    url: DataLinq.DatabaseProvider.html
- h4: Derived
- list:
  - text: DatabaseProvider<T>
    url: DataLinq.DatabaseProvider-1.html
- h4: Implements
- list:
  - text: IDatabaseProvider
    url: DataLinq.Interfaces.IDatabaseProvider.html
  - text: IDisposable
    url: https://learn.microsoft.com/dotnet/api/system.idisposable
- h4: Inherited Members
- list:
  - text: object.Equals(object?)
    url: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - text: object.Equals(object?, object?)
    url: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - text: object.GetHashCode()
    url: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - text: object.GetType()
    url: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - text: object.MemberwiseClone()
    url: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - text: object.ReferenceEquals(object?, object?)
    url: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - text: object.ToString()
    url: https://learn.microsoft.com/dotnet/api/system.object.tostring
- h2: Constructors
- api3: DatabaseProvider(string, Type, DatabaseType, DataLinqLoggingConfiguration, string?)
  id: DataLinq_DatabaseProvider__ctor_System_String_System_Type_DataLinq_DatabaseType_DataLinq_Logging_DataLinqLoggingConfiguration_System_String_
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database/DatabaseProvider.cs#L86
  metadata:
    uid: DataLinq.DatabaseProvider.#ctor(System.String,System.Type,DataLinq.DatabaseType,DataLinq.Logging.DataLinqLoggingConfiguration,System.String)
    commentId: M:DataLinq.DatabaseProvider.#ctor(System.String,System.Type,DataLinq.DatabaseType,DataLinq.Logging.DataLinqLoggingConfiguration,System.String)
- markdown: Initializes a new instance of the DatabaseProvider class with the specified connection string, type of the model, database type, and optional database name.
- code: protected DatabaseProvider(string connectionString, Type type, DatabaseType databaseType, DataLinqLoggingConfiguration loggingConfiguration, string? databaseName = null)
- h4: Parameters
- parameters:
  - name: connectionString
    type:
    - text: string
      url: https://learn.microsoft.com/dotnet/api/system.string
    description: The connection string to the database.
  - name: type
    type:
    - text: Type
      url: https://learn.microsoft.com/dotnet/api/system.type
    description: The type of the model that the database contains.
  - name: databaseType
    type:
    - DatabaseType
    description: The type of the database.
  - name: loggingConfiguration
    type:
    - text: DataLinqLoggingConfiguration
      url: DataLinq.Logging.DataLinqLoggingConfiguration.html
  - name: databaseName
    type:
    - text: string
      url: https://learn.microsoft.com/dotnet/api/system.string
    - '?'
    description: The name of the database (optional).
    optional: true
- h2: Properties
- api3: ConnectionString
  id: DataLinq_DatabaseProvider_ConnectionString
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database/DatabaseProvider.cs#L64
  metadata:
    uid: DataLinq.DatabaseProvider.ConnectionString
    commentId: P:DataLinq.DatabaseProvider.ConnectionString
- code: public string ConnectionString { get; }
- h4: Property Value
- parameters:
  - type:
    - text: string
      url: https://learn.microsoft.com/dotnet/api/system.string
- api3: Constants
  id: DataLinq_DatabaseProvider_Constants
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database/DatabaseProvider.cs#L62
  metadata:
    uid: DataLinq.DatabaseProvider.Constants
    commentId: P:DataLinq.DatabaseProvider.Constants
- code: public abstract IDatabaseProviderConstants Constants { get; }
- h4: Property Value
- parameters:
  - type:
    - text: IDatabaseProviderConstants
      url: DataLinq.Interfaces.IDatabaseProviderConstants.html
- api3: CsModelType
  id: DataLinq_DatabaseProvider_CsModelType
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database/DatabaseProvider.cs#L59
  metadata:
    uid: DataLinq.DatabaseProvider.CsModelType
    commentId: P:DataLinq.DatabaseProvider.CsModelType
- code: public Type CsModelType { get; protected set; }
- h4: Property Value
- parameters:
  - type:
    - text: Type
      url: https://learn.microsoft.com/dotnet/api/system.type
- api3: DatabaseAccess
  id: DataLinq_DatabaseProvider_DatabaseAccess
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database/DatabaseProvider.cs#L65
  metadata:
    uid: DataLinq.DatabaseProvider.DatabaseAccess
    commentId: P:DataLinq.DatabaseProvider.DatabaseAccess
- code: public abstract DatabaseAccess DatabaseAccess { get; }
- h4: Property Value
- parameters:
  - type:
    - text: DatabaseAccess
      url: DataLinq.DatabaseAccess.html
- api3: DatabaseName
  id: DataLinq_DatabaseProvider_DatabaseName
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database/DatabaseProvider.cs#L58
  metadata:
    uid: DataLinq.DatabaseProvider.DatabaseName
    commentId: P:DataLinq.DatabaseProvider.DatabaseName
- code: public string DatabaseName { get; protected set; }
- h4: Property Value
- parameters:
  - type:
    - text: string
      url: https://learn.microsoft.com/dotnet/api/system.string
- api3: DatabaseType
  id: DataLinq_DatabaseProvider_DatabaseType
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database/DatabaseProvider.cs#L60
  metadata:
    uid: DataLinq.DatabaseProvider.DatabaseType
    commentId: P:DataLinq.DatabaseProvider.DatabaseType
- code: public DatabaseType DatabaseType { get; }
- h4: Property Value
- parameters:
  - type:
    - DatabaseType
- api3: LoggingConfiguration
  id: DataLinq_DatabaseProvider_LoggingConfiguration
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database/DatabaseProvider.cs#L61
  metadata:
    uid: DataLinq.DatabaseProvider.LoggingConfiguration
    commentId: P:DataLinq.DatabaseProvider.LoggingConfiguration
- code: public DataLinqLoggingConfiguration LoggingConfiguration { get; }
- h4: Property Value
- parameters:
  - type:
    - text: DataLinqLoggingConfiguration
      url: DataLinq.Logging.DataLinqLoggingConfiguration.html
- api3: Metadata
  id: DataLinq_DatabaseProvider_Metadata
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database/DatabaseProvider.cs#L67
  metadata:
    uid: DataLinq.DatabaseProvider.Metadata
    commentId: P:DataLinq.DatabaseProvider.Metadata
- code: public DatabaseDefinition Metadata { get; }
- h4: Property Value
- parameters:
  - type:
    - DatabaseDefinition
- api3: ReadOnlyAccess
  id: DataLinq_DatabaseProvider_ReadOnlyAccess
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database/DatabaseProvider.cs#L66
  metadata:
    uid: DataLinq.DatabaseProvider.ReadOnlyAccess
    commentId: P:DataLinq.DatabaseProvider.ReadOnlyAccess
- code: public virtual ReadOnlyAccess ReadOnlyAccess { get; }
- h4: Property Value
- parameters:
  - type:
    - text: ReadOnlyAccess
      url: DataLinq.Mutation.ReadOnlyAccess.html
- api3: State
  id: DataLinq_DatabaseProvider_State
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database/DatabaseProvider.cs#L68
  metadata:
    uid: DataLinq.DatabaseProvider.State
    commentId: P:DataLinq.DatabaseProvider.State
- code: public State State { get; }
- h4: Property Value
- parameters:
  - type:
    - text: State
      url: DataLinq.Mutation.State.html
- h2: Methods
- api3: AttachDatabaseTransaction(IDbTransaction, TransactionType)
  id: DataLinq_DatabaseProvider_AttachDatabaseTransaction_System_Data_IDbTransaction_DataLinq_Mutation_TransactionType_
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database/DatabaseProvider.cs#L179
  metadata:
    uid: DataLinq.DatabaseProvider.AttachDatabaseTransaction(System.Data.IDbTransaction,DataLinq.Mutation.TransactionType)
    commentId: M:DataLinq.DatabaseProvider.AttachDatabaseTransaction(System.Data.IDbTransaction,DataLinq.Mutation.TransactionType)
- code: public abstract DatabaseTransaction AttachDatabaseTransaction(IDbTransaction dbTransaction, TransactionType type)
- h4: Parameters
- parameters:
  - name: dbTransaction
    type:
    - text: IDbTransaction
      url: https://learn.microsoft.com/dotnet/api/system.data.idbtransaction
  - name: type
    type:
    - text: TransactionType
      url: DataLinq.Mutation.TransactionType.html
- h4: Returns
- parameters:
  - type:
    - text: DatabaseTransaction
      url: DataLinq.DatabaseTransaction.html
- api3: AttachTransaction(IDbTransaction, TransactionType)
  id: DataLinq_DatabaseProvider_AttachTransaction_System_Data_IDbTransaction_DataLinq_Mutation_TransactionType_
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database/DatabaseProvider.cs#L164
  metadata:
    uid: DataLinq.DatabaseProvider.AttachTransaction(System.Data.IDbTransaction,DataLinq.Mutation.TransactionType)
    commentId: M:DataLinq.DatabaseProvider.AttachTransaction(System.Data.IDbTransaction,DataLinq.Mutation.TransactionType)
- markdown: Attaches an existing database transaction to this provider with the specified transaction type.
- code: public Transaction AttachTransaction(IDbTransaction dbTransaction, TransactionType transactionType = TransactionType.ReadAndWrite)
- h4: Parameters
- parameters:
  - name: dbTransaction
    type:
    - text: IDbTransaction
      url: https://learn.microsoft.com/dotnet/api/system.data.idbtransaction
    description: The existing database transaction.
  - name: transactionType
    type:
    - text: TransactionType
      url: DataLinq.Mutation.TransactionType.html
    description: The type of the transaction.
    optional: true
- h4: Returns
- parameters:
  - type:
    - text: Transaction
      url: DataLinq.Mutation.Transaction.html
    description: A new Transaction object that wraps the provided IDbTransaction.
- api3: Commit<M>(Func<Transaction, M>)
  id: DataLinq_DatabaseProvider_Commit__1_System_Func_DataLinq_Mutation_Transaction___0__
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database/DatabaseProvider.cs#L142
  metadata:
    uid: DataLinq.DatabaseProvider.Commit``1(System.Func{DataLinq.Mutation.Transaction,``0})
    commentId: M:DataLinq.DatabaseProvider.Commit``1(System.Func{DataLinq.Mutation.Transaction,``0})
- code: public M Commit<M>(Func<Transaction, M> func)
- h4: Parameters
- parameters:
  - name: func
    type:
    - text: Func
      url: https://learn.microsoft.com/dotnet/api/system.func-2
    - <
    - text: Transaction
      url: DataLinq.Mutation.Transaction.html
    - ','
    - " "
    - M
    - '>'
- h4: Returns
- parameters:
  - type:
    - M
- h4: Type Parameters
- parameters:
  - name: M
- api3: Commit(Action<Transaction>)
  id: DataLinq_DatabaseProvider_Commit_System_Action_DataLinq_Mutation_Transaction__
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database/DatabaseProvider.cs#L151
  metadata:
    uid: DataLinq.DatabaseProvider.Commit(System.Action{DataLinq.Mutation.Transaction})
    commentId: M:DataLinq.DatabaseProvider.Commit(System.Action{DataLinq.Mutation.Transaction})
- code: public void Commit(Action<Transaction> action)
- h4: Parameters
- parameters:
  - name: action
    type:
    - text: Action
      url: https://learn.microsoft.com/dotnet/api/system.action-1
    - <
    - text: Transaction
      url: DataLinq.Mutation.Transaction.html
    - '>'
- api3: DatabaseExists(string?)
  id: DataLinq_DatabaseProvider_DatabaseExists_System_String_
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database/DatabaseProvider.cs#L180
  metadata:
    uid: DataLinq.DatabaseProvider.DatabaseExists(System.String)
    commentId: M:DataLinq.DatabaseProvider.DatabaseExists(System.String)
- code: public abstract bool DatabaseExists(string? databaseName = null)
- h4: Parameters
- parameters:
  - name: databaseName
    type:
    - text: string
      url: https://learn.microsoft.com/dotnet/api/system.string
    - '?'
    optional: true
- h4: Returns
- parameters:
  - type:
    - text: bool
      url: https://learn.microsoft.com/dotnet/api/system.boolean
- api3: Dispose()
  id: DataLinq_DatabaseProvider_Dispose
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database/DatabaseProvider.cs#L188
  metadata:
    uid: DataLinq.DatabaseProvider.Dispose
    commentId: M:DataLinq.DatabaseProvider.Dispose
- markdown: Releases all resources used by the DatabaseProvider.
- code: public void Dispose()
- api3: FileOrServerExists()
  id: DataLinq_DatabaseProvider_FileOrServerExists
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database/DatabaseProvider.cs#L181
  metadata:
    uid: DataLinq.DatabaseProvider.FileOrServerExists
    commentId: M:DataLinq.DatabaseProvider.FileOrServerExists
- code: public abstract bool FileOrServerExists()
- h4: Returns
- parameters:
  - type:
    - text: bool
      url: https://learn.microsoft.com/dotnet/api/system.boolean
- api3: GetCreateSql()
  id: DataLinq_DatabaseProvider_GetCreateSql
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database/DatabaseProvider.cs#L177
  metadata:
    uid: DataLinq.DatabaseProvider.GetCreateSql
    commentId: M:DataLinq.DatabaseProvider.GetCreateSql
- code: public abstract Sql GetCreateSql()
- h4: Returns
- parameters:
  - type:
    - text: Sql
      url: DataLinq.Query.Sql.html
- api3: GetLastIdQuery()
  id: DataLinq_DatabaseProvider_GetLastIdQuery
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database/DatabaseProvider.cs#L171
  metadata:
    uid: DataLinq.DatabaseProvider.GetLastIdQuery
    commentId: M:DataLinq.DatabaseProvider.GetLastIdQuery
- code: public abstract string GetLastIdQuery()
- h4: Returns
- parameters:
  - type:
    - text: string
      url: https://learn.microsoft.com/dotnet/api/system.string
- api3: GetLimitOffset(Sql, int?, int?)
  id: DataLinq_DatabaseProvider_GetLimitOffset_DataLinq_Query_Sql_System_Nullable_System_Int32__System_Nullable_System_Int32__
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database/DatabaseProvider.cs#L175
  metadata:
    uid: DataLinq.DatabaseProvider.GetLimitOffset(DataLinq.Query.Sql,System.Nullable{System.Int32},System.Nullable{System.Int32})
    commentId: M:DataLinq.DatabaseProvider.GetLimitOffset(DataLinq.Query.Sql,System.Nullable{System.Int32},System.Nullable{System.Int32})
- code: public abstract Sql GetLimitOffset(Sql sql, int? limit, int? offset)
- h4: Parameters
- parameters:
  - name: sql
    type:
    - text: Sql
      url: DataLinq.Query.Sql.html
  - name: limit
    type:
    - text: int
      url: https://learn.microsoft.com/dotnet/api/system.int32
    - '?'
  - name: offset
    type:
    - text: int
      url: https://learn.microsoft.com/dotnet/api/system.int32
    - '?'
- h4: Returns
- parameters:
  - type:
    - text: Sql
      url: DataLinq.Query.Sql.html
- api3: GetNewDatabaseTransaction(TransactionType)
  id: DataLinq_DatabaseProvider_GetNewDatabaseTransaction_DataLinq_Mutation_TransactionType_
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database/DatabaseProvider.cs#L178
  metadata:
    uid: DataLinq.DatabaseProvider.GetNewDatabaseTransaction(DataLinq.Mutation.TransactionType)
    commentId: M:DataLinq.DatabaseProvider.GetNewDatabaseTransaction(DataLinq.Mutation.TransactionType)
- code: public abstract DatabaseTransaction GetNewDatabaseTransaction(TransactionType type)
- h4: Parameters
- parameters:
  - name: type
    type:
    - text: TransactionType
      url: DataLinq.Mutation.TransactionType.html
- h4: Returns
- parameters:
  - type:
    - text: DatabaseTransaction
      url: DataLinq.DatabaseTransaction.html
- api3: GetParameter(Sql, string, object?)
  id: DataLinq_DatabaseProvider_GetParameter_DataLinq_Query_Sql_System_String_System_Object_
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database/DatabaseProvider.cs#L172
  metadata:
    uid: DataLinq.DatabaseProvider.GetParameter(DataLinq.Query.Sql,System.String,System.Object)
    commentId: M:DataLinq.DatabaseProvider.GetParameter(DataLinq.Query.Sql,System.String,System.Object)
- code: public abstract Sql GetParameter(Sql sql, string key, object? value)
- h4: Parameters
- parameters:
  - name: sql
    type:
    - text: Sql
      url: DataLinq.Query.Sql.html
  - name: key
    type:
    - text: string
      url: https://learn.microsoft.com/dotnet/api/system.string
  - name: value
    type:
    - text: object
      url: https://learn.microsoft.com/dotnet/api/system.object
    - '?'
- h4: Returns
- parameters:
  - type:
    - text: Sql
      url: DataLinq.Query.Sql.html
- api3: GetParameterComparison(Sql, string, Relation, string[])
  id: DataLinq_DatabaseProvider_GetParameterComparison_DataLinq_Query_Sql_System_String_DataLinq_Query_Relation_System_String___
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database/DatabaseProvider.cs#L174
  metadata:
    uid: DataLinq.DatabaseProvider.GetParameterComparison(DataLinq.Query.Sql,System.String,DataLinq.Query.Relation,System.String[])
    commentId: M:DataLinq.DatabaseProvider.GetParameterComparison(DataLinq.Query.Sql,System.String,DataLinq.Query.Relation,System.String[])
- code: public abstract Sql GetParameterComparison(Sql sql, string field, Relation relation, string[] key)
- h4: Parameters
- parameters:
  - name: sql
    type:
    - text: Sql
      url: DataLinq.Query.Sql.html
  - name: field
    type:
    - text: string
      url: https://learn.microsoft.com/dotnet/api/system.string
  - name: relation
    type:
    - text: Relation
      url: DataLinq.Query.Relation.html
  - name: key
    type:
    - text: string
      url: https://learn.microsoft.com/dotnet/api/system.string
    - '['
    - ']'
- h4: Returns
- parameters:
  - type:
    - text: Sql
      url: DataLinq.Query.Sql.html
- api3: GetParameterValue(Sql, string)
  id: DataLinq_DatabaseProvider_GetParameterValue_DataLinq_Query_Sql_System_String_
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database/DatabaseProvider.cs#L173
  metadata:
    uid: DataLinq.DatabaseProvider.GetParameterValue(DataLinq.Query.Sql,System.String)
    commentId: M:DataLinq.DatabaseProvider.GetParameterValue(DataLinq.Query.Sql,System.String)
- code: public abstract Sql GetParameterValue(Sql sql, string key)
- h4: Parameters
- parameters:
  - name: sql
    type:
    - text: Sql
      url: DataLinq.Query.Sql.html
  - name: key
    type:
    - text: string
      url: https://learn.microsoft.com/dotnet/api/system.string
- h4: Returns
- parameters:
  - type:
    - text: Sql
      url: DataLinq.Query.Sql.html
- api3: GetTableCache(TableDefinition)
  id: DataLinq_DatabaseProvider_GetTableCache_DataLinq_Metadata_TableDefinition_
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database/DatabaseProvider.cs#L77
  metadata:
    uid: DataLinq.DatabaseProvider.GetTableCache(DataLinq.Metadata.TableDefinition)
    commentId: M:DataLinq.DatabaseProvider.GetTableCache(DataLinq.Metadata.TableDefinition)
- markdown: Retrieves the table cache for a given table metadata.
- code: public TableCache GetTableCache(TableDefinition table)
- h4: Parameters
- parameters:
  - name: table
    type:
    - TableDefinition
    description: The metadata of the table to retrieve the cache for.
- h4: Returns
- parameters:
  - type:
    - text: TableCache
      url: DataLinq.Cache.TableCache.html
    description: The table cache for the specified table.
- api3: GetTableName(Sql, string, string?)
  id: DataLinq_DatabaseProvider_GetTableName_DataLinq_Query_Sql_System_String_System_String_
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database/DatabaseProvider.cs#L176
  metadata:
    uid: DataLinq.DatabaseProvider.GetTableName(DataLinq.Query.Sql,System.String,System.String)
    commentId: M:DataLinq.DatabaseProvider.GetTableName(DataLinq.Query.Sql,System.String,System.String)
- code: public abstract Sql GetTableName(Sql sql, string tableName, string? alias = null)
- h4: Parameters
- parameters:
  - name: sql
    type:
    - text: Sql
      url: DataLinq.Query.Sql.html
  - name: tableName
    type:
    - text: string
      url: https://learn.microsoft.com/dotnet/api/system.string
  - name: alias
    type:
    - text: string
      url: https://learn.microsoft.com/dotnet/api/system.string
    - '?'
    optional: true
- h4: Returns
- parameters:
  - type:
    - text: Sql
      url: DataLinq.Query.Sql.html
- api3: GetWriter()
  id: DataLinq_DatabaseProvider_GetWriter
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database/DatabaseProvider.cs#L183
  metadata:
    uid: DataLinq.DatabaseProvider.GetWriter
    commentId: M:DataLinq.DatabaseProvider.GetWriter
- code: public abstract IDataLinqDataWriter GetWriter()
- h4: Returns
- parameters:
  - type:
    - text: IDataLinqDataWriter
      url: DataLinq.IDataLinqDataWriter.html
- api3: StartTransaction(TransactionType)
  id: DataLinq_DatabaseProvider_StartTransaction_DataLinq_Mutation_TransactionType_
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database/DatabaseProvider.cs#L137
  metadata:
    uid: DataLinq.DatabaseProvider.StartTransaction(DataLinq.Mutation.TransactionType)
    commentId: M:DataLinq.DatabaseProvider.StartTransaction(DataLinq.Mutation.TransactionType)
- markdown: Starts a new database transaction with the specified transaction type.
- code: public Transaction StartTransaction(TransactionType transactionType = TransactionType.ReadAndWrite)
- h4: Parameters
- parameters:
  - name: transactionType
    type:
    - text: TransactionType
      url: DataLinq.Mutation.TransactionType.html
    description: The type of the transaction.
    optional: true
- h4: Returns
- parameters:
  - type:
    - text: Transaction
      url: DataLinq.Mutation.Transaction.html
    description: A new Transaction object.
- api3: ToDbCommand(IQuery)
  id: DataLinq_DatabaseProvider_ToDbCommand_DataLinq_Query_IQuery_
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database/DatabaseProvider.cs#L170
  metadata:
    uid: DataLinq.DatabaseProvider.ToDbCommand(DataLinq.Query.IQuery)
    commentId: M:DataLinq.DatabaseProvider.ToDbCommand(DataLinq.Query.IQuery)
- code: public abstract IDbCommand ToDbCommand(IQuery query)
- h4: Parameters
- parameters:
  - name: query
    type:
    - text: IQuery
      url: DataLinq.Query.IQuery.html
- h4: Returns
- parameters:
  - type:
    - text: IDbCommand
      url: https://learn.microsoft.com/dotnet/api/system.data.idbcommand
languageId: csharp
metadata:
  description: Abstract base class for database providers, encapsulating common database operations and properties.
