### YamlMime:ApiPage
title: Class Database<T>
body:
- api1: Class Database<T>
  id: DataLinq_Database_1
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database.cs#L17
  metadata:
    uid: DataLinq.Database`1
    commentId: T:DataLinq.Database`1
- facts:
  - name: Namespace
    value:
      text: DataLinq
      url: DataLinq.html
  - name: Assembly
    value: DataLinq.dll
- markdown: The main interface for working with the database.
- code: 'public abstract class Database<T> : IDisposable where T : class, IDatabaseModel'
- h4: Type Parameters
- parameters:
  - name: T
    description: The type of the database model.
- h4: Inheritance
- inheritance:
  - text: object
    url: https://learn.microsoft.com/dotnet/api/system.object
  - text: Database<T>
    url: DataLinq.Database-1.html
- h4: Implements
- list:
  - text: IDisposable
    url: https://learn.microsoft.com/dotnet/api/system.idisposable
- h4: Inherited Members
- list:
  - text: object.Equals(object?)
    url: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - text: object.Equals(object?, object?)
    url: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - text: object.GetHashCode()
    url: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - text: object.GetType()
    url: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - text: object.MemberwiseClone()
    url: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - text: object.ReferenceEquals(object?, object?)
    url: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - text: object.ToString()
    url: https://learn.microsoft.com/dotnet/api/system.object.tostring
- h2: Constructors
- api3: Database(DatabaseProvider<T>)
  id: DataLinq_Database_1__ctor_DataLinq_DatabaseProvider__0__
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database.cs#L35
  metadata:
    uid: DataLinq.Database`1.#ctor(DataLinq.DatabaseProvider{`0})
    commentId: M:DataLinq.Database`1.#ctor(DataLinq.DatabaseProvider{`0})
- markdown: Initializes a new instance of the <xref href="DataLinq.Database%601" data-throw-if-not-resolved="false"></xref> class.
- code: public Database(DatabaseProvider<T> provider)
- h4: Parameters
- parameters:
  - name: provider
    type:
    - text: DatabaseProvider
      url: DataLinq.DatabaseProvider-1.html
    - <
    - T
    - '>'
    description: The database provider.
- h2: Properties
- api3: DatabaseType
  id: DataLinq_Database_1_DatabaseType
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database.cs#L23
  metadata:
    uid: DataLinq.Database`1.DatabaseType
    commentId: P:DataLinq.Database`1.DatabaseType
- markdown: Gets the type of the database.
- code: public DatabaseType DatabaseType { get; }
- h4: Property Value
- parameters:
  - type:
    - DatabaseType
- api3: Provider
  id: DataLinq_Database_1_Provider
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database.cs#L28
  metadata:
    uid: DataLinq.Database`1.Provider
    commentId: P:DataLinq.Database`1.Provider
- markdown: Gets the database provider.
- code: public DatabaseProvider<T> Provider { get; }
- h4: Property Value
- parameters:
  - type:
    - text: DatabaseProvider
      url: DataLinq.DatabaseProvider-1.html
    - <
    - T
    - '>'
- h2: Methods
- api3: AttachTransaction(IDbTransaction, TransactionType)
  id: DataLinq_Database_1_AttachTransaction_System_Data_IDbTransaction_DataLinq_Mutation_TransactionType_
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database.cs#L75
  metadata:
    uid: DataLinq.Database`1.AttachTransaction(System.Data.IDbTransaction,DataLinq.Mutation.TransactionType)
    commentId: M:DataLinq.Database`1.AttachTransaction(System.Data.IDbTransaction,DataLinq.Mutation.TransactionType)
- markdown: Attaches a transaction to the database.
- code: public Transaction<T> AttachTransaction(IDbTransaction dbTransaction, TransactionType transactionType = TransactionType.ReadAndWrite)
- h4: Parameters
- parameters:
  - name: dbTransaction
    type:
    - text: IDbTransaction
      url: https://learn.microsoft.com/dotnet/api/system.data.idbtransaction
    description: The database transaction.
  - name: transactionType
    type:
    - text: TransactionType
      url: DataLinq.Mutation.TransactionType.html
    description: The type of the transaction.
    optional: true
- h4: Returns
- parameters:
  - type:
    - text: Transaction
      url: DataLinq.Mutation.Transaction-1.html
    - <
    - T
    - '>'
    description: The attached transaction.
- api3: Commit(Action<Transaction>, TransactionType)
  id: DataLinq_Database_1_Commit_System_Action_DataLinq_Mutation_Transaction__DataLinq_Mutation_TransactionType_
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database.cs#L183
  metadata:
    uid: DataLinq.Database`1.Commit(System.Action{DataLinq.Mutation.Transaction},DataLinq.Mutation.TransactionType)
    commentId: M:DataLinq.Database`1.Commit(System.Action{DataLinq.Mutation.Transaction},DataLinq.Mutation.TransactionType)
- markdown: Commits a transaction with the specified action.
- code: public void Commit(Action<Transaction> func, TransactionType transactionType = TransactionType.ReadAndWrite)
- h4: Parameters
- parameters:
  - name: func
    type:
    - text: Action
      url: https://learn.microsoft.com/dotnet/api/system.action-1
    - <
    - text: Transaction
      url: DataLinq.Mutation.Transaction.html
    - '>'
    description: The action to perform in the transaction.
  - name: transactionType
    type:
    - text: TransactionType
      url: DataLinq.Mutation.TransactionType.html
    description: The type of the transaction.
    optional: true
- api3: Commit<M>(Func<Transaction, M>, TransactionType)
  id: DataLinq_Database_1_Commit__1_System_Func_DataLinq_Mutation_Transaction___0__DataLinq_Mutation_TransactionType_
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database.cs#L197
  metadata:
    uid: DataLinq.Database`1.Commit``1(System.Func{DataLinq.Mutation.Transaction,``0},DataLinq.Mutation.TransactionType)
    commentId: M:DataLinq.Database`1.Commit``1(System.Func{DataLinq.Mutation.Transaction,``0},DataLinq.Mutation.TransactionType)
- markdown: Commits a transaction with the specified function.
- code: 'public M Commit<M>(Func<Transaction, M> func, TransactionType transactionType = TransactionType.ReadAndWrite) where M : IImmutableInstance'
- h4: Parameters
- parameters:
  - name: func
    type:
    - text: Func
      url: https://learn.microsoft.com/dotnet/api/system.func-2
    - <
    - text: Transaction
      url: DataLinq.Mutation.Transaction.html
    - ','
    - " "
    - M
    - '>'
    description: The function to perform in the transaction.
  - name: transactionType
    type:
    - text: TransactionType
      url: DataLinq.Mutation.TransactionType.html
    description: The type of the transaction.
    optional: true
- h4: Returns
- parameters:
  - type:
    - M
    description: The result of the function.
- h4: Type Parameters
- parameters:
  - name: M
    description: The type of the model.
- api3: Delete<M>(M, TransactionType)
  id: DataLinq_Database_1_Delete__1___0_DataLinq_Mutation_TransactionType_
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database.cs#L173
  metadata:
    uid: DataLinq.Database`1.Delete``1(``0,DataLinq.Mutation.TransactionType)
    commentId: M:DataLinq.Database`1.Delete``1(``0,DataLinq.Mutation.TransactionType)
- markdown: Deletes a model from the database.
- code: 'public void Delete<M>(M model, TransactionType transactionType = TransactionType.ReadAndWrite) where M : IModelInstance'
- h4: Parameters
- parameters:
  - name: model
    type:
    - M
    description: The model to delete.
  - name: transactionType
    type:
    - text: TransactionType
      url: DataLinq.Mutation.TransactionType.html
    description: The type of the transaction.
    optional: true
- h4: Type Parameters
- parameters:
  - name: M
    description: The type of the model.
- api3: Dispose()
  id: DataLinq_Database_1_Dispose
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database.cs#L209
  metadata:
    uid: DataLinq.Database`1.Dispose
    commentId: M:DataLinq.Database`1.Dispose
- markdown: Disposes the database provider.
- code: public void Dispose()
- api3: Exists(string?)
  id: DataLinq_Database_1_Exists_System_String_
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database.cs#L54
  metadata:
    uid: DataLinq.Database`1.Exists(System.String)
    commentId: M:DataLinq.Database`1.Exists(System.String)
- markdown: Checks if the database exists.
- code: public bool Exists(string? databaseName = null)
- h4: Parameters
- parameters:
  - name: databaseName
    type:
    - text: string
      url: https://learn.microsoft.com/dotnet/api/system.string
    - '?'
    description: The name of the database.
    optional: true
- h4: Returns
- parameters:
  - type:
    - text: bool
      url: https://learn.microsoft.com/dotnet/api/system.boolean
    description: <code>true</code> if the database exists; otherwise, <code>false</code>.
- api3: FileOrServerExists()
  id: DataLinq_Database_1_FileOrServerExists
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database.cs#L44
  metadata:
    uid: DataLinq.Database`1.FileOrServerExists
    commentId: M:DataLinq.Database`1.FileOrServerExists
- markdown: Checks if the file or server exists.
- code: public bool FileOrServerExists()
- h4: Returns
- parameters:
  - type:
    - text: bool
      url: https://learn.microsoft.com/dotnet/api/system.boolean
    description: <code>true</code> if the file or server exists; otherwise, <code>false</code>.
- api3: From(string, string?)
  id: DataLinq_Database_1_From_System_String_System_String_
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database.cs#L95
  metadata:
    uid: DataLinq.Database`1.From(System.String,System.String)
    commentId: M:DataLinq.Database`1.From(System.String,System.String)
- markdown: Creates a new SQL query from the specified table name and alias.
- code: public SqlQuery From(string tableName, string? alias = null)
- h4: Parameters
- parameters:
  - name: tableName
    type:
    - text: string
      url: https://learn.microsoft.com/dotnet/api/system.string
    description: The name of the table.
  - name: alias
    type:
    - text: string
      url: https://learn.microsoft.com/dotnet/api/system.string
    - '?'
    description: The alias of the table.
    optional: true
- h4: Returns
- parameters:
  - type:
    - text: SqlQuery
      url: DataLinq.Query.SqlQuery.html
    description: The new SQL query.
- api3: From(TableDefinition, string?)
  id: DataLinq_Database_1_From_DataLinq_Metadata_TableDefinition_System_String_
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database.cs#L111
  metadata:
    uid: DataLinq.Database`1.From(DataLinq.Metadata.TableDefinition,System.String)
    commentId: M:DataLinq.Database`1.From(DataLinq.Metadata.TableDefinition,System.String)
- markdown: Creates a new SQL query from the specified table and alias.
- code: public SqlQuery From(TableDefinition table, string? alias = null)
- h4: Parameters
- parameters:
  - name: table
    type:
    - TableDefinition
    description: The table.
  - name: alias
    type:
    - text: string
      url: https://learn.microsoft.com/dotnet/api/system.string
    - '?'
    description: The alias of the table.
    optional: true
- h4: Returns
- parameters:
  - type:
    - text: SqlQuery
      url: DataLinq.Query.SqlQuery.html
    description: The new SQL query.
- api3: From<V>()
  id: DataLinq_Database_1_From__1
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database.cs#L121
  metadata:
    uid: DataLinq.Database`1.From``1
    commentId: M:DataLinq.Database`1.From``1
- markdown: Creates a new SQL query from the specified model type.
- code: 'public SqlQuery<V> From<V>() where V : IModel'
- h4: Returns
- parameters:
  - type:
    - text: SqlQuery
      url: DataLinq.Query.SqlQuery-1.html
    - <
    - V
    - '>'
    description: The new SQL query.
- h4: Type Parameters
- parameters:
  - name: V
    description: The type of the model.
- api3: Get<M>(IKey)
  id: DataLinq_Database_1_Get__1_DataLinq_Instances_IKey_
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database.cs#L132
  metadata:
    uid: DataLinq.Database`1.Get``1(DataLinq.Instances.IKey)
    commentId: M:DataLinq.Database`1.Get``1(DataLinq.Instances.IKey)
- markdown: Retrieves a model from the database using the specified key.
- code: 'public M? Get<M>(IKey key) where M : IImmutableInstance'
- h4: Parameters
- parameters:
  - name: key
    type:
    - text: IKey
      url: DataLinq.Instances.IKey.html
    description: The key to identify the model.
- h4: Returns
- parameters:
  - type:
    - M
    - '?'
    description: The model if found; otherwise, <code>null</code>.
- h4: Type Parameters
- parameters:
  - name: M
    description: The type of the model.
- api3: Insert<M>(Mutable<M>, TransactionType)
  id: DataLinq_Database_1_Insert__1_DataLinq_Instances_Mutable___0__DataLinq_Mutation_TransactionType_
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database.cs#L138
  metadata:
    uid: DataLinq.Database`1.Insert``1(DataLinq.Instances.Mutable{``0},DataLinq.Mutation.TransactionType)
    commentId: M:DataLinq.Database`1.Insert``1(DataLinq.Instances.Mutable{``0},DataLinq.Mutation.TransactionType)
- code: 'public M Insert<M>(Mutable<M> model, TransactionType transactionType = TransactionType.ReadAndWrite) where M : IImmutableInstance'
- h4: Parameters
- parameters:
  - name: model
    type:
    - text: Mutable
      url: DataLinq.Instances.Mutable-1.html
    - <
    - M
    - '>'
  - name: transactionType
    type:
    - text: TransactionType
      url: DataLinq.Mutation.TransactionType.html
    optional: true
- h4: Returns
- parameters:
  - type:
    - M
- h4: Type Parameters
- parameters:
  - name: M
- api3: Query()
  id: DataLinq_Database_1_Query
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database.cs#L84
  metadata:
    uid: DataLinq.Database`1.Query
    commentId: M:DataLinq.Database`1.Query
- markdown: Queries the database.
- code: public T Query()
- h4: Returns
- parameters:
  - type:
    - T
    description: The query result.
- api3: Save<M>(Mutable<M>, TransactionType)
  id: DataLinq_Database_1_Save__1_DataLinq_Instances_Mutable___0__DataLinq_Mutation_TransactionType_
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database.cs#L162
  metadata:
    uid: DataLinq.Database`1.Save``1(DataLinq.Instances.Mutable{``0},DataLinq.Mutation.TransactionType)
    commentId: M:DataLinq.Database`1.Save``1(DataLinq.Instances.Mutable{``0},DataLinq.Mutation.TransactionType)
- markdown: Inserts or updates a model in the database.
- code: 'public M Save<M>(Mutable<M> model, TransactionType transactionType = TransactionType.ReadAndWrite) where M : IImmutableInstance'
- h4: Parameters
- parameters:
  - name: model
    type:
    - text: Mutable
      url: DataLinq.Instances.Mutable-1.html
    - <
    - M
    - '>'
    description: The model to insert or update.
  - name: transactionType
    type:
    - text: TransactionType
      url: DataLinq.Mutation.TransactionType.html
    description: The type of the transaction.
    optional: true
- h4: Returns
- parameters:
  - type:
    - M
    description: The inserted or updated model.
- h4: Type Parameters
- parameters:
  - name: M
    description: The type of the model.
- api3: Transaction(TransactionType)
  id: DataLinq_Database_1_Transaction_DataLinq_Mutation_TransactionType_
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database.cs#L64
  metadata:
    uid: DataLinq.Database`1.Transaction(DataLinq.Mutation.TransactionType)
    commentId: M:DataLinq.Database`1.Transaction(DataLinq.Mutation.TransactionType)
- markdown: Starts a new transaction.
- code: public Transaction<T> Transaction(TransactionType transactionType = TransactionType.ReadAndWrite)
- h4: Parameters
- parameters:
  - name: transactionType
    type:
    - text: TransactionType
      url: DataLinq.Mutation.TransactionType.html
    description: The type of the transaction.
    optional: true
- h4: Returns
- parameters:
  - type:
    - text: Transaction
      url: DataLinq.Mutation.Transaction-1.html
    - <
    - T
    - '>'
    description: The new transaction.
- api3: Update<M>(Mutable<M>, TransactionType)
  id: DataLinq_Database_1_Update__1_DataLinq_Instances_Mutable___0__DataLinq_Mutation_TransactionType_
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Database.cs#L150
  metadata:
    uid: DataLinq.Database`1.Update``1(DataLinq.Instances.Mutable{``0},DataLinq.Mutation.TransactionType)
    commentId: M:DataLinq.Database`1.Update``1(DataLinq.Instances.Mutable{``0},DataLinq.Mutation.TransactionType)
- markdown: Updates an existing model in the database.
- code: 'public M Update<M>(Mutable<M> model, TransactionType transactionType = TransactionType.ReadAndWrite) where M : IImmutableInstance'
- h4: Parameters
- parameters:
  - name: model
    type:
    - text: Mutable
      url: DataLinq.Instances.Mutable-1.html
    - <
    - M
    - '>'
    description: The model to update.
  - name: transactionType
    type:
    - text: TransactionType
      url: DataLinq.Mutation.TransactionType.html
    description: The type of the transaction.
    optional: true
- h4: Returns
- parameters:
  - type:
    - M
    description: The updated model.
- h4: Type Parameters
- parameters:
  - name: M
    description: The type of the model.
languageId: csharp
metadata:
  description: The main interface for working with the database.
