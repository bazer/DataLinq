### YamlMime:ApiPage
title: Class MySqlDatabaseTransaction
body:
- api1: Class MySqlDatabaseTransaction
  id: DataLinq_MySql_MySqlDatabaseTransaction
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq.MySql/MySqlDatabaseTransaction.cs#L12
  metadata:
    uid: DataLinq.MySql.MySqlDatabaseTransaction
    commentId: T:DataLinq.MySql.MySqlDatabaseTransaction
- facts:
  - name: Namespace
    value:
      text: DataLinq.MySql
      url: DataLinq.MySql.html
  - name: Assembly
    value: DataLinq.MySql.dll
- markdown: Represents a transaction for a MySQL database, encapsulating the logic to execute commands with transactional support.
- code: 'public class MySqlDatabaseTransaction : DatabaseTransaction, IDisposable'
- h4: Inheritance
- inheritance:
  - text: object
    url: https://learn.microsoft.com/dotnet/api/system.object
  - text: DatabaseAccess
    url: DataLinq.DatabaseAccess.html
  - text: DatabaseTransaction
    url: DataLinq.DatabaseTransaction.html
  - text: MySqlDatabaseTransaction
    url: DataLinq.MySql.MySqlDatabaseTransaction.html
- h4: Implements
- list:
  - text: IDisposable
    url: https://learn.microsoft.com/dotnet/api/system.idisposable
- h4: Inherited Members
- list:
  - text: DatabaseTransaction.Status
    url: DataLinq.DatabaseTransaction.html#DataLinq_DatabaseTransaction_Status
  - text: DatabaseTransaction.OnStatusChanged
    url: DataLinq.DatabaseTransaction.html#DataLinq_DatabaseTransaction_OnStatusChanged
  - text: DatabaseTransaction.DbTransaction
    url: DataLinq.DatabaseTransaction.html#DataLinq_DatabaseTransaction_DbTransaction
  - text: DatabaseTransaction.Type
    url: DataLinq.DatabaseTransaction.html#DataLinq_DatabaseTransaction_Type
  - text: DatabaseTransaction.SetStatus(DatabaseTransactionStatus)
    url: DataLinq.DatabaseTransaction.html#DataLinq_DatabaseTransaction_SetStatus_DataLinq_DatabaseTransactionStatus_
  - text: DatabaseTransaction.Rollback()
    url: DataLinq.DatabaseTransaction.html#DataLinq_DatabaseTransaction_Rollback
  - text: DatabaseTransaction.Commit()
    url: DataLinq.DatabaseTransaction.html#DataLinq_DatabaseTransaction_Commit
  - text: DatabaseTransaction.Dispose()
    url: DataLinq.DatabaseTransaction.html#DataLinq_DatabaseTransaction_Dispose
  - text: DatabaseAccess.ExecuteReader(IDbCommand)
    url: DataLinq.DatabaseAccess.html#DataLinq_DatabaseAccess_ExecuteReader_System_Data_IDbCommand_
  - text: DatabaseAccess.ExecuteReader(string)
    url: DataLinq.DatabaseAccess.html#DataLinq_DatabaseAccess_ExecuteReader_System_String_
  - text: DatabaseAccess.ExecuteScalar(IDbCommand)
    url: DataLinq.DatabaseAccess.html#DataLinq_DatabaseAccess_ExecuteScalar_System_Data_IDbCommand_
  - text: DatabaseAccess.ExecuteScalar<T>(IDbCommand)
    url: DataLinq.DatabaseAccess.html#DataLinq_DatabaseAccess_ExecuteScalar__1_System_Data_IDbCommand_
  - text: DatabaseAccess.ExecuteScalar(string)
    url: DataLinq.DatabaseAccess.html#DataLinq_DatabaseAccess_ExecuteScalar_System_String_
  - text: DatabaseAccess.ExecuteScalar<T>(string)
    url: DataLinq.DatabaseAccess.html#DataLinq_DatabaseAccess_ExecuteScalar__1_System_String_
  - text: DatabaseAccess.ExecuteNonQuery(IDbCommand)
    url: DataLinq.DatabaseAccess.html#DataLinq_DatabaseAccess_ExecuteNonQuery_System_Data_IDbCommand_
  - text: DatabaseAccess.ExecuteNonQuery(string)
    url: DataLinq.DatabaseAccess.html#DataLinq_DatabaseAccess_ExecuteNonQuery_System_String_
  - text: DatabaseAccess.ReadReader(IDbCommand)
    url: DataLinq.DatabaseAccess.html#DataLinq_DatabaseAccess_ReadReader_System_Data_IDbCommand_
  - text: DatabaseAccess.ReadReader(string)
    url: DataLinq.DatabaseAccess.html#DataLinq_DatabaseAccess_ReadReader_System_String_
  - text: object.Equals(object?)
    url: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - text: object.Equals(object?, object?)
    url: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - text: object.GetHashCode()
    url: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - text: object.GetType()
    url: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - text: object.MemberwiseClone()
    url: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - text: object.ReferenceEquals(object?, object?)
    url: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - text: object.ToString()
    url: https://learn.microsoft.com/dotnet/api/system.object.tostring
- h2: Constructors
- api3: MySqlDatabaseTransaction(MySqlDataSource, TransactionType, string, DataLinqLoggingConfiguration)
  id: DataLinq_MySql_MySqlDatabaseTransaction__ctor_MySqlConnector_MySqlDataSource_DataLinq_Mutation_TransactionType_System_String_DataLinq_Logging_DataLinqLoggingConfiguration_
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq.MySql/MySqlDatabaseTransaction.cs#L24
  metadata:
    uid: DataLinq.MySql.MySqlDatabaseTransaction.#ctor(MySqlConnector.MySqlDataSource,DataLinq.Mutation.TransactionType,System.String,DataLinq.Logging.DataLinqLoggingConfiguration)
    commentId: M:DataLinq.MySql.MySqlDatabaseTransaction.#ctor(MySqlConnector.MySqlDataSource,DataLinq.Mutation.TransactionType,System.String,DataLinq.Logging.DataLinqLoggingConfiguration)
- markdown: Initializes a new instance of the MySqlDatabaseTransaction class with the specified connection string and transaction type.
- code: public MySqlDatabaseTransaction(MySqlDataSource dataSource, TransactionType type, string databaseName, DataLinqLoggingConfiguration loggingConfiguration)
- h4: Parameters
- parameters:
  - name: dataSource
    type:
    - MySqlDataSource
  - name: type
    type:
    - text: TransactionType
      url: DataLinq.Mutation.TransactionType.html
    description: The type of transaction to be performed.
  - name: databaseName
    type:
    - text: string
      url: https://learn.microsoft.com/dotnet/api/system.string
  - name: loggingConfiguration
    type:
    - text: DataLinqLoggingConfiguration
      url: DataLinq.Logging.DataLinqLoggingConfiguration.html
- api3: MySqlDatabaseTransaction(IDbTransaction, TransactionType, string, DataLinqLoggingConfiguration)
  id: DataLinq_MySql_MySqlDatabaseTransaction__ctor_System_Data_IDbTransaction_DataLinq_Mutation_TransactionType_System_String_DataLinq_Logging_DataLinqLoggingConfiguration_
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq.MySql/MySqlDatabaseTransaction.cs#L37
  metadata:
    uid: DataLinq.MySql.MySqlDatabaseTransaction.#ctor(System.Data.IDbTransaction,DataLinq.Mutation.TransactionType,System.String,DataLinq.Logging.DataLinqLoggingConfiguration)
    commentId: M:DataLinq.MySql.MySqlDatabaseTransaction.#ctor(System.Data.IDbTransaction,DataLinq.Mutation.TransactionType,System.String,DataLinq.Logging.DataLinqLoggingConfiguration)
- markdown: >-
    Initializes a new instance of the MySqlDatabaseTransaction class with the specified database transaction and transaction type.

    Ensures that the provided transaction is valid and the connection is open.
- code: public MySqlDatabaseTransaction(IDbTransaction dbTransaction, TransactionType type, string databaseName, DataLinqLoggingConfiguration loggingConfiguration)
- h4: Parameters
- parameters:
  - name: dbTransaction
    type:
    - text: IDbTransaction
      url: https://learn.microsoft.com/dotnet/api/system.data.idbtransaction
    description: The existing database transaction.
  - name: type
    type:
    - text: TransactionType
      url: DataLinq.Mutation.TransactionType.html
    description: The type of transaction to be performed.
  - name: databaseName
    type:
    - text: string
      url: https://learn.microsoft.com/dotnet/api/system.string
  - name: loggingConfiguration
    type:
    - text: DataLinqLoggingConfiguration
      url: DataLinq.Logging.DataLinqLoggingConfiguration.html
- h2: Methods
- api3: Commit()
  id: DataLinq_MySql_MySqlDatabaseTransaction_Commit
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq.MySql/MySqlDatabaseTransaction.cs#L169
  metadata:
    uid: DataLinq.MySql.MySqlDatabaseTransaction.Commit
    commentId: M:DataLinq.MySql.MySqlDatabaseTransaction.Commit
- markdown: Commits the transaction, ensuring it is open before attempting to commit.
- code: public override void Commit()
- api3: Dispose()
  id: DataLinq_MySql_MySqlDatabaseTransaction_Dispose
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq.MySql/MySqlDatabaseTransaction.cs#L217
  metadata:
    uid: DataLinq.MySql.MySqlDatabaseTransaction.Dispose
    commentId: M:DataLinq.MySql.MySqlDatabaseTransaction.Dispose
- markdown: Releases all resources used by the MySqlDatabaseTransaction, rolling back the transaction if it is still open.
- code: public override void Dispose()
- api3: ExecuteNonQuery(IDbCommand)
  id: DataLinq_MySql_MySqlDatabaseTransaction_ExecuteNonQuery_System_Data_IDbCommand_
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq.MySql/MySqlDatabaseTransaction.cs#L84
  metadata:
    uid: DataLinq.MySql.MySqlDatabaseTransaction.ExecuteNonQuery(System.Data.IDbCommand)
    commentId: M:DataLinq.MySql.MySqlDatabaseTransaction.ExecuteNonQuery(System.Data.IDbCommand)
- markdown: Executes a non-query SQL command within the context of the transaction.
- code: public override int ExecuteNonQuery(IDbCommand command)
- h4: Parameters
- parameters:
  - name: command
    type:
    - text: IDbCommand
      url: https://learn.microsoft.com/dotnet/api/system.data.idbcommand
    description: The command to execute.
- h4: Returns
- parameters:
  - type:
    - text: int
      url: https://learn.microsoft.com/dotnet/api/system.int32
    description: The number of rows affected.
- api3: ExecuteNonQuery(string)
  id: DataLinq_MySql_MySqlDatabaseTransaction_ExecuteNonQuery_System_String_
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq.MySql/MySqlDatabaseTransaction.cs#L97
  metadata:
    uid: DataLinq.MySql.MySqlDatabaseTransaction.ExecuteNonQuery(System.String)
    commentId: M:DataLinq.MySql.MySqlDatabaseTransaction.ExecuteNonQuery(System.String)
- markdown: Executes a SQL command with a non-query statement such as INSERT, UPDATE, or DELETE.
- code: public override int ExecuteNonQuery(string query)
- h4: Parameters
- parameters:
  - name: query
    type:
    - text: string
      url: https://learn.microsoft.com/dotnet/api/system.string
    description: The SQL query string to execute.
- h4: Returns
- parameters:
  - type:
    - text: int
      url: https://learn.microsoft.com/dotnet/api/system.int32
    description: The number of rows affected by the command.
- api3: ExecuteReader(string)
  id: DataLinq_MySql_MySqlDatabaseTransaction_ExecuteReader_System_String_
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq.MySql/MySqlDatabaseTransaction.cs#L146
  metadata:
    uid: DataLinq.MySql.MySqlDatabaseTransaction.ExecuteReader(System.String)
    commentId: M:DataLinq.MySql.MySqlDatabaseTransaction.ExecuteReader(System.String)
- markdown: Executes a SQL command that returns a result set, such as a SELECT query.
- code: public override IDataLinqDataReader ExecuteReader(string query)
- h4: Parameters
- parameters:
  - name: query
    type:
    - text: string
      url: https://learn.microsoft.com/dotnet/api/system.string
    description: The SQL query string to execute.
- h4: Returns
- parameters:
  - type:
    - text: IDataLinqDataReader
      url: DataLinq.IDataLinqDataReader.html
    description: An IDataLinqDataReader that can be used to read the returned data.
- api3: ExecuteReader(IDbCommand)
  id: DataLinq_MySql_MySqlDatabaseTransaction_ExecuteReader_System_Data_IDbCommand_
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq.MySql/MySqlDatabaseTransaction.cs#L157
  metadata:
    uid: DataLinq.MySql.MySqlDatabaseTransaction.ExecuteReader(System.Data.IDbCommand)
    commentId: M:DataLinq.MySql.MySqlDatabaseTransaction.ExecuteReader(System.Data.IDbCommand)
- markdown: Close this reader when done! (or use a using-statement)
- code: public override IDataLinqDataReader ExecuteReader(IDbCommand command)
- h4: Parameters
- parameters:
  - name: command
    type:
    - text: IDbCommand
      url: https://learn.microsoft.com/dotnet/api/system.data.idbcommand
    description: ''
- h4: Returns
- parameters:
  - type:
    - text: IDataLinqDataReader
      url: DataLinq.IDataLinqDataReader.html
    description: ''
- api3: ExecuteScalar(string)
  id: DataLinq_MySql_MySqlDatabaseTransaction_ExecuteScalar_System_String_
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq.MySql/MySqlDatabaseTransaction.cs#L105
  metadata:
    uid: DataLinq.MySql.MySqlDatabaseTransaction.ExecuteScalar(System.String)
    commentId: M:DataLinq.MySql.MySqlDatabaseTransaction.ExecuteScalar(System.String)
- markdown: Executes a SQL command that returns a single value, such as a COUNT or MAX.
- code: public override object? ExecuteScalar(string query)
- h4: Parameters
- parameters:
  - name: query
    type:
    - text: string
      url: https://learn.microsoft.com/dotnet/api/system.string
    description: The SQL query string to execute.
- h4: Returns
- parameters:
  - type:
    - text: object
      url: https://learn.microsoft.com/dotnet/api/system.object
    - '?'
    description: The first column of the first row in the result set returned by the query.
- api3: ExecuteScalar<T>(string)
  id: DataLinq_MySql_MySqlDatabaseTransaction_ExecuteScalar__1_System_String_
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq.MySql/MySqlDatabaseTransaction.cs#L114
  metadata:
    uid: DataLinq.MySql.MySqlDatabaseTransaction.ExecuteScalar``1(System.String)
    commentId: M:DataLinq.MySql.MySqlDatabaseTransaction.ExecuteScalar``1(System.String)
- markdown: Executes a SQL command that returns a single value of type T.
- code: public override T ExecuteScalar<T>(string query)
- h4: Parameters
- parameters:
  - name: query
    type:
    - text: string
      url: https://learn.microsoft.com/dotnet/api/system.string
    description: The SQL query string to execute.
- h4: Returns
- parameters:
  - type:
    - T
    description: The result cast to the type T, or default(T) if the result is DBNull or null.
- h4: Type Parameters
- parameters:
  - name: T
    description: The expected return type of the scalar result.
- api3: ExecuteScalar<T>(IDbCommand)
  id: DataLinq_MySql_MySqlDatabaseTransaction_ExecuteScalar__1_System_Data_IDbCommand_
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq.MySql/MySqlDatabaseTransaction.cs#L123
  metadata:
    uid: DataLinq.MySql.MySqlDatabaseTransaction.ExecuteScalar``1(System.Data.IDbCommand)
    commentId: M:DataLinq.MySql.MySqlDatabaseTransaction.ExecuteScalar``1(System.Data.IDbCommand)
- markdown: Executes a SQL command that returns a single value of type T, using the provided IDbCommand.
- code: public override T ExecuteScalar<T>(IDbCommand command)
- h4: Parameters
- parameters:
  - name: command
    type:
    - text: IDbCommand
      url: https://learn.microsoft.com/dotnet/api/system.data.idbcommand
    description: The IDbCommand to execute.
- h4: Returns
- parameters:
  - type:
    - T
    description: The result cast to the type T, or default(T) if the result is DBNull or null.
- h4: Type Parameters
- parameters:
  - name: T
    description: The expected return type of the scalar result.
- api3: ExecuteScalar(IDbCommand)
  id: DataLinq_MySql_MySqlDatabaseTransaction_ExecuteScalar_System_Data_IDbCommand_
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq.MySql/MySqlDatabaseTransaction.cs#L131
  metadata:
    uid: DataLinq.MySql.MySqlDatabaseTransaction.ExecuteScalar(System.Data.IDbCommand)
    commentId: M:DataLinq.MySql.MySqlDatabaseTransaction.ExecuteScalar(System.Data.IDbCommand)
- markdown: Executes a SQL command that returns a single value, using the provided IDbCommand.
- code: public override object? ExecuteScalar(IDbCommand command)
- h4: Parameters
- parameters:
  - name: command
    type:
    - text: IDbCommand
      url: https://learn.microsoft.com/dotnet/api/system.data.idbcommand
    description: The IDbCommand to execute.
- h4: Returns
- parameters:
  - type:
    - text: object
      url: https://learn.microsoft.com/dotnet/api/system.object
    - '?'
    description: The first column of the first row in the result set returned by the command, or null if the result is DBNull.
- api3: Rollback()
  id: DataLinq_MySql_MySqlDatabaseTransaction_Rollback
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq.MySql/MySqlDatabaseTransaction.cs#L184
  metadata:
    uid: DataLinq.MySql.MySqlDatabaseTransaction.Rollback
    commentId: M:DataLinq.MySql.MySqlDatabaseTransaction.Rollback
- markdown: Rolls back the transaction, ensuring it is open before attempting to roll back.
- code: public override void Rollback()
languageId: csharp
metadata:
  description: Represents a transaction for a MySQL database, encapsulating the logic to execute commands with transactional support.
