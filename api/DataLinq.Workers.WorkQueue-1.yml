### YamlMime:ApiPage
title: Class WorkQueue<T>
body:
- api1: Class WorkQueue<T>
  id: DataLinq_Workers_WorkQueue_1
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Workers/WorkQueue.cs#L17
  metadata:
    uid: DataLinq.Workers.WorkQueue`1
    commentId: T:DataLinq.Workers.WorkQueue`1
- facts:
  - name: Namespace
    value:
      text: DataLinq.Workers
      url: DataLinq.Workers.html
  - name: Assembly
    value: DataLinq.dll
- code: 'public class WorkQueue<T> : IWorkQueue<T>'
- h4: Type Parameters
- parameters:
  - name: T
- h4: Inheritance
- inheritance:
  - text: object
    url: https://learn.microsoft.com/dotnet/api/system.object
  - text: WorkQueue<T>
    url: DataLinq.Workers.WorkQueue-1.html
- h4: Implements
- list:
  - text: IWorkQueue<T>
    url: DataLinq.Workers.IWorkQueue-1.html
- h4: Inherited Members
- list:
  - text: object.Equals(object?)
    url: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - text: object.Equals(object?, object?)
    url: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - text: object.GetHashCode()
    url: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - text: object.GetType()
    url: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - text: object.MemberwiseClone()
    url: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - text: object.ReferenceEquals(object?, object?)
    url: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - text: object.ToString()
    url: https://learn.microsoft.com/dotnet/api/system.object.tostring
- h2: Constructors
- api3: WorkQueue(IProducerConsumerCollection<T>)
  id: DataLinq_Workers_WorkQueue_1__ctor_System_Collections_Concurrent_IProducerConsumerCollection__0__
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Workers/WorkQueue.cs#L22
  metadata:
    uid: DataLinq.Workers.WorkQueue`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})
    commentId: M:DataLinq.Workers.WorkQueue`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})
- code: public WorkQueue(IProducerConsumerCollection<T> collection)
- h4: Parameters
- parameters:
  - name: collection
    type:
    - text: IProducerConsumerCollection
      url: https://learn.microsoft.com/dotnet/api/system.collections.concurrent.iproducerconsumercollection-1
    - <
    - T
    - '>'
- h2: Properties
- api3: Count
  id: DataLinq_Workers_WorkQueue_1_Count
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Workers/WorkQueue.cs#L19
  metadata:
    uid: DataLinq.Workers.WorkQueue`1.Count
    commentId: P:DataLinq.Workers.WorkQueue`1.Count
- code: public int Count { get; }
- h4: Property Value
- parameters:
  - type:
    - text: int
      url: https://learn.microsoft.com/dotnet/api/system.int32
- h2: Methods
- api3: Add(T)
  id: DataLinq_Workers_WorkQueue_1_Add__0_
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Workers/WorkQueue.cs#L29
  metadata:
    uid: DataLinq.Workers.WorkQueue`1.Add(`0)
    commentId: M:DataLinq.Workers.WorkQueue`1.Add(`0)
- code: public void Add(T varde)
- h4: Parameters
- parameters:
  - name: varde
    type:
    - T
- api3: NewStandardQueue()
  id: DataLinq_Workers_WorkQueue_1_NewStandardQueue
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Workers/WorkQueue.cs#L27
  metadata:
    uid: DataLinq.Workers.WorkQueue`1.NewStandardQueue
    commentId: M:DataLinq.Workers.WorkQueue`1.NewStandardQueue
- code: public static WorkQueue<T> NewStandardQueue()
- h4: Returns
- parameters:
  - type:
    - text: WorkQueue
      url: DataLinq.Workers.WorkQueue-1.html
    - <
    - T
    - '>'
- api3: Take(CancellationToken)
  id: DataLinq_Workers_WorkQueue_1_Take_System_Threading_CancellationToken_
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Workers/WorkQueue.cs#L31
  metadata:
    uid: DataLinq.Workers.WorkQueue`1.Take(System.Threading.CancellationToken)
    commentId: M:DataLinq.Workers.WorkQueue`1.Take(System.Threading.CancellationToken)
- code: public T Take(CancellationToken ct)
- h4: Parameters
- parameters:
  - name: ct
    type:
    - text: CancellationToken
      url: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
- h4: Returns
- parameters:
  - type:
    - T
- api3: Values()
  id: DataLinq_Workers_WorkQueue_1_Values
  src: https://github.com/bazer/DataLinq/blob/master/src/DataLinq/Workers/WorkQueue.cs#L33
  metadata:
    uid: DataLinq.Workers.WorkQueue`1.Values
    commentId: M:DataLinq.Workers.WorkQueue`1.Values
- code: public T[] Values()
- h4: Returns
- parameters:
  - type:
    - T
    - '['
    - ']'
languageId: csharp
