{
  "LICENSE.html": {
    "href": "LICENSE.html",
    "title": "| DataLinq",
    "summary": "MIT License Copyright (c) 2018-2025 Sebastian Öberg Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "README.html": {
    "href": "README.html",
    "title": "DataLinq | DataLinq",
    "summary": "DataLinq DataLinq is a lightweight, high-performance ORM that prioritizes data integrity, thread safety, and efficient caching through an innovative use of immutable models. It is designed to minimize memory allocations and speed up data retrieval, making it ideal for read-heavy applications on small to medium projects. 1. Introduction & Overview What Is DataLinq? DataLinq is a modern ORM framework built around the principles of immutability and minimal overhead. By automatically generating both immutable and mutable model classes from your database schema, it ensures consistency and performance while simplifying data access. Core Philosophy Immutability First: All data read from the database is represented as immutable objects, ensuring thread safety and predictable behavior. When modifications are required, DataLinq provides an easy-to-use mechanism to create mutable copies, update them, and seamlessly synchronize the changes. Efficient Caching: The framework leverages both global and transaction-specific caching, dramatically reducing database hits and improving response times. Unified Querying: Built on LINQ, DataLinq translates expressive, familiar queries into optimized backend-specific commands without exposing you to the underlying complexities. Extensibility: Although current support includes MySQL/MariaDB and SQLite, the modular architecture makes it straightforward to extend to other data sources in the future. 3. Getting Started Installation Install DataLinq via NuGet. These are the currently available backends: Install-Package DataLinq.MySql Install-Package DataLinq.SQLite The CLI is installed as a dotnet tool: dotnet tool install --global DataLinq.CLI Configuration Database Connection: Configure your connection strings (for MySQL/MariaDB or SQLite) in your application’s configuration file. DataLinq Configuration: Use the provided configuration file (e.g., datalinq.json) to define your database settings and cache options. Model Creation Generate your data models directly from your database schema using the CLI: datalinq create-models -n YourDatabaseName Or, if you prefer generating SQL scripts for database setup: datalinq create-sql -o output.sql -n YourDatabaseName 4. Code Examples & Usage Performing a Simple Query Retrieve all active users using LINQ: var activeUsers = usersDb.Query().Users .Where(x => x.Status == UserStatus.Active) .ToList(); Updating Data with Immutability Fetch an immutable record, mutate it, and then save the changes: // Retrieve an immutable user var user = usersDb.Query().Users.Single(u => u.Id == 1); // Create a mutable copy, update the record, and save changes var updatedUser = user.Mutate(u => u.Name = \"New Name\").Save(); Accessing Related Entities Fetch a department and its associated managers: var department = employeesDb.Query().Departments.Single(d => d.DeptNo == \"d005\"); var managers = department.Managers; // Fetches collection of managers from cache Using the CLI Create a new database from your models via the command line: datalinq create-database -n YourDatabaseName 5. How It Works (Advanced Overview) Source Generation & Metadata DataLinq scans your abstract model classes—annotated with attributes such as [Table], [Column], and [Relation]—to automatically generate consistent immutable and mutable classes. This approach minimizes boilerplate and ensures that your data models always reflect the underlying database schema. Caching Strategy Global Cache: Immutable objects are cached globally to enable zero-allocation reads. Transactional Cache: During data mutations, a dedicated transactional cache maintains consistency until changes are committed. Cache Invalidation: Supports multiple strategies including automatic updates on mutation, manual refreshes, time-based expiry, and event-driven notifications. Query Translation LINQ expressions are parsed and optimized before being converted into backend-specific commands. This translation layer allows you to write complex queries in a concise manner without worrying about the underlying SQL syntax. 6. Contributing & Further Resources Contributing We welcome contributions from the community! Whether you’re fixing bugs, improving documentation, or adding new features, your help is appreciated. Please see our Contributing Guide for details. Documentation & Support For in-depth technical details, advanced usage, and troubleshooting, please refer to the official documentation. License DataLinq is open source and distributed under the MIT License. See the LICENSE file for more details."
  },
  "api/DataLinq.Attributes.AutoIncrementAttribute.html": {
    "href": "api/DataLinq.Attributes.AutoIncrementAttribute.html",
    "title": "Class AutoIncrementAttribute | DataLinq",
    "summary": "Class AutoIncrementAttribute Namespace DataLinq.Attributes Assembly DataLinq.Core.dll [AttributeUsage(AttributeTargets.Property, Inherited = true, AllowMultiple = false)] public sealed class AutoIncrementAttribute : Attribute Inheritance object Attribute AutoIncrementAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors AutoIncrementAttribute() public AutoIncrementAttribute()"
  },
  "api/DataLinq.Attributes.CacheCleanupAttribute.html": {
    "href": "api/DataLinq.Attributes.CacheCleanupAttribute.html",
    "title": "Class CacheCleanupAttribute | DataLinq",
    "summary": "Class CacheCleanupAttribute Namespace DataLinq.Attributes Assembly DataLinq.Core.dll [AttributeUsage(AttributeTargets.Class|AttributeTargets.Interface, Inherited = true, AllowMultiple = false)] public sealed class CacheCleanupAttribute : Attribute Inheritance object Attribute CacheCleanupAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors CacheCleanupAttribute(CacheCleanupType, long) public CacheCleanupAttribute(CacheCleanupType limitType, long amount) Parameters limitType CacheCleanupType amount long Properties Amount public long Amount { get; } Property Value long LimitType public CacheCleanupType LimitType { get; } Property Value CacheCleanupType"
  },
  "api/DataLinq.Attributes.CacheCleanupType.html": {
    "href": "api/DataLinq.Attributes.CacheCleanupType.html",
    "title": "Enum CacheCleanupType | DataLinq",
    "summary": "Enum CacheCleanupType Namespace DataLinq.Attributes Assembly DataLinq.Core.dll public enum CacheCleanupType Fields Days = 3 Hours = 2 Minutes = 1 Seconds = 0"
  },
  "api/DataLinq.Attributes.CacheLimitAttribute.html": {
    "href": "api/DataLinq.Attributes.CacheLimitAttribute.html",
    "title": "Class CacheLimitAttribute | DataLinq",
    "summary": "Class CacheLimitAttribute Namespace DataLinq.Attributes Assembly DataLinq.Core.dll [AttributeUsage(AttributeTargets.Class|AttributeTargets.Property|AttributeTargets.Interface, Inherited = true, AllowMultiple = true)] public sealed class CacheLimitAttribute : Attribute Inheritance object Attribute CacheLimitAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors CacheLimitAttribute(CacheLimitType, long) public CacheLimitAttribute(CacheLimitType limitType, long amount) Parameters limitType CacheLimitType amount long Properties Amount public long Amount { get; } Property Value long LimitType public CacheLimitType LimitType { get; } Property Value CacheLimitType"
  },
  "api/DataLinq.Attributes.CacheLimitType.html": {
    "href": "api/DataLinq.Attributes.CacheLimitType.html",
    "title": "Enum CacheLimitType | DataLinq",
    "summary": "Enum CacheLimitType Namespace DataLinq.Attributes Assembly DataLinq.Core.dll public enum CacheLimitType Fields Bytes = 6 Days = 5 Gigabytes = 9 Hours = 4 Kilobytes = 7 Megabytes = 8 Minutes = 3 Rows = 0 Seconds = 2 Ticks = 1"
  },
  "api/DataLinq.Attributes.ColumnAttribute.html": {
    "href": "api/DataLinq.Attributes.ColumnAttribute.html",
    "title": "Class ColumnAttribute | DataLinq",
    "summary": "Class ColumnAttribute Namespace DataLinq.Attributes Assembly DataLinq.Core.dll [AttributeUsage(AttributeTargets.Property, Inherited = true, AllowMultiple = false)] public sealed class ColumnAttribute : Attribute Inheritance object Attribute ColumnAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ColumnAttribute(string) public ColumnAttribute(string name) Parameters name string Properties Name public string Name { get; } Property Value string"
  },
  "api/DataLinq.Attributes.DatabaseAttribute.html": {
    "href": "api/DataLinq.Attributes.DatabaseAttribute.html",
    "title": "Class DatabaseAttribute | DataLinq",
    "summary": "Class DatabaseAttribute Namespace DataLinq.Attributes Assembly DataLinq.Core.dll [AttributeUsage(AttributeTargets.Class|AttributeTargets.Interface, Inherited = true, AllowMultiple = false)] public sealed class DatabaseAttribute : Attribute Inheritance object Attribute DatabaseAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors DatabaseAttribute(string) public DatabaseAttribute(string name) Parameters name string Properties Name public string Name { get; } Property Value string"
  },
  "api/DataLinq.Attributes.DefaultAttribute-1.html": {
    "href": "api/DataLinq.Attributes.DefaultAttribute-1.html",
    "title": "Class DefaultAttribute<T> | DataLinq",
    "summary": "Class DefaultAttribute<T> Namespace DataLinq.Attributes Assembly DataLinq.Core.dll [AttributeUsage(AttributeTargets.Property, Inherited = true, AllowMultiple = false)] public class DefaultAttribute<T> : DefaultAttribute Type Parameters T Inheritance object Attribute DefaultAttribute DefaultAttribute<T> Inherited Members DefaultAttribute.Value Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DefaultAttribute(T) public DefaultAttribute(T value) Parameters value T Properties Value public T Value { get; } Property Value T"
  },
  "api/DataLinq.Attributes.DefaultAttribute.html": {
    "href": "api/DataLinq.Attributes.DefaultAttribute.html",
    "title": "Class DefaultAttribute | DataLinq",
    "summary": "Class DefaultAttribute Namespace DataLinq.Attributes Assembly DataLinq.Core.dll [AttributeUsage(AttributeTargets.Property, Inherited = true, AllowMultiple = false)] public class DefaultAttribute : Attribute Inheritance object Attribute DefaultAttribute Derived DefaultAttribute<T> DefaultCurrentTimestampAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DefaultAttribute(object) public DefaultAttribute(object value) Parameters value object Properties Value public object Value { get; } Property Value object"
  },
  "api/DataLinq.Attributes.DefaultCurrentTimestampAttribute.html": {
    "href": "api/DataLinq.Attributes.DefaultCurrentTimestampAttribute.html",
    "title": "Class DefaultCurrentTimestampAttribute | DataLinq",
    "summary": "Class DefaultCurrentTimestampAttribute Namespace DataLinq.Attributes Assembly DataLinq.Core.dll [AttributeUsage(AttributeTargets.Property, Inherited = true, AllowMultiple = false)] public class DefaultCurrentTimestampAttribute : DefaultAttribute Inheritance object Attribute DefaultAttribute DefaultCurrentTimestampAttribute Inherited Members DefaultAttribute.Value Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DefaultCurrentTimestampAttribute() public DefaultCurrentTimestampAttribute() Properties DateTimeDefault public DynamicFunctions DateTimeDefault { get; } Property Value DynamicFunctions"
  },
  "api/DataLinq.Attributes.DefinitionAttribute.html": {
    "href": "api/DataLinq.Attributes.DefinitionAttribute.html",
    "title": "Class DefinitionAttribute | DataLinq",
    "summary": "Class DefinitionAttribute Namespace DataLinq.Attributes Assembly DataLinq.Core.dll [AttributeUsage(AttributeTargets.Class|AttributeTargets.Interface, Inherited = true, AllowMultiple = false)] public sealed class DefinitionAttribute : Attribute Inheritance object Attribute DefinitionAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors DefinitionAttribute(string) public DefinitionAttribute(string sql) Parameters sql string Properties Sql public string Sql { get; } Property Value string"
  },
  "api/DataLinq.Attributes.DynamicFunctions.html": {
    "href": "api/DataLinq.Attributes.DynamicFunctions.html",
    "title": "Enum DynamicFunctions | DataLinq",
    "summary": "Enum DynamicFunctions Namespace DataLinq.Attributes Assembly DataLinq.Core.dll public enum DynamicFunctions Fields CurrentTimestamp = 0 Use the current date and time. MySQL/MariaDB: maps to CURRENT_TIMESTAMP. SQLite: maps to CURRENT_TIMESTAMP."
  },
  "api/DataLinq.Attributes.EnumAttribute.html": {
    "href": "api/DataLinq.Attributes.EnumAttribute.html",
    "title": "Class EnumAttribute | DataLinq",
    "summary": "Class EnumAttribute Namespace DataLinq.Attributes Assembly DataLinq.Core.dll [AttributeUsage(AttributeTargets.Property, Inherited = true, AllowMultiple = false)] public sealed class EnumAttribute : Attribute Inheritance object Attribute EnumAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors EnumAttribute(params string[]) public EnumAttribute(params string[] values) Parameters values string[] Properties Values public string[] Values { get; } Property Value string[]"
  },
  "api/DataLinq.Attributes.ForeignKeyAttribute.html": {
    "href": "api/DataLinq.Attributes.ForeignKeyAttribute.html",
    "title": "Class ForeignKeyAttribute | DataLinq",
    "summary": "Class ForeignKeyAttribute Namespace DataLinq.Attributes Assembly DataLinq.Core.dll [AttributeUsage(AttributeTargets.Property, Inherited = true, AllowMultiple = true)] public sealed class ForeignKeyAttribute : Attribute Inheritance object Attribute ForeignKeyAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ForeignKeyAttribute(string, string, string) public ForeignKeyAttribute(string table, string column, string name) Parameters table string column string name string Properties Column public string Column { get; } Property Value string Name public string Name { get; } Property Value string Table public string Table { get; } Property Value string"
  },
  "api/DataLinq.Attributes.IndexAttribute.html": {
    "href": "api/DataLinq.Attributes.IndexAttribute.html",
    "title": "Class IndexAttribute | DataLinq",
    "summary": "Class IndexAttribute Namespace DataLinq.Attributes Assembly DataLinq.Core.dll Represents an index attribute for a database column. [AttributeUsage(AttributeTargets.Property, Inherited = true, AllowMultiple = true)] public sealed class IndexAttribute : Attribute Inheritance object Attribute IndexAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors IndexAttribute(string, IndexCharacteristic, IndexType, params string[]) Initializes a new instance of the DataLinq.Attributes.IndexAttribute class with the specified name, characteristic, type, and columns. public IndexAttribute(string name, IndexCharacteristic characteristic, IndexType type, params string[] columns) Parameters name string The name of the index. characteristic IndexCharacteristic The characteristic of the index. type IndexType The type of the index. columns string[] The columns associated with the index. IndexAttribute(string, IndexCharacteristic, params string[]) Initializes a new instance of the DataLinq.Attributes.IndexAttribute class with the specified name, characteristic, and columns. The type defaults to BTREE. public IndexAttribute(string name, IndexCharacteristic characteristic, params string[] columns) Parameters name string The name of the index. characteristic IndexCharacteristic The characteristic of the index. columns string[] The columns associated with the index. Properties Characteristic Gets the characteristic of the index. public IndexCharacteristic Characteristic { get; } Property Value IndexCharacteristic Columns Gets the columns associated with the index. public string[] Columns { get; } Property Value string[] Name Gets the name of the index. public string Name { get; } Property Value string Type Gets the type of the index. public IndexType Type { get; } Property Value IndexType"
  },
  "api/DataLinq.Attributes.IndexCacheAttribute.html": {
    "href": "api/DataLinq.Attributes.IndexCacheAttribute.html",
    "title": "Class IndexCacheAttribute | DataLinq",
    "summary": "Class IndexCacheAttribute Namespace DataLinq.Attributes Assembly DataLinq.Core.dll [AttributeUsage(AttributeTargets.Class|AttributeTargets.Property|AttributeTargets.Interface, Inherited = true, AllowMultiple = true)] public sealed class IndexCacheAttribute : Attribute Inheritance object Attribute IndexCacheAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors IndexCacheAttribute(IndexCacheType) public IndexCacheAttribute(IndexCacheType type) Parameters type IndexCacheType IndexCacheAttribute(IndexCacheType, int) public IndexCacheAttribute(IndexCacheType type, int amount) Parameters type IndexCacheType amount int Properties Amount public int? Amount { get; } Property Value int? Type public IndexCacheType Type { get; } Property Value IndexCacheType"
  },
  "api/DataLinq.Attributes.IndexCacheType.html": {
    "href": "api/DataLinq.Attributes.IndexCacheType.html",
    "title": "Enum IndexCacheType | DataLinq",
    "summary": "Enum IndexCacheType Namespace DataLinq.Attributes Assembly DataLinq.Core.dll public enum IndexCacheType Fields All = 1 MaxAmountRows = 2 None = 0"
  },
  "api/DataLinq.Attributes.IndexCharacteristic.html": {
    "href": "api/DataLinq.Attributes.IndexCharacteristic.html",
    "title": "Enum IndexCharacteristic | DataLinq",
    "summary": "Enum IndexCharacteristic Namespace DataLinq.Attributes Assembly DataLinq.Core.dll Represents the logical or constraint-related characteristic of the index. public enum IndexCharacteristic Fields EXCLUSION = 5 Represents PostgreSQL's exclusion constraint, ensuring specific non-overlapping properties. FILTERED = 4 Represents MSSQL's filtered index, which can be seen as a partial index. ForeignKey = 1 Represents a foreign key constraint ensuring uniqueness and referencing another table. PrimaryKey = 0 Represents primary key constraint ensuring uniqueness and serving as a main identifier. Simple = 3 Represents a standard non-unique index. Unique = 2 Represents unique constraint ensuring all values in the index are distinct. VirtualDataLinq = 6 Represents an index that only exists internally in Datalinq."
  },
  "api/DataLinq.Attributes.IndexType.html": {
    "href": "api/DataLinq.Attributes.IndexType.html",
    "title": "Enum IndexType | DataLinq",
    "summary": "Enum IndexType Namespace DataLinq.Attributes Assembly DataLinq.Core.dll Represents the underlying data structure or algorithm used by the index. public enum IndexType Fields BRIN = 9 Represents PostgreSQL's Block Range INdexes, suitable for large tables with a natural sort order. BTREE = 0 Standard B-tree based index common across MySQL, MSSQL, SQLite, and PostgreSQL. CLUSTERED = 4 Represents the clustered index in MSSQL, determining the physical order of data. COLUMNSTORE = 6 Represents MSSQL's columnstore index, storing data in a column-wise manner. FULLTEXT = 1 Represents full-text search capabilities across MySQL, MSSQL, and SQLite. GIN = 7 Represents PostgreSQL's general inverted index, used for arrays, full-text search, etc. GIST = 8 Represents PostgreSQL's generalized search tree. HASH = 2 Represents hash-based index common to MySQL and PostgreSQL. RTREE = 3 Represents spatial index in MySQL. SPATIAL = 5 Represents spatial indices across MySQL and MSSQL."
  },
  "api/DataLinq.Attributes.InterfaceAttribute-1.html": {
    "href": "api/DataLinq.Attributes.InterfaceAttribute-1.html",
    "title": "Class InterfaceAttribute<T> | DataLinq",
    "summary": "Class InterfaceAttribute<T> Namespace DataLinq.Attributes Assembly DataLinq.Core.dll public class InterfaceAttribute<T> : InterfaceAttribute Type Parameters T Inheritance object Attribute InterfaceAttribute InterfaceAttribute<T> Inherited Members InterfaceAttribute.Name InterfaceAttribute.GenerateInterface Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InterfaceAttribute(bool) public InterfaceAttribute(bool generateInterface = true) Parameters generateInterface bool"
  },
  "api/DataLinq.Attributes.InterfaceAttribute.html": {
    "href": "api/DataLinq.Attributes.InterfaceAttribute.html",
    "title": "Class InterfaceAttribute | DataLinq",
    "summary": "Class InterfaceAttribute Namespace DataLinq.Attributes Assembly DataLinq.Core.dll [AttributeUsage(AttributeTargets.Class, Inherited = true, AllowMultiple = false)] public class InterfaceAttribute : Attribute Inheritance object Attribute InterfaceAttribute Derived InterfaceAttribute<T> Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InterfaceAttribute(bool) public InterfaceAttribute(bool generateInterface = true) Parameters generateInterface bool InterfaceAttribute(string) public InterfaceAttribute(string name) Parameters name string InterfaceAttribute(string, bool) public InterfaceAttribute(string name, bool generateInterface = true) Parameters name string generateInterface bool Properties GenerateInterface public bool GenerateInterface { get; } Property Value bool Name public string? Name { get; } Property Value string?"
  },
  "api/DataLinq.Attributes.NullableAttribute.html": {
    "href": "api/DataLinq.Attributes.NullableAttribute.html",
    "title": "Class NullableAttribute | DataLinq",
    "summary": "Class NullableAttribute Namespace DataLinq.Attributes Assembly DataLinq.Core.dll [AttributeUsage(AttributeTargets.Property, Inherited = true, AllowMultiple = false)] public sealed class NullableAttribute : Attribute Inheritance object Attribute NullableAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors NullableAttribute() public NullableAttribute()"
  },
  "api/DataLinq.Attributes.PrimaryKeyAttribute.html": {
    "href": "api/DataLinq.Attributes.PrimaryKeyAttribute.html",
    "title": "Class PrimaryKeyAttribute | DataLinq",
    "summary": "Class PrimaryKeyAttribute Namespace DataLinq.Attributes Assembly DataLinq.Core.dll [AttributeUsage(AttributeTargets.Property, Inherited = true, AllowMultiple = false)] public sealed class PrimaryKeyAttribute : Attribute Inheritance object Attribute PrimaryKeyAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors PrimaryKeyAttribute() public PrimaryKeyAttribute()"
  },
  "api/DataLinq.Attributes.RelationAttribute.html": {
    "href": "api/DataLinq.Attributes.RelationAttribute.html",
    "title": "Class RelationAttribute | DataLinq",
    "summary": "Class RelationAttribute Namespace DataLinq.Attributes Assembly DataLinq.Core.dll [AttributeUsage(AttributeTargets.Property, Inherited = true, AllowMultiple = true)] public sealed class RelationAttribute : Attribute Inheritance object Attribute RelationAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors RelationAttribute(string, string, string?) public RelationAttribute(string table, string column, string? name = null) Parameters table string column string name string? RelationAttribute(string, string[], string?) public RelationAttribute(string table, string[] column, string? name = null) Parameters table string column string[] name string? Properties Columns public string[] Columns { get; } Property Value string[] Name public string? Name { get; } Property Value string? Table public string Table { get; } Property Value string"
  },
  "api/DataLinq.Attributes.TableAttribute.html": {
    "href": "api/DataLinq.Attributes.TableAttribute.html",
    "title": "Class TableAttribute | DataLinq",
    "summary": "Class TableAttribute Namespace DataLinq.Attributes Assembly DataLinq.Core.dll [AttributeUsage(AttributeTargets.Class|AttributeTargets.Interface, Inherited = true, AllowMultiple = false)] public sealed class TableAttribute : Attribute Inheritance object Attribute TableAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors TableAttribute(string) public TableAttribute(string name) Parameters name string Properties Name public string Name { get; } Property Value string"
  },
  "api/DataLinq.Attributes.TypeAttribute.html": {
    "href": "api/DataLinq.Attributes.TypeAttribute.html",
    "title": "Class TypeAttribute | DataLinq",
    "summary": "Class TypeAttribute Namespace DataLinq.Attributes Assembly DataLinq.Core.dll [AttributeUsage(AttributeTargets.Property, Inherited = true, AllowMultiple = true)] public sealed class TypeAttribute : Attribute Inheritance object Attribute TypeAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors TypeAttribute(string) public TypeAttribute(string name) Parameters name string TypeAttribute(string, long) public TypeAttribute(string name, long length) Parameters name string length long TypeAttribute(string, bool) public TypeAttribute(string name, bool signed) Parameters name string signed bool TypeAttribute(string, long, bool) public TypeAttribute(string name, long length, bool signed) Parameters name string length long signed bool TypeAttribute(string, long, int, bool) public TypeAttribute(string name, long length, int decimals, bool signed) Parameters name string length long decimals int signed bool TypeAttribute(DatabaseType, string) public TypeAttribute(DatabaseType databaseType, string name) Parameters databaseType DatabaseType name string TypeAttribute(DatabaseType, string, long) public TypeAttribute(DatabaseType databaseType, string name, long length) Parameters databaseType DatabaseType name string length long TypeAttribute(DatabaseType, string, long, int) public TypeAttribute(DatabaseType databaseType, string name, long length, int decimals) Parameters databaseType DatabaseType name string length long decimals int TypeAttribute(DatabaseType, string, bool) public TypeAttribute(DatabaseType databaseType, string name, bool signed) Parameters databaseType DatabaseType name string signed bool TypeAttribute(DatabaseType, string, long, bool) public TypeAttribute(DatabaseType databaseType, string name, long length, bool signed) Parameters databaseType DatabaseType name string length long signed bool TypeAttribute(DatabaseType, string, long, int, bool) public TypeAttribute(DatabaseType databaseType, string name, long length, int decimals, bool signed) Parameters databaseType DatabaseType name string length long decimals int signed bool TypeAttribute(DatabaseType, string, long?, int?, bool?) public TypeAttribute(DatabaseType databaseType, string name, long? length, int? decimals, bool? signed) Parameters databaseType DatabaseType name string length long? decimals int? signed bool? TypeAttribute(DatabaseColumnType) public TypeAttribute(DatabaseColumnType dbType) Parameters dbType DatabaseColumnType Properties DatabaseType public DatabaseType DatabaseType { get; } Property Value DatabaseType Decimals public int? Decimals { get; } Property Value int? Length public long? Length { get; } Property Value long? Name public string Name { get; } Property Value string Signed public bool? Signed { get; } Property Value bool?"
  },
  "api/DataLinq.Attributes.UseCacheAttribute.html": {
    "href": "api/DataLinq.Attributes.UseCacheAttribute.html",
    "title": "Class UseCacheAttribute | DataLinq",
    "summary": "Class UseCacheAttribute Namespace DataLinq.Attributes Assembly DataLinq.Core.dll [AttributeUsage(AttributeTargets.Class|AttributeTargets.Property|AttributeTargets.Interface, Inherited = true, AllowMultiple = false)] public sealed class UseCacheAttribute : Attribute Inheritance object Attribute UseCacheAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors UseCacheAttribute(bool) public UseCacheAttribute(bool useCache = true) Parameters useCache bool Properties UseCache public bool UseCache { get; } Property Value bool"
  },
  "api/DataLinq.Attributes.ViewAttribute.html": {
    "href": "api/DataLinq.Attributes.ViewAttribute.html",
    "title": "Class ViewAttribute | DataLinq",
    "summary": "Class ViewAttribute Namespace DataLinq.Attributes Assembly DataLinq.Core.dll [AttributeUsage(AttributeTargets.Class|AttributeTargets.Interface, Inherited = true, AllowMultiple = false)] public sealed class ViewAttribute : Attribute Inheritance object Attribute ViewAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ViewAttribute(string) public ViewAttribute(string name) Parameters name string Properties Name public string Name { get; } Property Value string"
  },
  "api/DataLinq.Attributes.html": {
    "href": "api/DataLinq.Attributes.html",
    "title": "Namespace DataLinq.Attributes | DataLinq",
    "summary": "Namespace DataLinq.Attributes Classes AutoIncrementAttribute CacheCleanupAttribute CacheLimitAttribute ColumnAttribute DatabaseAttribute DefaultAttribute<T> DefaultAttribute DefaultCurrentTimestampAttribute DefinitionAttribute EnumAttribute ForeignKeyAttribute IndexAttribute Represents an index attribute for a database column. IndexCacheAttribute InterfaceAttribute<T> InterfaceAttribute NullableAttribute PrimaryKeyAttribute RelationAttribute TableAttribute TypeAttribute UseCacheAttribute ViewAttribute Enums CacheCleanupType CacheLimitType DynamicFunctions IndexCacheType IndexCharacteristic Represents the logical or constraint-related characteristic of the index. IndexType Represents the underlying data structure or algorithm used by the index."
  },
  "api/DataLinq.Cache.CacheHistory.html": {
    "href": "api/DataLinq.Cache.CacheHistory.html",
    "title": "Class CacheHistory | DataLinq",
    "summary": "Class CacheHistory Namespace DataLinq.Cache Assembly DataLinq.dll public class CacheHistory Inheritance object CacheHistory Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors CacheHistory(uint) public CacheHistory(uint maxCapacity = 10000) Parameters maxCapacity uint Properties Count public uint Count { get; } Property Value uint MaxCapacity public uint MaxCapacity { get; set; } Property Value uint Methods Add(DatabaseCacheSnapshot) public void Add(DatabaseCacheSnapshot snapshot) Parameters snapshot DatabaseCacheSnapshot Clear() public void Clear() GetHistory() public DatabaseCacheSnapshot[] GetHistory() Returns DatabaseCacheSnapshot[] GetLatest() public DatabaseCacheSnapshot? GetLatest() Returns DatabaseCacheSnapshot? OnAdd public event Action<DatabaseCacheSnapshot>? OnAdd Event Type Action<DatabaseCacheSnapshot>?"
  },
  "api/DataLinq.Cache.DatabaseCache.html": {
    "href": "api/DataLinq.Cache.DatabaseCache.html",
    "title": "Class DatabaseCache | DataLinq",
    "summary": "Class DatabaseCache Namespace DataLinq.Cache Assembly DataLinq.dll public class DatabaseCache : IDisposable Inheritance object DatabaseCache Implements IDisposable Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors DatabaseCache(IDatabaseProvider, DataLinqLoggingConfiguration) public DatabaseCache(IDatabaseProvider database, DataLinqLoggingConfiguration loggingConfiguration) Parameters database IDatabaseProvider loggingConfiguration DataLinqLoggingConfiguration Properties CleanCacheWorker public CleanCacheWorker? CleanCacheWorker { get; } Property Value CleanCacheWorker? Database public IDatabaseProvider Database { get; set; } Property Value IDatabaseProvider History public CacheHistory History { get; } Property Value CacheHistory TableCaches public Dictionary<TableDefinition, TableCache> TableCaches { get; } Property Value Dictionary<TableDefinition, TableCache> Methods ApplyChanges(IEnumerable<StateChange>, Transaction?) public void ApplyChanges(IEnumerable<StateChange> changes, Transaction? transaction = null) Parameters changes IEnumerable<StateChange> transaction Transaction? ClearCache() public void ClearCache() Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() GetIndexCachePolicy() public (IndexCacheType, int? amount) GetIndexCachePolicy() Returns (IndexCacheType, int? amount) GetLatestSnapshot() public DatabaseCacheSnapshot GetLatestSnapshot() Returns DatabaseCacheSnapshot GetTableCache(TableDefinition) public TableCache GetTableCache(TableDefinition table) Parameters table TableDefinition Returns TableCache MakeSnapshot() public DatabaseCacheSnapshot MakeSnapshot() Returns DatabaseCacheSnapshot RemoveRowsByLimit(CacheLimitType, long) public IEnumerable<(TableCache table, int numRows)> RemoveRowsByLimit(CacheLimitType limitType, long amount) Parameters limitType CacheLimitType amount long Returns IEnumerable<(TableCache table, int numRows)> RemoveRowsBySettings() public IEnumerable<(TableCache table, int numRows)> RemoveRowsBySettings() Returns IEnumerable<(TableCache table, int numRows)> RemoveRowsInsertedBeforeTick(long) public IEnumerable<(TableCache table, int numRows)> RemoveRowsInsertedBeforeTick(long tick) Parameters tick long Returns IEnumerable<(TableCache table, int numRows)> RemoveTransaction(Transaction) public void RemoveTransaction(Transaction transaction) Parameters transaction Transaction"
  },
  "api/DataLinq.Cache.DatabaseCacheSnapshot.html": {
    "href": "api/DataLinq.Cache.DatabaseCacheSnapshot.html",
    "title": "Class DatabaseCacheSnapshot | DataLinq",
    "summary": "Class DatabaseCacheSnapshot Namespace DataLinq.Cache Assembly DataLinq.dll public class DatabaseCacheSnapshot Inheritance object DatabaseCacheSnapshot Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors DatabaseCacheSnapshot(DateTime, TableCacheSnapshot[]) public DatabaseCacheSnapshot(DateTime timestamp, TableCacheSnapshot[] tableCaches) Parameters timestamp DateTime tableCaches TableCacheSnapshot[] Properties NewestDateTime public DateTime? NewestDateTime { get; } Property Value DateTime? NewestTick public long? NewestTick { get; } Property Value long? OldestDateTime public DateTime? OldestDateTime { get; } Property Value DateTime? OldestTick public long? OldestTick { get; } Property Value long? RowCount public int RowCount { get; } Property Value int TableCaches public TableCacheSnapshot[] TableCaches { get; } Property Value TableCacheSnapshot[] Timestamp public DateTime Timestamp { get; } Property Value DateTime TotalBytes public long TotalBytes { get; } Property Value long TotalBytesFormatted public string TotalBytesFormatted { get; } Property Value string"
  },
  "api/DataLinq.Cache.IndexCache.html": {
    "href": "api/DataLinq.Cache.IndexCache.html",
    "title": "Class IndexCache | DataLinq",
    "summary": "Class IndexCache Namespace DataLinq.Cache Assembly DataLinq.dll public class IndexCache Inheritance object IndexCache Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Fields foreignKeys protected ConcurrentDictionary<IKey, IKey[]> foreignKeys Field Value ConcurrentDictionary<IKey, IKey[]> Properties Count public int Count { get; } Property Value int Values public IEnumerable<IKey[]> Values { get; } Property Value IEnumerable<IKey[]> Methods Clear() public void Clear() ContainsKey(IKey) public bool ContainsKey(IKey foreignKey) Parameters foreignKey IKey Returns bool GetForeignKeysByPrimaryKey(IKey) public IEnumerable<IKey> GetForeignKeysByPrimaryKey(IKey primaryKey) Parameters primaryKey IKey Returns IEnumerable<IKey> RemoveInsertedBeforeTick(long) public int RemoveInsertedBeforeTick(long tick) Parameters tick long Returns int TryAdd(IKey, IKey[]) public bool TryAdd(IKey foreignKey, IKey[] primaryKeys) Parameters foreignKey IKey primaryKeys IKey[] Returns bool TryGetValue(IKey, out IKey[]?) public bool TryGetValue(IKey foreignKey, out IKey[]? keys) Parameters foreignKey IKey keys IKey[]? Returns bool TryRemoveForeignKey(IKey, out int) public bool TryRemoveForeignKey(IKey foreignKey, out int numRowsRemoved) Parameters foreignKey IKey numRowsRemoved int Returns bool TryRemovePrimaryKey(IKey, out int) public bool TryRemovePrimaryKey(IKey primaryKey, out int numRowsRemoved) Parameters primaryKey IKey numRowsRemoved int Returns bool"
  },
  "api/DataLinq.Cache.KeyCache-1.html": {
    "href": "api/DataLinq.Cache.KeyCache-1.html",
    "title": "Class KeyCache<T> | DataLinq",
    "summary": "Class KeyCache<T> Namespace DataLinq.Cache Assembly DataLinq.dll public class KeyCache<T> where T : IKey Type Parameters T Inheritance object KeyCache<T> Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Properties Count public int Count { get; } Property Value int Values public IEnumerable<T> Values { get; } Property Value IEnumerable<T> Methods Clear() public void Clear() ContainsKey(int) public bool ContainsKey(int hashCode) Parameters hashCode int Returns bool ContainsKey(T) public bool ContainsKey(T keys) Parameters keys T Returns bool TryAdd(T) public bool TryAdd(T keys) Parameters keys T Returns bool TryGetValue(int, out T?) public bool TryGetValue(int hashCode, out T? keys) Parameters hashCode int keys T? Returns bool"
  },
  "api/DataLinq.Cache.RowCache.html": {
    "href": "api/DataLinq.Cache.RowCache.html",
    "title": "Class RowCache | DataLinq",
    "summary": "Class RowCache Namespace DataLinq.Cache Assembly DataLinq.dll public class RowCache Inheritance object RowCache Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Fields rows protected ConcurrentDictionary<IKey, IImmutableInstance> rows Field Value ConcurrentDictionary<IKey, IImmutableInstance> Properties Count public int Count { get; } Property Value int NewestTick public long? NewestTick { get; } Property Value long? OldestTick public long? OldestTick { get; } Property Value long? Rows public IEnumerable<IImmutableInstance> Rows { get; } Property Value IEnumerable<IImmutableInstance> TotalBytes public long TotalBytes { get; } Property Value long TotalBytesFormatted public string TotalBytesFormatted { get; } Property Value string Methods ClearRows() public void ClearRows() RemoveRowsInsertedBeforeTick(long) public int RemoveRowsInsertedBeforeTick(long tick) Parameters tick long Returns int RemoveRowsOverRowLimit(int) public int RemoveRowsOverRowLimit(int maxRows) Parameters maxRows int Returns int RemoveRowsOverSizeLimit(long) public int RemoveRowsOverSizeLimit(long maxSize) Parameters maxSize long Returns int TryAddRow(IKey, RowData, IImmutableInstance) public bool TryAddRow(IKey keys, RowData data, IImmutableInstance instance) Parameters keys IKey data RowData instance IImmutableInstance Returns bool TryGetValue(IKey, out IImmutableInstance?) public bool TryGetValue(IKey primaryKeys, out IImmutableInstance? row) Parameters primaryKeys IKey row IImmutableInstance? Returns bool TryRemoveRow(IKey, out int) public bool TryRemoveRow(IKey primaryKeys, out int numRowsRemoved) Parameters primaryKeys IKey numRowsRemoved int Returns bool"
  },
  "api/DataLinq.Cache.RowChangeEventArgs.html": {
    "href": "api/DataLinq.Cache.RowChangeEventArgs.html",
    "title": "Class RowChangeEventArgs | DataLinq",
    "summary": "Class RowChangeEventArgs Namespace DataLinq.Cache Assembly DataLinq.dll public class RowChangeEventArgs : EventArgs Inheritance object EventArgs RowChangeEventArgs Inherited Members EventArgs.Empty object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString()"
  },
  "api/DataLinq.Cache.TableCache.html": {
    "href": "api/DataLinq.Cache.TableCache.html",
    "title": "Class TableCache | DataLinq",
    "summary": "Class TableCache Namespace DataLinq.Cache Assembly DataLinq.dll public class TableCache Inheritance object TableCache Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors TableCache(TableDefinition, DatabaseCache, DataLinqLoggingConfiguration) public TableCache(TableDefinition table, DatabaseCache databaseCache, DataLinqLoggingConfiguration loggingConfiguration) Parameters table TableDefinition databaseCache DatabaseCache loggingConfiguration DataLinqLoggingConfiguration Fields IndexCaches protected Dictionary<ColumnIndex, IndexCache> IndexCaches Field Value Dictionary<ColumnIndex, IndexCache> PrimaryKeysCache protected KeyCache<IKey> PrimaryKeysCache Field Value KeyCache<IKey> RowCache protected RowCache RowCache Field Value RowCache TransactionRows protected ConcurrentDictionary<Transaction, RowCache> TransactionRows Field Value ConcurrentDictionary<Transaction, RowCache> indexCachePolicy protected (IndexCacheType type, int? amount) indexCachePolicy Field Value (IndexCacheType type, int? amount) indices protected List<ColumnIndex> indices Field Value List<ColumnIndex> primaryKeyColumnsCount protected int primaryKeyColumnsCount Field Value int Properties DatabaseCache public DatabaseCache DatabaseCache { get; } Property Value DatabaseCache IndicesCount public IEnumerable<(string index, int count)> IndicesCount { get; } Property Value IEnumerable<(string index, int count)> NewestTick public long? NewestTick { get; } Property Value long? OldestTick public long? OldestTick { get; } Property Value long? RowCount public int RowCount { get; } Property Value int Table public TableDefinition Table { get; } Property Value TableDefinition TotalBytes public long TotalBytes { get; } Property Value long TotalBytesFormatted public string TotalBytesFormatted { get; } Property Value string TransactionRowsCount public int TransactionRowsCount { get; } Property Value int Methods ApplyChanges(IEnumerable<StateChange>, Transaction?) public int ApplyChanges(IEnumerable<StateChange> changes, Transaction? transaction = null) Parameters changes IEnumerable<StateChange> transaction Transaction? Returns int ClearCache() public void ClearCache() ClearIndex() public void ClearIndex() ClearRows() public void ClearRows() GetIndexCachePolicy() public (IndexCacheType, int? amount) GetIndexCachePolicy() Returns (IndexCacheType, int? amount) GetKeys(IKey, RelationProperty, DataSourceAccess) public IKey[] GetKeys(IKey foreignKey, RelationProperty otherSide, DataSourceAccess dataSource) Parameters foreignKey IKey otherSide RelationProperty dataSource DataSourceAccess Returns IKey[] GetRow(IKey, DataSourceAccess) public IImmutableInstance? GetRow(IKey primaryKeys, DataSourceAccess dataSource) Parameters primaryKeys IKey dataSource DataSourceAccess Returns IImmutableInstance? GetRows(IKey, RelationProperty, DataSourceAccess) public IEnumerable<IImmutableInstance> GetRows(IKey foreignKey, RelationProperty otherSide, DataSourceAccess dataSource) Parameters foreignKey IKey otherSide RelationProperty dataSource DataSourceAccess Returns IEnumerable<IImmutableInstance> GetRows(IKey[], DataSourceAccess, List<OrderBy>?) public IEnumerable<IImmutableInstance> GetRows(IKey[] primaryKeys, DataSourceAccess dataSource, List<OrderBy>? orderings = null) Parameters primaryKeys IKey[] dataSource DataSourceAccess orderings List<OrderBy>? Returns IEnumerable<IImmutableInstance> GetTransactionRows(Transaction) public IEnumerable<IImmutableInstance> GetTransactionRows(Transaction transaction) Parameters transaction Transaction Returns IEnumerable<IImmutableInstance> IsTransactionInCache(Transaction) public bool IsTransactionInCache(Transaction transaction) Parameters transaction Transaction Returns bool MakeSnapshot() public TableCacheSnapshot MakeSnapshot() Returns TableCacheSnapshot OnRowChanged(RowChangeEventArgs) protected virtual void OnRowChanged(RowChangeEventArgs e) Parameters e RowChangeEventArgs PreloadIndex(IKey, RelationProperty, int?) public void PreloadIndex(IKey foreignKey, RelationProperty otherSide, int? limitRows = null) Parameters foreignKey IKey otherSide RelationProperty limitRows int? RemoveAllIndicesInsertedBeforeTick(long) public int RemoveAllIndicesInsertedBeforeTick(long tick) Parameters tick long Returns int RemoveRowsByLimit(CacheLimitType, long) public int RemoveRowsByLimit(CacheLimitType limitType, long amount) Parameters limitType CacheLimitType amount long Returns int RemoveRowsInsertedBeforeTick(long) public int RemoveRowsInsertedBeforeTick(long tick) Parameters tick long Returns int TryRemoveForeignKeyIndex(ColumnIndex, IKey, out int) public bool TryRemoveForeignKeyIndex(ColumnIndex columnIndex, IKey foreignKey, out int numRowsRemoved) Parameters columnIndex ColumnIndex foreignKey IKey numRowsRemoved int Returns bool TryRemovePrimaryKeyIndex(ColumnIndex, IKey, out int) public bool TryRemovePrimaryKeyIndex(ColumnIndex columnIndex, IKey primaryKeys, out int numRowsRemoved) Parameters columnIndex ColumnIndex primaryKeys IKey numRowsRemoved int Returns bool TryRemoveRowFromAllIndices(IKey, out int) public void TryRemoveRowFromAllIndices(IKey primaryKeys, out int numRowsRemoved) Parameters primaryKeys IKey numRowsRemoved int TryRemoveTransaction(Transaction) public bool TryRemoveTransaction(Transaction transaction) Parameters transaction Transaction Returns bool TryRemoveTransactionRow(IKey, Transaction, out int) public bool TryRemoveTransactionRow(IKey primaryKeys, Transaction transaction, out int numRowsRemoved) Parameters primaryKeys IKey transaction Transaction numRowsRemoved int Returns bool RowChanged public event EventHandler<RowChangeEventArgs>? RowChanged Event Type EventHandler<RowChangeEventArgs>?"
  },
  "api/DataLinq.Cache.TableCacheSnapshot.html": {
    "href": "api/DataLinq.Cache.TableCacheSnapshot.html",
    "title": "Class TableCacheSnapshot | DataLinq",
    "summary": "Class TableCacheSnapshot Namespace DataLinq.Cache Assembly DataLinq.dll public class TableCacheSnapshot Inheritance object TableCacheSnapshot Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors TableCacheSnapshot(string, int, long, long?, long?, (string index, int count)[]) public TableCacheSnapshot(string tableName, int rowCount, long totalBytes, long? newestTick, long? oldestTick, (string index, int count)[] indices) Parameters tableName string rowCount int totalBytes long newestTick long? oldestTick long? indices (string index, int count)[] Properties Indices public (string index, int count)[] Indices { get; } Property Value (string index, int count)[] IndicesFormatted public string IndicesFormatted { get; } Property Value string NewestDateTime public DateTime? NewestDateTime { get; } Property Value DateTime? NewestTick public long? NewestTick { get; } Property Value long? OldestDateTime public DateTime? OldestDateTime { get; } Property Value DateTime? OldestTick public long? OldestTick { get; } Property Value long? RowCount public int RowCount { get; } Property Value int TableName public string TableName { get; } Property Value string TotalBytes public long TotalBytes { get; } Property Value long TotalBytesFormatted public string TotalBytesFormatted { get; } Property Value string"
  },
  "api/DataLinq.Cache.html": {
    "href": "api/DataLinq.Cache.html",
    "title": "Namespace DataLinq.Cache | DataLinq",
    "summary": "Namespace DataLinq.Cache Classes CacheHistory DatabaseCache DatabaseCacheSnapshot IndexCache KeyCache<T> RowCache RowChangeEventArgs TableCache TableCacheSnapshot"
  },
  "api/DataLinq.Config.ConfigFile.html": {
    "href": "api/DataLinq.Config.ConfigFile.html",
    "title": "Class ConfigFile | DataLinq",
    "summary": "Class ConfigFile Namespace DataLinq.Config Assembly DataLinq.dll public record ConfigFile : IEquatable<ConfigFile> Inheritance object ConfigFile Implements IEquatable<ConfigFile> Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Properties Databases public List<ConfigFileDatabase> Databases { get; set; } Property Value List<ConfigFileDatabase>"
  },
  "api/DataLinq.Config.ConfigFileDatabase.html": {
    "href": "api/DataLinq.Config.ConfigFileDatabase.html",
    "title": "Class ConfigFileDatabase | DataLinq",
    "summary": "Class ConfigFileDatabase Namespace DataLinq.Config Assembly DataLinq.dll public record ConfigFileDatabase : IEquatable<ConfigFileDatabase> Inheritance object ConfigFileDatabase Implements IEquatable<ConfigFileDatabase> Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Properties CapitalizeNames public bool? CapitalizeNames { get; set; } Property Value bool? Connections public List<ConfigFileDatabaseConnection> Connections { get; set; } Property Value List<ConfigFileDatabaseConnection> CsType public string? CsType { get; set; } Property Value string? DestinationDirectory public string? DestinationDirectory { get; set; } Property Value string? FileEncoding public string FileEncoding { get; set; } Property Value string Name public string? Name { get; set; } Property Value string? Namespace public string? Namespace { get; set; } Property Value string? RemoveInterfacePrefix public bool? RemoveInterfacePrefix { get; set; } Property Value bool? SeparateTablesAndViews public bool? SeparateTablesAndViews { get; set; } Property Value bool? SourceDirectories public List<string>? SourceDirectories { get; set; } Property Value List<string>? Tables public List<string>? Tables { get; set; } Property Value List<string>? UseFileScopedNamespaces public bool? UseFileScopedNamespaces { get; set; } Property Value bool? UseNullableReferenceTypes public bool? UseNullableReferenceTypes { get; set; } Property Value bool? UseRecord public bool? UseRecord { get; set; } Property Value bool? Views public List<string>? Views { get; set; } Property Value List<string>? Methods ParseFileEncoding() public Encoding ParseFileEncoding() Returns Encoding"
  },
  "api/DataLinq.Config.ConfigFileDatabaseConnection.html": {
    "href": "api/DataLinq.Config.ConfigFileDatabaseConnection.html",
    "title": "Class ConfigFileDatabaseConnection | DataLinq",
    "summary": "Class ConfigFileDatabaseConnection Namespace DataLinq.Config Assembly DataLinq.dll public record ConfigFileDatabaseConnection : IEquatable<ConfigFileDatabaseConnection> Inheritance object ConfigFileDatabaseConnection Implements IEquatable<ConfigFileDatabaseConnection> Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Properties ConnectionString public string? ConnectionString { get; set; } Property Value string? DataSourceName public string? DataSourceName { get; set; } Property Value string? DatabaseName public string? DatabaseName { get; set; } Property Value string? ParsedConnectionString public DataLinqConnectionString? ParsedConnectionString { get; } Property Value DataLinqConnectionString? ParsedType public DatabaseType? ParsedType { get; } Property Value DatabaseType? Type public string? Type { get; set; } Property Value string?"
  },
  "api/DataLinq.Config.ConfigReader.html": {
    "href": "api/DataLinq.Config.ConfigReader.html",
    "title": "Class ConfigReader | DataLinq",
    "summary": "Class ConfigReader Namespace DataLinq.Config Assembly DataLinq.dll public static class ConfigReader Inheritance object ConfigReader Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Methods ParseDatabaseType(string?) public static DatabaseType? ParseDatabaseType(string? typeName) Parameters typeName string? Returns DatabaseType? ParseFileEncoding(string) public static Encoding ParseFileEncoding(string encoding) Parameters encoding string Returns Encoding Read(string) public static ConfigFile Read(string path) Parameters path string Returns ConfigFile"
  },
  "api/DataLinq.Config.DataLinqConfig.html": {
    "href": "api/DataLinq.Config.DataLinqConfig.html",
    "title": "Class DataLinqConfig | DataLinq",
    "summary": "Class DataLinqConfig Namespace DataLinq.Config Assembly DataLinq.dll public record DataLinqConfig : IEquatable<DataLinqConfig> Inheritance object DataLinqConfig Implements IEquatable<DataLinqConfig> Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors DataLinqConfig(string, params ConfigFile[]) public DataLinqConfig(string basePath, params ConfigFile[] configFiles) Parameters basePath string configFiles ConfigFile[] Properties BasePath public string BasePath { get; } Property Value string Databases public List<DataLinqDatabaseConfig> Databases { get; } Property Value List<DataLinqDatabaseConfig> Methods FindAndReadConfigs(string, Action<string>) public static Option<DataLinqConfig> FindAndReadConfigs(string configPath, Action<string> log) Parameters configPath string log Action<string> Returns Option<DataLinqConfig> GetConnection(string?, DatabaseType?) public Option<(DataLinqDatabaseConfig db, DataLinqDatabaseConnection connection)> GetConnection(string? dbName, DatabaseType? databaseType) Parameters dbName string? databaseType DatabaseType? Returns Option<(DataLinqDatabaseConfig db, DataLinqDatabaseConnection connection)>"
  },
  "api/DataLinq.Config.DataLinqConnectionString.html": {
    "href": "api/DataLinq.Config.DataLinqConnectionString.html",
    "title": "Class DataLinqConnectionString | DataLinq",
    "summary": "Class DataLinqConnectionString Namespace DataLinq.Config Assembly DataLinq.dll Represents a connection string and provides methods to access its components. public record DataLinqConnectionString : IEquatable<DataLinqConnectionString> Inheritance object DataLinqConnectionString Implements IEquatable<DataLinqConnectionString> Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors DataLinqConnectionString(string?) Initializes a new instance of the DataLinq.Config.DataLinqConnectionString class with the specified connection string. public DataLinqConnectionString(string? original) Parameters original string? The original connection string. Properties Entries Gets the dictionary containing the key-value pairs of the connection string. public Dictionary<string, string> Entries { get; } Property Value Dictionary<string, string> HasPassword Determines whether the connection string contains a password entry. public bool HasPassword { get; } Property Value bool Original Gets the original connection string. public string Original { get; } Property Value string Path Gets the path (either 'host' or 'data source') from the connection string. public string? Path { get; } Property Value string? Values Gets a collection of key-value pairs from the connection string. public IEnumerable<(string key, string value)> Values { get; } Property Value IEnumerable<(string key, string value)> Methods ChangeValue(string, string) public DataLinqConnectionString ChangeValue(string key, string value) Parameters key string value string Returns DataLinqConnectionString ContainsKey(string) Determines whether the connection string contains the specified key. public bool ContainsKey(string key) Parameters key string The key to locate in the connection string. Returns bool true if the connection string contains an element with the specified key; otherwise, false. GetValue(string) Gets the value associated with the specified key. public string? GetValue(string key) Parameters key string The key of the value to get. Returns string? The value associated with the specified key."
  },
  "api/DataLinq.Config.DataLinqDatabaseConfig.html": {
    "href": "api/DataLinq.Config.DataLinqDatabaseConfig.html",
    "title": "Class DataLinqDatabaseConfig | DataLinq",
    "summary": "Class DataLinqDatabaseConfig Namespace DataLinq.Config Assembly DataLinq.dll public record DataLinqDatabaseConfig : IEquatable<DataLinqDatabaseConfig> Inheritance object DataLinqDatabaseConfig Implements IEquatable<DataLinqDatabaseConfig> Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors DataLinqDatabaseConfig(DataLinqConfig, ConfigFileDatabase) public DataLinqDatabaseConfig(DataLinqConfig config, ConfigFileDatabase database) Parameters config DataLinqConfig database ConfigFileDatabase Properties CapitalizeNames public bool CapitalizeNames { get; } Property Value bool Config public DataLinqConfig Config { get; } Property Value DataLinqConfig Connections public List<DataLinqDatabaseConnection> Connections { get; } Property Value List<DataLinqDatabaseConnection> CsType public string CsType { get; } Property Value string DestinationDirectory public string? DestinationDirectory { get; } Property Value string? FileEncoding public Encoding FileEncoding { get; } Property Value Encoding Name public string Name { get; } Property Value string Namespace public string Namespace { get; } Property Value string RemoveInterfacePrefix public bool RemoveInterfacePrefix { get; } Property Value bool SeparateTablesAndViews public bool SeparateTablesAndViews { get; } Property Value bool SourceDirectories public List<string> SourceDirectories { get; } Property Value List<string> Tables public List<string> Tables { get; } Property Value List<string> UseFileScopedNamespaces public bool UseFileScopedNamespaces { get; } Property Value bool UseNullableReferenceTypes public bool UseNullableReferenceTypes { get; } Property Value bool UseRecord public bool UseRecord { get; } Property Value bool Views public List<string> Views { get; } Property Value List<string> Methods MergeConfig(ConfigFileDatabase) public void MergeConfig(ConfigFileDatabase database) Parameters database ConfigFileDatabase"
  },
  "api/DataLinq.Config.DataLinqDatabaseConnection.html": {
    "href": "api/DataLinq.Config.DataLinqDatabaseConnection.html",
    "title": "Class DataLinqDatabaseConnection | DataLinq",
    "summary": "Class DataLinqDatabaseConnection Namespace DataLinq.Config Assembly DataLinq.dll public record DataLinqDatabaseConnection : IEquatable<DataLinqDatabaseConnection> Inheritance object DataLinqDatabaseConnection Implements IEquatable<DataLinqDatabaseConnection> Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors DataLinqDatabaseConnection(DataLinqDatabaseConfig, ConfigFileDatabaseConnection) public DataLinqDatabaseConnection(DataLinqDatabaseConfig databaseConfig, ConfigFileDatabaseConnection connection) Parameters databaseConfig DataLinqDatabaseConfig connection ConfigFileDatabaseConnection Properties ConnectionString public DataLinqConnectionString ConnectionString { get; } Property Value DataLinqConnectionString DataSourceName public string DataSourceName { get; } Property Value string DatabaseConfig public DataLinqDatabaseConfig DatabaseConfig { get; } Property Value DataLinqDatabaseConfig Type public DatabaseType Type { get; } Property Value DatabaseType Methods GetRootedPath(string) public string GetRootedPath(string basePath) Parameters basePath string Returns string"
  },
  "api/DataLinq.Config.html": {
    "href": "api/DataLinq.Config.html",
    "title": "Namespace DataLinq.Config | DataLinq",
    "summary": "Namespace DataLinq.Config Classes ConfigFile ConfigFileDatabase ConfigFileDatabaseConnection ConfigReader DataLinqConfig DataLinqConnectionString Represents a connection string and provides methods to access its components. DataLinqDatabaseConfig DataLinqDatabaseConnection"
  },
  "api/DataLinq.Core.Factories.MetadataFactory.html": {
    "href": "api/DataLinq.Core.Factories.MetadataFactory.html",
    "title": "Class MetadataFactory | DataLinq",
    "summary": "Class MetadataFactory Namespace DataLinq.Core.Factories Assembly DataLinq.Core.dll public static class MetadataFactory Inheritance object MetadataFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddRelationProperty(ColumnDefinition, ColumnDefinition, string) public static RelationProperty AddRelationProperty(ColumnDefinition column, ColumnDefinition referencedColumn, string constraintName) Parameters column ColumnDefinition referencedColumn ColumnDefinition constraintName string Returns RelationProperty AttachEnumProperty(ValueProperty, IEnumerable<(string name, int value)>, IEnumerable<(string name, int value)>, bool) public static void AttachEnumProperty(ValueProperty property, IEnumerable<(string name, int value)> enumValues, IEnumerable<(string name, int value)> csEnumValues, bool declaredInClass) Parameters property ValueProperty enumValues IEnumerable<(string name, int value)> csEnumValues IEnumerable<(string name, int value)> declaredInClass bool AttachValueProperty(ColumnDefinition, string, bool) public static ValueProperty AttachValueProperty(ColumnDefinition column, string csTypeName, bool capitaliseNames) Parameters column ColumnDefinition csTypeName string capitaliseNames bool Returns ValueProperty GetAttributes(ColumnDefinition) public static IEnumerable<Attribute> GetAttributes(ColumnDefinition column) Parameters column ColumnDefinition Returns IEnumerable<Attribute> ParseAttributes(DatabaseDefinition) public static void ParseAttributes(this DatabaseDefinition database) Parameters database DatabaseDefinition ParseColumn(TableDefinition, ValueProperty) public static ColumnDefinition ParseColumn(this TableDefinition table, ValueProperty property) Parameters table TableDefinition property ValueProperty Returns ColumnDefinition ParseIndices(DatabaseDefinition) public static void ParseIndices(DatabaseDefinition database) Parameters database DatabaseDefinition ParseInterfaces(DatabaseDefinition) public static void ParseInterfaces(DatabaseDefinition database) Parameters database DatabaseDefinition ParseRelations(DatabaseDefinition) public static void ParseRelations(DatabaseDefinition database) Parameters database DatabaseDefinition ParseTable(ModelDefinition) public static TableDefinition ParseTable(ModelDefinition model) Parameters model ModelDefinition Returns TableDefinition"
  },
  "api/DataLinq.Core.Factories.MetadataFromDatabaseFactoryOptions.html": {
    "href": "api/DataLinq.Core.Factories.MetadataFromDatabaseFactoryOptions.html",
    "title": "Struct MetadataFromDatabaseFactoryOptions | DataLinq",
    "summary": "Struct MetadataFromDatabaseFactoryOptions Namespace DataLinq.Core.Factories Assembly DataLinq.Core.dll public struct MetadataFromDatabaseFactoryOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors MetadataFromDatabaseFactoryOptions() public MetadataFromDatabaseFactoryOptions() Properties CapitaliseNames public bool CapitaliseNames { readonly get; set; } Property Value bool DeclareEnumsInClass public bool DeclareEnumsInClass { readonly get; set; } Property Value bool Tables public List<string> Tables { readonly get; set; } Property Value List<string> Views public List<string> Views { readonly get; set; } Property Value List<string>"
  },
  "api/DataLinq.Core.Factories.MetadataTransformer.html": {
    "href": "api/DataLinq.Core.Factories.MetadataTransformer.html",
    "title": "Class MetadataTransformer | DataLinq",
    "summary": "Class MetadataTransformer Namespace DataLinq.Core.Factories Assembly DataLinq.Core.dll public class MetadataTransformer Inheritance object MetadataTransformer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MetadataTransformer(MetadataTransformerOptions) public MetadataTransformer(MetadataTransformerOptions options) Parameters options MetadataTransformerOptions Methods TransformDatabase(DatabaseDefinition, DatabaseDefinition) public void TransformDatabase(DatabaseDefinition srcMetadata, DatabaseDefinition destMetadata) Parameters srcMetadata DatabaseDefinition destMetadata DatabaseDefinition TransformTable(TableModel, TableModel) public void TransformTable(TableModel srcTable, TableModel destTable) Parameters srcTable TableModel destTable TableModel"
  },
  "api/DataLinq.Core.Factories.MetadataTransformerOptions.html": {
    "href": "api/DataLinq.Core.Factories.MetadataTransformerOptions.html",
    "title": "Struct MetadataTransformerOptions | DataLinq",
    "summary": "Struct MetadataTransformerOptions Namespace DataLinq.Core.Factories Assembly DataLinq.Core.dll public struct MetadataTransformerOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors MetadataTransformerOptions(bool, bool) public MetadataTransformerOptions(bool removeInterfacePrefix = true, bool updateConstraintNames = true) Parameters removeInterfacePrefix bool updateConstraintNames bool Properties RemoveInterfacePrefix public bool RemoveInterfacePrefix { readonly get; set; } Property Value bool UpdateConstraintNames public readonly bool UpdateConstraintNames { get; } Property Value bool"
  },
  "api/DataLinq.Core.Factories.MetadataTypeConverter.html": {
    "href": "api/DataLinq.Core.Factories.MetadataTypeConverter.html",
    "title": "Class MetadataTypeConverter | DataLinq",
    "summary": "Class MetadataTypeConverter Namespace DataLinq.Core.Factories Assembly DataLinq.Core.dll public static class MetadataTypeConverter Inheritance object MetadataTypeConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CsTypeSize(string) public static int? CsTypeSize(string csType) Parameters csType string Returns int? GetFullTypeName(string) public static string GetFullTypeName(string typeName) Parameters typeName string Returns string GetKeywordName(Type) public static string GetKeywordName(Type type) Parameters type Type Returns string GetKeywordName(string) public static string GetKeywordName(string typeName) Parameters typeName string Returns string GetType(string) public static Type GetType(string typeName) Parameters typeName string Returns Type IsCsTypeNullable(string) public static bool IsCsTypeNullable(string csType) Parameters csType string Returns bool IsKnownCsType(string) public static bool IsKnownCsType(string csType) Parameters csType string Returns bool IsPrimitiveType(string) public static bool IsPrimitiveType(string typeName) Parameters typeName string Returns bool RemoveInterfacePrefix(string) public static string RemoveInterfacePrefix(string interfaceName) Parameters interfaceName string Returns string"
  },
  "api/DataLinq.Core.Factories.Models.MetadataFromFileFactory.html": {
    "href": "api/DataLinq.Core.Factories.Models.MetadataFromFileFactory.html",
    "title": "Class MetadataFromFileFactory | DataLinq",
    "summary": "Class MetadataFromFileFactory Namespace DataLinq.Core.Factories.Models Assembly DataLinq.Core.dll public class MetadataFromFileFactory Inheritance object MetadataFromFileFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MetadataFromFileFactory(MetadataFromFileFactoryOptions, Action<string>?) public MetadataFromFileFactory(MetadataFromFileFactoryOptions options, Action<string>? log = null) Parameters options MetadataFromFileFactoryOptions log Action<string>? Properties Log public Action<string>? Log { get; } Property Value Action<string>? Methods ReadFiles(string, IEnumerable<string>) public Option<DatabaseDefinition, IDLOptionFailure> ReadFiles(string csType, IEnumerable<string> srcPaths) Parameters csType string srcPaths IEnumerable<string> Returns Option<DatabaseDefinition, IDLOptionFailure> ReadSyntaxTrees(ImmutableArray<TypeDeclarationSyntax>) public Option<DatabaseDefinition, IDLOptionFailure> ReadSyntaxTrees(ImmutableArray<TypeDeclarationSyntax> modelSyntaxes) Parameters modelSyntaxes ImmutableArray<TypeDeclarationSyntax> Returns Option<DatabaseDefinition, IDLOptionFailure>"
  },
  "api/DataLinq.Core.Factories.Models.MetadataFromFileFactoryError.html": {
    "href": "api/DataLinq.Core.Factories.Models.MetadataFromFileFactoryError.html",
    "title": "Enum MetadataFromFileFactoryError | DataLinq",
    "summary": "Enum MetadataFromFileFactoryError Namespace DataLinq.Core.Factories.Models Assembly DataLinq.Core.dll public enum MetadataFromFileFactoryError Fields CompilationError = 0 CouldNotLoadAssembly = 3 FileNotFound = 2 TypeNotFound = 1"
  },
  "api/DataLinq.Core.Factories.Models.MetadataFromFileFactoryOptions.html": {
    "href": "api/DataLinq.Core.Factories.Models.MetadataFromFileFactoryOptions.html",
    "title": "Class MetadataFromFileFactoryOptions | DataLinq",
    "summary": "Class MetadataFromFileFactoryOptions Namespace DataLinq.Core.Factories.Models Assembly DataLinq.Core.dll public class MetadataFromFileFactoryOptions Inheritance object MetadataFromFileFactoryOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FileEncoding public Encoding FileEncoding { get; set; } Property Value Encoding RemoveInterfacePrefix public bool RemoveInterfacePrefix { get; set; } Property Value bool"
  },
  "api/DataLinq.Core.Factories.Models.MetadataFromInterfacesFactoryError.html": {
    "href": "api/DataLinq.Core.Factories.Models.MetadataFromInterfacesFactoryError.html",
    "title": "Enum MetadataFromInterfacesFactoryError | DataLinq",
    "summary": "Enum MetadataFromInterfacesFactoryError Namespace DataLinq.Core.Factories.Models Assembly DataLinq.Core.dll public enum MetadataFromInterfacesFactoryError Fields CompilationError = 0 CouldNotLoadAssembly = 3 FileNotFound = 2 TypeNotFound = 1"
  },
  "api/DataLinq.Core.Factories.Models.MetadataFromInterfacesFactoryOptions.html": {
    "href": "api/DataLinq.Core.Factories.Models.MetadataFromInterfacesFactoryOptions.html",
    "title": "Class MetadataFromInterfacesFactoryOptions | DataLinq",
    "summary": "Class MetadataFromInterfacesFactoryOptions Namespace DataLinq.Core.Factories.Models Assembly DataLinq.Core.dll public class MetadataFromInterfacesFactoryOptions Inheritance object MetadataFromInterfacesFactoryOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FileEncoding public Encoding FileEncoding { get; set; } Property Value Encoding RemoveInterfacePrefix public bool RemoveInterfacePrefix { get; set; } Property Value bool"
  },
  "api/DataLinq.Core.Factories.Models.MetadataFromModelsFactory.html": {
    "href": "api/DataLinq.Core.Factories.Models.MetadataFromModelsFactory.html",
    "title": "Class MetadataFromModelsFactory | DataLinq",
    "summary": "Class MetadataFromModelsFactory Namespace DataLinq.Core.Factories.Models Assembly DataLinq.Core.dll public class MetadataFromModelsFactory Inheritance object MetadataFromModelsFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MetadataFromModelsFactory(MetadataFromInterfacesFactoryOptions, Action<string>?) public MetadataFromModelsFactory(MetadataFromInterfacesFactoryOptions options, Action<string>? log = null) Parameters options MetadataFromInterfacesFactoryOptions log Action<string>? Properties Log public Action<string>? Log { get; } Property Value Action<string>? Methods ReadSyntaxTrees(ImmutableArray<TypeDeclarationSyntax>) public List<Option<DatabaseDefinition, IDLOptionFailure>> ReadSyntaxTrees(ImmutableArray<TypeDeclarationSyntax> modelSyntaxes) Parameters modelSyntaxes ImmutableArray<TypeDeclarationSyntax> Returns List<Option<DatabaseDefinition, IDLOptionFailure>>"
  },
  "api/DataLinq.Core.Factories.Models.ModelFileFactory.html": {
    "href": "api/DataLinq.Core.Factories.Models.ModelFileFactory.html",
    "title": "Class ModelFileFactory | DataLinq",
    "summary": "Class ModelFileFactory Namespace DataLinq.Core.Factories.Models Assembly DataLinq.Core.dll public class ModelFileFactory Inheritance object ModelFileFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ModelFileFactory(ModelFileFactoryOptions) public ModelFileFactory(ModelFileFactoryOptions options) Parameters options ModelFileFactoryOptions Methods CreateModelFiles(DatabaseDefinition) public IEnumerable<(string path, string contents)> CreateModelFiles(DatabaseDefinition database) Parameters database DatabaseDefinition Returns IEnumerable<(string path, string contents)>"
  },
  "api/DataLinq.Core.Factories.Models.ModelFileFactoryOptions.html": {
    "href": "api/DataLinq.Core.Factories.Models.ModelFileFactoryOptions.html",
    "title": "Class ModelFileFactoryOptions | DataLinq",
    "summary": "Class ModelFileFactoryOptions Namespace DataLinq.Core.Factories.Models Assembly DataLinq.Core.dll public class ModelFileFactoryOptions Inheritance object ModelFileFactoryOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties NamespaceName public string? NamespaceName { get; set; } Property Value string? SeparateTablesAndViews public bool SeparateTablesAndViews { get; set; } Property Value bool Tab public string Tab { get; set; } Property Value string UseFileScopedNamespaces public bool UseFileScopedNamespaces { get; set; } Property Value bool UseNullableReferenceTypes public bool UseNullableReferenceTypes { get; set; } Property Value bool UseRecords public bool UseRecords { get; set; } Property Value bool Usings public List<string> Usings { get; set; } Property Value List<string>"
  },
  "api/DataLinq.Core.Factories.Models.ModelType.html": {
    "href": "api/DataLinq.Core.Factories.Models.ModelType.html",
    "title": "Enum ModelType | DataLinq",
    "summary": "Enum ModelType Namespace DataLinq.Core.Factories.Models Assembly DataLinq.Core.dll public enum ModelType Fields classType = 0 interfaceType = 1"
  },
  "api/DataLinq.Core.Factories.Models.html": {
    "href": "api/DataLinq.Core.Factories.Models.html",
    "title": "Namespace DataLinq.Core.Factories.Models | DataLinq",
    "summary": "Namespace DataLinq.Core.Factories.Models Classes MetadataFromFileFactory MetadataFromFileFactoryOptions MetadataFromInterfacesFactoryOptions MetadataFromModelsFactory ModelFileFactory ModelFileFactoryOptions Enums MetadataFromFileFactoryError MetadataFromInterfacesFactoryError ModelType"
  },
  "api/DataLinq.Core.Factories.SyntaxParser.html": {
    "href": "api/DataLinq.Core.Factories.SyntaxParser.html",
    "title": "Class SyntaxParser | DataLinq",
    "summary": "Class SyntaxParser Namespace DataLinq.Core.Factories Assembly DataLinq.Core.dll public class SyntaxParser Inheritance object SyntaxParser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SyntaxParser(ImmutableArray<TypeDeclarationSyntax>) public SyntaxParser(ImmutableArray<TypeDeclarationSyntax> modelSyntaxes) Parameters modelSyntaxes ImmutableArray<TypeDeclarationSyntax> Methods GetTableType(PropertyDeclarationSyntax, List<TypeDeclarationSyntax>) public Option<(string csPropertyName, TypeDeclarationSyntax classSyntax), IDLOptionFailure> GetTableType(PropertyDeclarationSyntax property, List<TypeDeclarationSyntax> modelTypeSyntaxes) Parameters property PropertyDeclarationSyntax modelTypeSyntaxes List<TypeDeclarationSyntax> Returns Option<(string csPropertyName, TypeDeclarationSyntax classSyntax), IDLOptionFailure> IsCustomModelInterface(string) public static bool IsCustomModelInterface(string interfaceName) Parameters interfaceName string Returns bool IsModelInterface(string) public static bool IsModelInterface(string interfaceName) Parameters interfaceName string Returns bool ParseAttribute(AttributeSyntax) public Option<Attribute, IDLOptionFailure> ParseAttribute(AttributeSyntax attributeSyntax) Parameters attributeSyntax AttributeSyntax Returns Option<Attribute, IDLOptionFailure> ParseProperty(PropertyDeclarationSyntax, ModelDefinition) public Option<PropertyDefinition, IDLOptionFailure> ParseProperty(PropertyDeclarationSyntax propSyntax, ModelDefinition model) Parameters propSyntax PropertyDeclarationSyntax model ModelDefinition Returns Option<PropertyDefinition, IDLOptionFailure> ParseTableModel(DatabaseDefinition, TypeDeclarationSyntax, string) public Option<TableModel, IDLOptionFailure> ParseTableModel(DatabaseDefinition database, TypeDeclarationSyntax typeSyntax, string csPropertyName) Parameters database DatabaseDefinition typeSyntax TypeDeclarationSyntax csPropertyName string Returns Option<TableModel, IDLOptionFailure>"
  },
  "api/DataLinq.Core.Factories.html": {
    "href": "api/DataLinq.Core.Factories.html",
    "title": "Namespace DataLinq.Core.Factories | DataLinq",
    "summary": "Namespace DataLinq.Core.Factories Namespaces DataLinq.Core.Factories.Models Classes MetadataFactory MetadataTransformer MetadataTypeConverter SyntaxParser Structs MetadataFromDatabaseFactoryOptions MetadataTransformerOptions"
  },
  "api/DataLinq.DataReader.html": {
    "href": "api/DataLinq.DataReader.html",
    "title": "Class DataReader | DataLinq",
    "summary": "Class DataReader Namespace DataLinq Assembly DataLinq.dll public static class DataReader Inheritance object DataReader Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Methods ConvertBytesToType(ReadOnlySpan<byte>, ValueProperty) public static object ConvertBytesToType(ReadOnlySpan<byte> bytes, ValueProperty property) Parameters bytes ReadOnlySpan<byte> property ValueProperty Returns object ConvertTypeToBytes(object?, ValueProperty) public static ReadOnlySpan<byte> ConvertTypeToBytes(object? value, ValueProperty property) Parameters value object? property ValueProperty Returns ReadOnlySpan<byte>"
  },
  "api/DataLinq.DataWriter.html": {
    "href": "api/DataLinq.DataWriter.html",
    "title": "Class DataWriter | DataLinq",
    "summary": "Class DataWriter Namespace DataLinq Assembly DataLinq.dll Provides extension methods for converting data to be written to the database. public static class DataWriter Inheritance object DataWriter Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Methods ConvertColumnValue(IDataLinqDataWriter, ColumnDefinition, object?) Converts the value of a column to the appropriate database type. public static object? ConvertColumnValue(this IDataLinqDataWriter writer, ColumnDefinition column, object? value) Parameters writer IDataLinqDataWriter The IDataLinqDataWriter instance. column ColumnDefinition The column to convert. value object? The value to convert. Returns object? The converted value. Exceptions ArgumentNullException Thrown when the column is null."
  },
  "api/DataLinq.Database-1.html": {
    "href": "api/DataLinq.Database-1.html",
    "title": "Class Database<T> | DataLinq",
    "summary": "Class Database<T> Namespace DataLinq Assembly DataLinq.dll The main interface for working with the database. public abstract class Database<T> : IDisposable where T : class, IDatabaseModel Type Parameters T The type of the database model. Inheritance object Database<T> Implements IDisposable Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors Database(DatabaseProvider<T>) Initializes a new instance of the DataLinq.Database`1 class. public Database(DatabaseProvider<T> provider) Parameters provider DatabaseProvider<T> The database provider. Properties DatabaseType Gets the type of the database. public DatabaseType DatabaseType { get; } Property Value DatabaseType Provider Gets the database provider. public DatabaseProvider<T> Provider { get; } Property Value DatabaseProvider<T> Methods AttachTransaction(IDbTransaction, TransactionType) Attaches a transaction to the database. public Transaction<T> AttachTransaction(IDbTransaction dbTransaction, TransactionType transactionType = TransactionType.ReadAndWrite) Parameters dbTransaction IDbTransaction The database transaction. transactionType TransactionType The type of the transaction. Returns Transaction<T> The attached transaction. Commit(Action<Transaction>, TransactionType) Commits a transaction with the specified action. public void Commit(Action<Transaction> func, TransactionType transactionType = TransactionType.ReadAndWrite) Parameters func Action<Transaction> The action to perform in the transaction. transactionType TransactionType The type of the transaction. Commit<M>(Func<Transaction, M>, TransactionType) Commits a transaction with the specified function. public M Commit<M>(Func<Transaction, M> func, TransactionType transactionType = TransactionType.ReadAndWrite) where M : IImmutableInstance Parameters func Func<Transaction, M> The function to perform in the transaction. transactionType TransactionType The type of the transaction. Returns M The result of the function. Type Parameters M The type of the model. Delete<M>(M, TransactionType) Deletes a model from the database. public void Delete<M>(M model, TransactionType transactionType = TransactionType.ReadAndWrite) where M : IModelInstance Parameters model M The model to delete. transactionType TransactionType The type of the transaction. Type Parameters M The type of the model. Dispose() Disposes the database provider. public void Dispose() Exists(string?) Checks if the database exists. public bool Exists(string? databaseName = null) Parameters databaseName string? The name of the database. Returns bool true if the database exists; otherwise, false. FileOrServerExists() Checks if the file or server exists. public bool FileOrServerExists() Returns bool true if the file or server exists; otherwise, false. From(string, string?) Creates a new SQL query from the specified table name and alias. public SqlQuery From(string tableName, string? alias = null) Parameters tableName string The name of the table. alias string? The alias of the table. Returns SqlQuery The new SQL query. From(TableDefinition, string?) Creates a new SQL query from the specified table and alias. public SqlQuery From(TableDefinition table, string? alias = null) Parameters table TableDefinition The table. alias string? The alias of the table. Returns SqlQuery The new SQL query. From<V>() Creates a new SQL query from the specified model type. public SqlQuery<V> From<V>() where V : IModel Returns SqlQuery<V> The new SQL query. Type Parameters V The type of the model. Get<M>(IKey) Retrieves a model from the database using the specified key. public M? Get<M>(IKey key) where M : IImmutableInstance Parameters key IKey The key to identify the model. Returns M? The model if found; otherwise, null. Type Parameters M The type of the model. Insert<M>(Mutable<M>, TransactionType) public M Insert<M>(Mutable<M> model, TransactionType transactionType = TransactionType.ReadAndWrite) where M : IImmutableInstance Parameters model Mutable<M> transactionType TransactionType Returns M Type Parameters M Query() Queries the database. public T Query() Returns T The query result. Save<M>(Mutable<M>, TransactionType) Inserts or updates a model in the database. public M Save<M>(Mutable<M> model, TransactionType transactionType = TransactionType.ReadAndWrite) where M : IImmutableInstance Parameters model Mutable<M> The model to insert or update. transactionType TransactionType The type of the transaction. Returns M The inserted or updated model. Type Parameters M The type of the model. Transaction(TransactionType) Starts a new transaction. public Transaction<T> Transaction(TransactionType transactionType = TransactionType.ReadAndWrite) Parameters transactionType TransactionType The type of the transaction. Returns Transaction<T> The new transaction. Update<M>(Mutable<M>, TransactionType) Updates an existing model in the database. public M Update<M>(Mutable<M> model, TransactionType transactionType = TransactionType.ReadAndWrite) where M : IImmutableInstance Parameters model Mutable<M> The model to update. transactionType TransactionType The type of the transaction. Returns M The updated model. Type Parameters M The type of the model."
  },
  "api/DataLinq.DatabaseAccess.html": {
    "href": "api/DataLinq.DatabaseAccess.html",
    "title": "Class DatabaseAccess | DataLinq",
    "summary": "Class DatabaseAccess Namespace DataLinq Assembly DataLinq.dll public abstract class DatabaseAccess Inheritance object DatabaseAccess Derived DatabaseTransaction MySqlDbAccess SQLiteDbAccess Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Methods ExecuteNonQuery(IDbCommand) public abstract int ExecuteNonQuery(IDbCommand command) Parameters command IDbCommand Returns int ExecuteNonQuery(string) public abstract int ExecuteNonQuery(string query) Parameters query string Returns int ExecuteReader(IDbCommand) public abstract IDataLinqDataReader ExecuteReader(IDbCommand command) Parameters command IDbCommand Returns IDataLinqDataReader ExecuteReader(string) public abstract IDataLinqDataReader ExecuteReader(string query) Parameters query string Returns IDataLinqDataReader ExecuteScalar(IDbCommand) public abstract object? ExecuteScalar(IDbCommand command) Parameters command IDbCommand Returns object? ExecuteScalar<T>(IDbCommand) public abstract T ExecuteScalar<T>(IDbCommand command) Parameters command IDbCommand Returns T Type Parameters T ExecuteScalar(string) public abstract object? ExecuteScalar(string query) Parameters query string Returns object? ExecuteScalar<T>(string) public abstract T ExecuteScalar<T>(string query) Parameters query string Returns T Type Parameters T ReadReader(IDbCommand) public IEnumerable<IDataLinqDataReader> ReadReader(IDbCommand command) Parameters command IDbCommand Returns IEnumerable<IDataLinqDataReader> ReadReader(string) public IEnumerable<IDataLinqDataReader> ReadReader(string query) Parameters query string Returns IEnumerable<IDataLinqDataReader>"
  },
  "api/DataLinq.DatabaseProvider-1.html": {
    "href": "api/DataLinq.DatabaseProvider-1.html",
    "title": "Class DatabaseProvider<T> | DataLinq",
    "summary": "Class DatabaseProvider<T> Namespace DataLinq Assembly DataLinq.dll Provides a generic abstract database provider for a specific type of database model. public abstract class DatabaseProvider<T> : DatabaseProvider, IDatabaseProvider, IDisposable where T : class, IDatabaseModel Type Parameters T The type of the database model. Inheritance object DatabaseProvider DatabaseProvider<T> Implements IDatabaseProvider IDisposable Inherited Members DatabaseProvider.DatabaseName DatabaseProvider.CsModelType DatabaseProvider.DatabaseType DatabaseProvider.LoggingConfiguration DatabaseProvider.Constants DatabaseProvider.ConnectionString DatabaseProvider.DatabaseAccess DatabaseProvider.ReadOnlyAccess DatabaseProvider.Metadata DatabaseProvider.State DatabaseProvider.GetTableCache(TableDefinition) DatabaseProvider.StartTransaction(TransactionType) DatabaseProvider.Commit<M>(Func<Transaction, M>) DatabaseProvider.Commit(Action<Transaction>) DatabaseProvider.AttachTransaction(IDbTransaction, TransactionType) DatabaseProvider.ToDbCommand(IQuery) DatabaseProvider.GetLastIdQuery() DatabaseProvider.GetParameter(Sql, string, object?) DatabaseProvider.GetParameterValue(Sql, string) DatabaseProvider.GetParameterComparison(Sql, string, Relation, string[]) DatabaseProvider.GetLimitOffset(Sql, int?, int?) DatabaseProvider.GetTableName(Sql, string, string?) DatabaseProvider.GetCreateSql() DatabaseProvider.GetNewDatabaseTransaction(TransactionType) DatabaseProvider.AttachDatabaseTransaction(IDbTransaction, TransactionType) DatabaseProvider.DatabaseExists(string?) DatabaseProvider.FileOrServerExists() DatabaseProvider.GetWriter() DatabaseProvider.Dispose() object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors DatabaseProvider(string, DatabaseType, DataLinqLoggingConfiguration) Initializes a new instance of the DatabaseProvider with the specified connection string and database type. protected DatabaseProvider(string connectionString, DatabaseType databaseType, DataLinqLoggingConfiguration loggingConfiguration) Parameters connectionString string The connection string to the database. databaseType DatabaseType The type of the database. loggingConfiguration DataLinqLoggingConfiguration DatabaseProvider(string, DatabaseType, DataLinqLoggingConfiguration, string) Initializes a new instance of the DatabaseProvider with the specified connection string, database type, and database name. protected DatabaseProvider(string connectionString, DatabaseType databaseType, DataLinqLoggingConfiguration loggingConfiguration, string databaseName) Parameters connectionString string The connection string to the database. databaseType DatabaseType The type of the database. loggingConfiguration DataLinqLoggingConfiguration databaseName string The name of the database. Properties TypedReadOnlyAccess public ReadOnlyAccess<T> TypedReadOnlyAccess { get; set; } Property Value ReadOnlyAccess<T>"
  },
  "api/DataLinq.DatabaseProvider.html": {
    "href": "api/DataLinq.DatabaseProvider.html",
    "title": "Class DatabaseProvider | DataLinq",
    "summary": "Class DatabaseProvider Namespace DataLinq Assembly DataLinq.dll Abstract base class for database providers, encapsulating common database operations and properties. public abstract class DatabaseProvider : IDatabaseProvider, IDisposable Inheritance object DatabaseProvider Derived DatabaseProvider<T> Implements IDatabaseProvider IDisposable Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors DatabaseProvider(string, Type, DatabaseType, DataLinqLoggingConfiguration, string?) Initializes a new instance of the DatabaseProvider class with the specified connection string, type of the model, database type, and optional database name. protected DatabaseProvider(string connectionString, Type type, DatabaseType databaseType, DataLinqLoggingConfiguration loggingConfiguration, string? databaseName = null) Parameters connectionString string The connection string to the database. type Type The type of the model that the database contains. databaseType DatabaseType The type of the database. loggingConfiguration DataLinqLoggingConfiguration databaseName string? The name of the database (optional). Properties ConnectionString public string ConnectionString { get; } Property Value string Constants public abstract IDatabaseProviderConstants Constants { get; } Property Value IDatabaseProviderConstants CsModelType public Type CsModelType { get; protected set; } Property Value Type DatabaseAccess public abstract DatabaseAccess DatabaseAccess { get; } Property Value DatabaseAccess DatabaseName public string DatabaseName { get; protected set; } Property Value string DatabaseType public DatabaseType DatabaseType { get; } Property Value DatabaseType LoggingConfiguration public DataLinqLoggingConfiguration LoggingConfiguration { get; } Property Value DataLinqLoggingConfiguration Metadata public DatabaseDefinition Metadata { get; } Property Value DatabaseDefinition ReadOnlyAccess public virtual ReadOnlyAccess ReadOnlyAccess { get; } Property Value ReadOnlyAccess State public State State { get; } Property Value State Methods AttachDatabaseTransaction(IDbTransaction, TransactionType) public abstract DatabaseTransaction AttachDatabaseTransaction(IDbTransaction dbTransaction, TransactionType type) Parameters dbTransaction IDbTransaction type TransactionType Returns DatabaseTransaction AttachTransaction(IDbTransaction, TransactionType) Attaches an existing database transaction to this provider with the specified transaction type. public Transaction AttachTransaction(IDbTransaction dbTransaction, TransactionType transactionType = TransactionType.ReadAndWrite) Parameters dbTransaction IDbTransaction The existing database transaction. transactionType TransactionType The type of the transaction. Returns Transaction A new Transaction object that wraps the provided IDbTransaction. Commit<M>(Func<Transaction, M>) public M Commit<M>(Func<Transaction, M> func) Parameters func Func<Transaction, M> Returns M Type Parameters M Commit(Action<Transaction>) public void Commit(Action<Transaction> action) Parameters action Action<Transaction> DatabaseExists(string?) public abstract bool DatabaseExists(string? databaseName = null) Parameters databaseName string? Returns bool Dispose() Releases all resources used by the DatabaseProvider. public void Dispose() FileOrServerExists() public abstract bool FileOrServerExists() Returns bool GetCreateSql() public abstract Sql GetCreateSql() Returns Sql GetLastIdQuery() public abstract string GetLastIdQuery() Returns string GetLimitOffset(Sql, int?, int?) public abstract Sql GetLimitOffset(Sql sql, int? limit, int? offset) Parameters sql Sql limit int? offset int? Returns Sql GetNewDatabaseTransaction(TransactionType) public abstract DatabaseTransaction GetNewDatabaseTransaction(TransactionType type) Parameters type TransactionType Returns DatabaseTransaction GetParameter(Sql, string, object?) public abstract Sql GetParameter(Sql sql, string key, object? value) Parameters sql Sql key string value object? Returns Sql GetParameterComparison(Sql, string, Relation, string[]) public abstract Sql GetParameterComparison(Sql sql, string field, Relation relation, string[] key) Parameters sql Sql field string relation Relation key string[] Returns Sql GetParameterValue(Sql, string) public abstract Sql GetParameterValue(Sql sql, string key) Parameters sql Sql key string Returns Sql GetTableCache(TableDefinition) Retrieves the table cache for a given table metadata. public TableCache GetTableCache(TableDefinition table) Parameters table TableDefinition The metadata of the table to retrieve the cache for. Returns TableCache The table cache for the specified table. GetTableName(Sql, string, string?) public abstract Sql GetTableName(Sql sql, string tableName, string? alias = null) Parameters sql Sql tableName string alias string? Returns Sql GetWriter() public abstract IDataLinqDataWriter GetWriter() Returns IDataLinqDataWriter StartTransaction(TransactionType) Starts a new database transaction with the specified transaction type. public Transaction StartTransaction(TransactionType transactionType = TransactionType.ReadAndWrite) Parameters transactionType TransactionType The type of the transaction. Returns Transaction A new Transaction object. ToDbCommand(IQuery) public abstract IDbCommand ToDbCommand(IQuery query) Parameters query IQuery Returns IDbCommand"
  },
  "api/DataLinq.DatabaseTransaction.html": {
    "href": "api/DataLinq.DatabaseTransaction.html",
    "title": "Class DatabaseTransaction | DataLinq",
    "summary": "Class DatabaseTransaction Namespace DataLinq Assembly DataLinq.dll public abstract class DatabaseTransaction : DatabaseAccess, IDisposable Inheritance object DatabaseAccess DatabaseTransaction Derived MySqlDatabaseTransaction SQLiteDatabaseTransaction Implements IDisposable Inherited Members DatabaseAccess.ExecuteReader(IDbCommand) DatabaseAccess.ExecuteReader(string) DatabaseAccess.ExecuteScalar(IDbCommand) DatabaseAccess.ExecuteScalar<T>(IDbCommand) DatabaseAccess.ExecuteScalar(string) DatabaseAccess.ExecuteScalar<T>(string) DatabaseAccess.ExecuteNonQuery(IDbCommand) DatabaseAccess.ExecuteNonQuery(string) DatabaseAccess.ReadReader(IDbCommand) DatabaseAccess.ReadReader(string) object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors DatabaseTransaction(TransactionType) protected DatabaseTransaction(TransactionType type) Parameters type TransactionType DatabaseTransaction(IDbTransaction, TransactionType) protected DatabaseTransaction(IDbTransaction dbTransaction, TransactionType type) Parameters dbTransaction IDbTransaction type TransactionType Properties DbTransaction public IDbTransaction? DbTransaction { get; protected set; } Property Value IDbTransaction? Status public DatabaseTransactionStatus Status { get; } Property Value DatabaseTransactionStatus Type public TransactionType Type { get; protected set; } Property Value TransactionType Methods Commit() public abstract void Commit() Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public abstract void Dispose() Rollback() public abstract void Rollback() SetStatus(DatabaseTransactionStatus) protected void SetStatus(DatabaseTransactionStatus status) Parameters status DatabaseTransactionStatus OnStatusChanged public event EventHandler<DatabaseTransactionStatusChangeEventArgs>? OnStatusChanged Event Type EventHandler<DatabaseTransactionStatusChangeEventArgs>?"
  },
  "api/DataLinq.DatabaseTransactionStatus.html": {
    "href": "api/DataLinq.DatabaseTransactionStatus.html",
    "title": "Enum DatabaseTransactionStatus | DataLinq",
    "summary": "Enum DatabaseTransactionStatus Namespace DataLinq Assembly DataLinq.dll public enum DatabaseTransactionStatus Fields Closed = 0 Committed = 2 Open = 1 RolledBack = 3"
  },
  "api/DataLinq.DatabaseTransactionStatusChangeEventArgs.html": {
    "href": "api/DataLinq.DatabaseTransactionStatusChangeEventArgs.html",
    "title": "Class DatabaseTransactionStatusChangeEventArgs | DataLinq",
    "summary": "Class DatabaseTransactionStatusChangeEventArgs Namespace DataLinq Assembly DataLinq.dll public class DatabaseTransactionStatusChangeEventArgs : EventArgs Inheritance object EventArgs DatabaseTransactionStatusChangeEventArgs Inherited Members EventArgs.Empty object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Properties Status public DatabaseTransactionStatus Status { get; set; } Property Value DatabaseTransactionStatus"
  },
  "api/DataLinq.DatabaseType.html": {
    "href": "api/DataLinq.DatabaseType.html",
    "title": "Enum DatabaseType | DataLinq",
    "summary": "Enum DatabaseType Namespace DataLinq Assembly DataLinq.Core.dll Enumeration of database types. public enum DatabaseType Fields Default = 0 Default database type. MySQL = 1 MySQL database type. SQLite = 2 SQLite database type."
  },
  "api/DataLinq.DbRead-1.html": {
    "href": "api/DataLinq.DbRead-1.html",
    "title": "Class DbRead<T> | DataLinq",
    "summary": "Class DbRead<T> Namespace DataLinq Assembly DataLinq.dll Represents a class to connect the models to Linq. public class DbRead<T> : Queryable<T>, IOrderedQueryable<T>, IOrderedQueryable, IQueryable<T>, IQueryable, IEnumerable<T>, IEnumerable Type Parameters T The type of the model. Inheritance object QueryableBase<T> Queryable<T> DbRead<T> Implements IOrderedQueryable<T> IOrderedQueryable IQueryable<T> IQueryable IEnumerable<T> IEnumerable Inherited Members Queryable<T>.queryParser QueryableBase<T>.GetEnumerator() QueryableBase<T>.Expression QueryableBase<T>.Provider QueryableBase<T>.ElementType object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors DbRead(DataSourceAccess) Initializes a new instance of the DataLinq.DbRead`1 class. public DbRead(DataSourceAccess transaction) Parameters transaction DataSourceAccess The transaction. DbRead(IQueryProvider, Expression) Initializes a new instance of the DataLinq.DbRead`1 class. public DbRead(IQueryProvider provider, Expression expression) Parameters provider IQueryProvider The query provider. expression Expression The expression."
  },
  "api/DataLinq.ErrorHandling.DLFailureType.html": {
    "href": "api/DataLinq.ErrorHandling.DLFailureType.html",
    "title": "Enum DLFailureType | DataLinq",
    "summary": "Enum DLFailureType Namespace DataLinq.ErrorHandling Assembly DataLinq.Core.dll public enum DLFailureType Fields Aggregation = 6 Exception = 1 FileNotFound = 7 InvalidArgument = 3 InvalidType = 5 NotImplemented = 2 UnexpectedNull = 4 Unspecified = 0"
  },
  "api/DataLinq.ErrorHandling.DLOptionFailure-1.html": {
    "href": "api/DataLinq.ErrorHandling.DLOptionFailure-1.html",
    "title": "Class DLOptionFailure<T> | DataLinq",
    "summary": "Class DLOptionFailure<T> Namespace DataLinq.ErrorHandling Assembly DataLinq.Core.dll public class DLOptionFailure<T> : IDLOptionFailure Type Parameters T Inheritance object IDLOptionFailure DLOptionFailure<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DLOptionFailure(T) public DLOptionFailure(T failure) Parameters failure T DLOptionFailure(DLFailureType, T) public DLOptionFailure(DLFailureType type, T failure) Parameters type DLFailureType failure T DLOptionFailure(T, IEnumerable<IDLOptionFailure>) public DLOptionFailure(T failure, IEnumerable<IDLOptionFailure> innerFailure) Parameters failure T innerFailure IEnumerable<IDLOptionFailure> DLOptionFailure(DLFailureType, T, IEnumerable<IDLOptionFailure>) public DLOptionFailure(DLFailureType type, T failure, IEnumerable<IDLOptionFailure> innerFailure) Parameters type DLFailureType failure T innerFailure IEnumerable<IDLOptionFailure> Properties Failure public T Failure { get; } Property Value T InnerFailures public IDLOptionFailure[] InnerFailures { get; } Property Value IDLOptionFailure[] Type public DLFailureType Type { get; } Property Value DLFailureType Methods ToString() public override string ToString() Returns string Operators implicit operator T(DLOptionFailure<T>) public static implicit operator T(DLOptionFailure<T> optionFailure) Parameters optionFailure DLOptionFailure<T> Returns T implicit operator DLOptionFailure<T>(T) public static implicit operator DLOptionFailure<T>(T failure) Parameters failure T Returns DLOptionFailure<T>"
  },
  "api/DataLinq.ErrorHandling.DLOptionFailure.html": {
    "href": "api/DataLinq.ErrorHandling.DLOptionFailure.html",
    "title": "Class DLOptionFailure | DataLinq",
    "summary": "Class DLOptionFailure Namespace DataLinq.ErrorHandling Assembly DataLinq.Core.dll public static class DLOptionFailure Inheritance object DLOptionFailure Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AggregateFail(IEnumerable<IDLOptionFailure>) public static DLOptionFailure<string> AggregateFail(IEnumerable<IDLOptionFailure> innerFailures) Parameters innerFailures IEnumerable<IDLOptionFailure> Returns DLOptionFailure<string> Fail<T>(T) public static DLOptionFailure<T> Fail<T>(T failure) Parameters failure T Returns DLOptionFailure<T> Type Parameters T Fail<T>(T, IDefinition) public static DLOptionFailure<FailureWithDefinition<T>> Fail<T>(T failure, IDefinition definition) Parameters failure T definition IDefinition Returns DLOptionFailure<FailureWithDefinition<T>> Type Parameters T Fail<T>(DLFailureType, T) public static DLOptionFailure<T> Fail<T>(DLFailureType type, T failure) Parameters type DLFailureType failure T Returns DLOptionFailure<T> Type Parameters T Fail<T>(DLFailureType, T, IDefinition) public static DLOptionFailure<FailureWithDefinition<T>> Fail<T>(DLFailureType type, T failure, IDefinition definition) Parameters type DLFailureType failure T definition IDefinition Returns DLOptionFailure<FailureWithDefinition<T>> Type Parameters T Fail<T>(T, IEnumerable<IDLOptionFailure>) public static DLOptionFailure<T> Fail<T>(T failure, IEnumerable<IDLOptionFailure> innerFailures) Parameters failure T innerFailures IEnumerable<IDLOptionFailure> Returns DLOptionFailure<T> Type Parameters T Fail<T>(T, IDefinition, IEnumerable<IDLOptionFailure>) public static DLOptionFailure<FailureWithDefinition<T>> Fail<T>(T failure, IDefinition definition, IEnumerable<IDLOptionFailure> innerFailures) Parameters failure T definition IDefinition innerFailures IEnumerable<IDLOptionFailure> Returns DLOptionFailure<FailureWithDefinition<T>> Type Parameters T Fail<T>(DLFailureType, T, IEnumerable<IDLOptionFailure>) public static DLOptionFailure<T> Fail<T>(DLFailureType type, T failure, IEnumerable<IDLOptionFailure> innerFailures) Parameters type DLFailureType failure T innerFailures IEnumerable<IDLOptionFailure> Returns DLOptionFailure<T> Type Parameters T Fail<T>(DLFailureType, T, IDefinition, IEnumerable<IDLOptionFailure>) public static DLOptionFailure<FailureWithDefinition<T>> Fail<T>(DLFailureType type, T failure, IDefinition definition, IEnumerable<IDLOptionFailure> innerFailures) Parameters type DLFailureType failure T definition IDefinition innerFailures IEnumerable<IDLOptionFailure> Returns DLOptionFailure<FailureWithDefinition<T>> Type Parameters T"
  },
  "api/DataLinq.ErrorHandling.FailureWithDefinition-1.html": {
    "href": "api/DataLinq.ErrorHandling.FailureWithDefinition-1.html",
    "title": "Class FailureWithDefinition<T> | DataLinq",
    "summary": "Class FailureWithDefinition<T> Namespace DataLinq.ErrorHandling Assembly DataLinq.Core.dll public class FailureWithDefinition<T> Type Parameters T Inheritance object FailureWithDefinition<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FailureWithDefinition(T, IDefinition) public FailureWithDefinition(T failure, IDefinition definition) Parameters failure T definition IDefinition Properties Definition public IDefinition Definition { get; } Property Value IDefinition Failure public T Failure { get; } Property Value T Methods ToString() public override string ToString() Returns string"
  },
  "api/DataLinq.ErrorHandling.IDLOptionFailure.html": {
    "href": "api/DataLinq.ErrorHandling.IDLOptionFailure.html",
    "title": "Class IDLOptionFailure | DataLinq",
    "summary": "Class IDLOptionFailure Namespace DataLinq.ErrorHandling Assembly DataLinq.Core.dll public abstract class IDLOptionFailure Inheritance object IDLOptionFailure Derived DLOptionFailure<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Operators implicit operator string(IDLOptionFailure) public static implicit operator string(IDLOptionFailure optionFailure) Parameters optionFailure IDLOptionFailure Returns string implicit operator IDLOptionFailure(string) public static implicit operator IDLOptionFailure(string failure) Parameters failure string Returns IDLOptionFailure implicit operator IDLOptionFailure(List<IDLOptionFailure>) public static implicit operator IDLOptionFailure(List<IDLOptionFailure> optionFailures) Parameters optionFailures List<IDLOptionFailure> Returns IDLOptionFailure"
  },
  "api/DataLinq.ErrorHandling.html": {
    "href": "api/DataLinq.ErrorHandling.html",
    "title": "Namespace DataLinq.ErrorHandling | DataLinq",
    "summary": "Namespace DataLinq.ErrorHandling Classes DLOptionFailure DLOptionFailure<T> FailureWithDefinition<T> IDLOptionFailure Enums DLFailureType"
  },
  "api/DataLinq.Exceptions.InvalidMutationObjectException.html": {
    "href": "api/DataLinq.Exceptions.InvalidMutationObjectException.html",
    "title": "Class InvalidMutationObjectException | DataLinq",
    "summary": "Class InvalidMutationObjectException Namespace DataLinq.Exceptions Assembly DataLinq.dll public class InvalidMutationObjectException : Exception, ISerializable Inheritance object Exception InvalidMutationObjectException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors InvalidMutationObjectException(string) public InvalidMutationObjectException(string message) Parameters message string InvalidMutationObjectException() public InvalidMutationObjectException() InvalidMutationObjectException(string, Exception) public InvalidMutationObjectException(string message, Exception innerException) Parameters message string innerException Exception Properties Message Gets a message that describes the current exception. public override string Message { get; } Property Value string"
  },
  "api/DataLinq.Exceptions.InvalidQueryException.html": {
    "href": "api/DataLinq.Exceptions.InvalidQueryException.html",
    "title": "Class InvalidQueryException | DataLinq",
    "summary": "Class InvalidQueryException Namespace DataLinq.Exceptions Assembly DataLinq.dll public class InvalidQueryException : Exception, ISerializable Inheritance object Exception InvalidQueryException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors InvalidQueryException(string) public InvalidQueryException(string message) Parameters message string InvalidQueryException(string, Exception) public InvalidQueryException(string message, Exception innerException) Parameters message string innerException Exception Properties Message Gets a message that describes the current exception. public override string Message { get; } Property Value string"
  },
  "api/DataLinq.Exceptions.html": {
    "href": "api/DataLinq.Exceptions.html",
    "title": "Namespace DataLinq.Exceptions | DataLinq",
    "summary": "Namespace DataLinq.Exceptions Classes InvalidMutationObjectException InvalidQueryException"
  },
  "api/DataLinq.IDataLinqDataReader.html": {
    "href": "api/DataLinq.IDataLinqDataReader.html",
    "title": "Interface IDataLinqDataReader | DataLinq",
    "summary": "Interface IDataLinqDataReader Namespace DataLinq Assembly DataLinq.dll public interface IDataLinqDataReader : IDisposable Implements IDisposable Methods GetBoolean(int) bool GetBoolean(int ordinal) Parameters ordinal int Returns bool GetBytes(int) byte[]? GetBytes(int ordinal) Parameters ordinal int Returns byte[]? GetBytes(int, Span<byte>) long GetBytes(int ordinal, Span<byte> buffer) Parameters ordinal int buffer Span<byte> Returns long GetDateOnly(int) DateOnly GetDateOnly(int ordinal) Parameters ordinal int Returns DateOnly GetGuid(int) Guid GetGuid(int ordinal) Parameters ordinal int Returns Guid GetInt32(int) int GetInt32(int ordinal) Parameters ordinal int Returns int GetOrdinal(string) int GetOrdinal(string name) Parameters name string Returns int GetString(int) string GetString(int ordinal) Parameters ordinal int Returns string GetValue(int) object GetValue(int ordinal) Parameters ordinal int Returns object GetValue<T>(ColumnDefinition) T? GetValue<T>(ColumnDefinition column) Parameters column ColumnDefinition Returns T? Type Parameters T GetValue<T>(ColumnDefinition, int) T? GetValue<T>(ColumnDefinition column, int ordinal) Parameters column ColumnDefinition ordinal int Returns T? Type Parameters T IsDbNull(int) bool IsDbNull(int ordinal) Parameters ordinal int Returns bool ReadNextRow() bool ReadNextRow() Returns bool"
  },
  "api/DataLinq.IDataLinqDataWriter.html": {
    "href": "api/DataLinq.IDataLinqDataWriter.html",
    "title": "Interface IDataLinqDataWriter | DataLinq",
    "summary": "Interface IDataLinqDataWriter Namespace DataLinq Assembly DataLinq.dll Interface for writing data to a database. public interface IDataLinqDataWriter Extension Methods DataWriter.ConvertColumnValue(IDataLinqDataWriter, ColumnDefinition, object?) Methods ConvertValue(ColumnDefinition, object?) Converts the value of a column to the appropriate database type. object? ConvertValue(ColumnDefinition column, object? value) Parameters column ColumnDefinition The column to convert. value object? The value to convert. Returns object? The converted value."
  },
  "api/DataLinq.IModelExtensions.html": {
    "href": "api/DataLinq.IModelExtensions.html",
    "title": "Class IModelExtensions | DataLinq",
    "summary": "Class IModelExtensions Namespace DataLinq Assembly DataLinq.dll public static class IModelExtensions Inheritance object IModelExtensions Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Methods Delete<T>(T) public static void Delete<T>(this T model) where T : IImmutableInstance Parameters model T Type Parameters T Delete<T>(T, Transaction) public static void Delete<T>(this T model, Transaction transaction) where T : IModelInstance Parameters model T transaction Transaction Type Parameters T Insert<T>(Mutable<T>, Transaction) public static T Insert<T>(this Mutable<T> model, Transaction transaction) where T : IImmutableInstance Parameters model Mutable<T> transaction Transaction Returns T Type Parameters T Save<T>(Mutable<T>, Transaction) public static T Save<T>(this Mutable<T> model, Transaction transaction) where T : IImmutableInstance Parameters model Mutable<T> transaction Transaction Returns T Type Parameters T Update<T>(Mutable<T>, Transaction) public static T Update<T>(this Mutable<T> model, Transaction transaction) where T : IImmutableInstance Parameters model Mutable<T> transaction Transaction Returns T Type Parameters T"
  },
  "api/DataLinq.Instances.CompositeKey.html": {
    "href": "api/DataLinq.Instances.CompositeKey.html",
    "title": "Struct CompositeKey | DataLinq",
    "summary": "Struct CompositeKey Namespace DataLinq.Instances Assembly DataLinq.dll public readonly record struct CompositeKey : IKey, IEquatable<CompositeKey> Implements IKey IEquatable<CompositeKey> Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.ReferenceEquals(object?, object?) object.ToString() Constructors CompositeKey(object?[]) public CompositeKey(object?[] values) Parameters values object?[] Fields cachedHashCode public readonly int cachedHashCode Field Value int Properties Values public object?[] Values { get; } Property Value object?[] Methods ComputeHashCode(object?[]) public static int ComputeHashCode(object?[] values) Parameters values object?[] Returns int Equals(CompositeKey) Indicates whether the current object is equal to another object of the same type. public bool Equals(CompositeKey other) Parameters other CompositeKey An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance."
  },
  "api/DataLinq.Instances.GuidKey.html": {
    "href": "api/DataLinq.Instances.GuidKey.html",
    "title": "Struct GuidKey | DataLinq",
    "summary": "Struct GuidKey Namespace DataLinq.Instances Assembly DataLinq.dll public readonly record struct GuidKey : IKey, IEquatable<GuidKey> Implements IKey IEquatable<GuidKey> Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.ReferenceEquals(object?, object?) object.ToString() Constructors GuidKey(Guid) public GuidKey(Guid Value) Parameters Value Guid Properties Value public Guid Value { get; init; } Property Value Guid Values public object?[] Values { get; } Property Value object?[] Methods Equals(GuidKey) Indicates whether the current object is equal to another object of the same type. public bool Equals(GuidKey other) Parameters other GuidKey An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance."
  },
  "api/DataLinq.Instances.IImmutable-1.html": {
    "href": "api/DataLinq.Instances.IImmutable-1.html",
    "title": "Interface IImmutable<T> | DataLinq",
    "summary": "Interface IImmutable<T> Namespace DataLinq.Instances Assembly DataLinq.dll public interface IImmutable<T> where T : IModel Type Parameters T Methods Get(IKey, DataSourceAccess) public static T? Get(IKey key, DataSourceAccess dataSource) Parameters key IKey dataSource DataSourceAccess Returns T?"
  },
  "api/DataLinq.Instances.IImmutableInstance-1.html": {
    "href": "api/DataLinq.Instances.IImmutableInstance-1.html",
    "title": "Interface IImmutableInstance<T> | DataLinq",
    "summary": "Interface IImmutableInstance<T> Namespace DataLinq.Instances Assembly DataLinq.dll public interface IImmutableInstance<T> : IImmutableInstance, IModelInstance<T>, IModelInstance, IModel where T : IDatabaseModel Type Parameters T Implements IImmutableInstance IModelInstance<T> IModelInstance IModel Extension Methods IModelExtensions.Delete<IImmutableInstance<T>>(IImmutableInstance<T>) IModelExtensions.Delete<IImmutableInstance<T>>(IImmutableInstance<T>, Transaction)"
  },
  "api/DataLinq.Instances.IImmutableInstance.html": {
    "href": "api/DataLinq.Instances.IImmutableInstance.html",
    "title": "Interface IImmutableInstance | DataLinq",
    "summary": "Interface IImmutableInstance Namespace DataLinq.Instances Assembly DataLinq.dll public interface IImmutableInstance : IModelInstance, IModel Implements IModelInstance IModel Extension Methods IModelExtensions.Delete<IImmutableInstance>(IImmutableInstance) IModelExtensions.Delete<IImmutableInstance>(IImmutableInstance, Transaction) Methods GetDataSource() DataSourceAccess GetDataSource() Returns DataSourceAccess GetRowData() RowData GetRowData() Returns RowData"
  },
  "api/DataLinq.Instances.IImmutableRelation-1.html": {
    "href": "api/DataLinq.Instances.IImmutableRelation-1.html",
    "title": "Interface IImmutableRelation<T> | DataLinq",
    "summary": "Interface IImmutableRelation<T> Namespace DataLinq.Instances Assembly DataLinq.dll public interface IImmutableRelation<T> : IEnumerable<T>, IEnumerable where T : IModelInstance Type Parameters T Implements IEnumerable<T> IEnumerable Properties Count int Count { get; } Property Value int Keys ImmutableArray<IKey> Keys { get; } Property Value ImmutableArray<IKey> Values ImmutableArray<T> Values { get; } Property Value ImmutableArray<T> this[IKey] T? this[IKey key] { get; } Property Value T? Methods AsEnumerable() IEnumerable<KeyValuePair<IKey, T>> AsEnumerable() Returns IEnumerable<KeyValuePair<IKey, T>> Clear() void Clear() ContainsKey(IKey) bool ContainsKey(IKey key) Parameters key IKey Returns bool Get(IKey) T? Get(IKey key) Parameters key IKey Returns T? ToFrozenDictionary() FrozenDictionary<IKey, T> ToFrozenDictionary() Returns FrozenDictionary<IKey, T>"
  },
  "api/DataLinq.Instances.IKey.html": {
    "href": "api/DataLinq.Instances.IKey.html",
    "title": "Interface IKey | DataLinq",
    "summary": "Interface IKey Namespace DataLinq.Instances Assembly DataLinq.dll public interface IKey Properties Values object?[] Values { get; } Property Value object?[]"
  },
  "api/DataLinq.Instances.IModelInstance-1.html": {
    "href": "api/DataLinq.Instances.IModelInstance-1.html",
    "title": "Interface IModelInstance<T> | DataLinq",
    "summary": "Interface IModelInstance<T> Namespace DataLinq.Instances Assembly DataLinq.dll public interface IModelInstance<T> : IModelInstance, IModel where T : IDatabaseModel Type Parameters T Implements IModelInstance IModel Extension Methods IModelExtensions.Delete<IModelInstance<T>>(IModelInstance<T>, Transaction)"
  },
  "api/DataLinq.Instances.IModelInstance.html": {
    "href": "api/DataLinq.Instances.IModelInstance.html",
    "title": "Interface IModelInstance | DataLinq",
    "summary": "Interface IModelInstance Namespace DataLinq.Instances Assembly DataLinq.dll public interface IModelInstance : IModel Implements IModel Extension Methods IModelExtensions.Delete<IModelInstance>(IModelInstance, Transaction) Properties this[string] object? this[string propertyName] { get; } Property Value object? this[ColumnDefinition] object? this[ColumnDefinition column] { get; } Property Value object? Methods ClearLazy() void ClearLazy() GetLazy<V>(string, Func<V>) V? GetLazy<V>(string name, Func<V> fetchCode) Parameters name string fetchCode Func<V> Returns V? Type Parameters V GetRowData() IRowData GetRowData() Returns IRowData GetValues() IEnumerable<KeyValuePair<ColumnDefinition, object?>> GetValues() Returns IEnumerable<KeyValuePair<ColumnDefinition, object?>> GetValues(IEnumerable<ColumnDefinition>) IEnumerable<KeyValuePair<ColumnDefinition, object?>> GetValues(IEnumerable<ColumnDefinition> columns) Parameters columns IEnumerable<ColumnDefinition> Returns IEnumerable<KeyValuePair<ColumnDefinition, object?>> HasPrimaryKeysSet() bool HasPrimaryKeysSet() Returns bool Metadata() ModelDefinition Metadata() Returns ModelDefinition PrimaryKeys() IKey PrimaryKeys() Returns IKey"
  },
  "api/DataLinq.Instances.IMutableInstance-1.html": {
    "href": "api/DataLinq.Instances.IMutableInstance-1.html",
    "title": "Interface IMutableInstance<T> | DataLinq",
    "summary": "Interface IMutableInstance<T> Namespace DataLinq.Instances Assembly DataLinq.dll public interface IMutableInstance<T> : IMutableInstance, IModelInstance<T>, IModelInstance, IModel where T : IDatabaseModel Type Parameters T Implements IMutableInstance IModelInstance<T> IModelInstance IModel Extension Methods IModelExtensions.Delete<IMutableInstance<T>>(IMutableInstance<T>, Transaction)"
  },
  "api/DataLinq.Instances.IMutableInstance.html": {
    "href": "api/DataLinq.Instances.IMutableInstance.html",
    "title": "Interface IMutableInstance | DataLinq",
    "summary": "Interface IMutableInstance Namespace DataLinq.Instances Assembly DataLinq.dll public interface IMutableInstance : IModelInstance, IModel Implements IModelInstance IModel Extension Methods IModelExtensions.Delete<IMutableInstance>(IMutableInstance, Transaction) Properties this[string] object? this[string propertyName] { get; set; } Property Value object? this[ColumnDefinition] object? this[ColumnDefinition column] { get; set; } Property Value object? Methods GetChanges() IEnumerable<KeyValuePair<ColumnDefinition, object?>> GetChanges() Returns IEnumerable<KeyValuePair<ColumnDefinition, object?>> GetRowData() MutableRowData GetRowData() Returns MutableRowData IsDeleted() bool IsDeleted() Returns bool IsNew() bool IsNew() Returns bool Reset() void Reset() Reset(RowData) void Reset(RowData rowData) Parameters rowData RowData SetDeleted() void SetDeleted() SetLazy<V>(string, V) void SetLazy<V>(string name, V value) Parameters name string value V Type Parameters V"
  },
  "api/DataLinq.Instances.IRowData.html": {
    "href": "api/DataLinq.Instances.IRowData.html",
    "title": "Interface IRowData | DataLinq",
    "summary": "Interface IRowData Namespace DataLinq.Instances Assembly DataLinq.dll public interface IRowData Properties Table TableDefinition Table { get; } Property Value TableDefinition this[ColumnDefinition] object? this[ColumnDefinition column] { get; } Property Value object? Methods GetColumnAndValues() IEnumerable<KeyValuePair<ColumnDefinition, object?>> GetColumnAndValues() Returns IEnumerable<KeyValuePair<ColumnDefinition, object?>> GetColumnAndValues(IEnumerable<ColumnDefinition>) IEnumerable<KeyValuePair<ColumnDefinition, object?>> GetColumnAndValues(IEnumerable<ColumnDefinition> columns) Parameters columns IEnumerable<ColumnDefinition> Returns IEnumerable<KeyValuePair<ColumnDefinition, object?>> GetValue(ColumnDefinition) object? GetValue(ColumnDefinition column) Parameters column ColumnDefinition Returns object? GetValues(IEnumerable<ColumnDefinition>) IEnumerable<object?> GetValues(IEnumerable<ColumnDefinition> columns) Parameters columns IEnumerable<ColumnDefinition> Returns IEnumerable<object?>"
  },
  "api/DataLinq.Instances.Immutable-2.html": {
    "href": "api/DataLinq.Instances.Immutable-2.html",
    "title": "Class Immutable<T, M> | DataLinq",
    "summary": "Class Immutable<T, M> Namespace DataLinq.Instances Assembly DataLinq.dll public abstract class Immutable<T, M> : IImmutable<T>, IImmutableInstance<M>, IImmutableInstance, IModelInstance<M>, IModelInstance, IModel, IEquatable<Immutable<T, M>> where T : IModel where M : class, IDatabaseModel Type Parameters T M Inheritance object Immutable<T, M> Implements IImmutable<T> IImmutableInstance<M> IImmutableInstance IModelInstance<M> IModelInstance IModel IEquatable<Immutable<T, M>> Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Extension Methods IModelExtensions.Delete<Immutable<T, M>>(Immutable<T, M>) IModelExtensions.Delete<Immutable<T, M>>(Immutable<T, M>, Transaction) Constructors Immutable(RowData, DataSourceAccess) protected Immutable(RowData rowData, DataSourceAccess dataSource) Parameters rowData RowData dataSource DataSourceAccess Fields lazyValues protected ConcurrentDictionary<string, object?>? lazyValues Field Value ConcurrentDictionary<string, object?>? relationKeys protected Dictionary<RelationProperty, IKey> relationKeys Field Value Dictionary<RelationProperty, IKey> Properties this[ColumnDefinition] public object? this[ColumnDefinition column] { get; } Property Value object? this[string] public object? this[string propertyName] { get; } Property Value object? Methods ClearLazy() public void ClearLazy() Equals(Immutable<T, M>?) Indicates whether the current object is equal to another object of the same type. public bool Equals(Immutable<T, M>? other) Parameters other Immutable<T, M>? An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object? The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetDataSource() public DataSourceAccess GetDataSource() Returns DataSourceAccess GetForeignKey<V>(string) protected V? GetForeignKey<V>(string propertyName) where V : IImmutableInstance Parameters propertyName string Returns V? Type Parameters V GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. GetImmutableForeignKey<V>(string) protected ImmutableForeignKey<V> GetImmutableForeignKey<V>(string propertyName) where V : IImmutableInstance Parameters propertyName string Returns ImmutableForeignKey<V> Type Parameters V GetImmutableRelation<V>(string) protected ImmutableRelation<V> GetImmutableRelation<V>(string propertyName) where V : IImmutableInstance Parameters propertyName string Returns ImmutableRelation<V> Type Parameters V GetLazy<V>(string, Func<V>) public V? GetLazy<V>(string name, Func<V> fetchCode) Parameters name string fetchCode Func<V> Returns V? Type Parameters V GetNullableValue(string) protected object? GetNullableValue(string propertyName) Parameters propertyName string Returns object? GetRelation<V>(string) protected IEnumerable<V> GetRelation<V>(string propertyName) where V : IImmutableInstance Parameters propertyName string Returns IEnumerable<V> Type Parameters V GetRelation<V>(RelationProperty) protected IEnumerable<V> GetRelation<V>(RelationProperty property) where V : IImmutableInstance Parameters property RelationProperty Returns IEnumerable<V> Type Parameters V GetRowData() public RowData GetRowData() Returns RowData GetValue(string) protected object GetValue(string propertyName) Parameters propertyName string Returns object GetValues() public IEnumerable<KeyValuePair<ColumnDefinition, object?>> GetValues() Returns IEnumerable<KeyValuePair<ColumnDefinition, object?>> GetValues(IEnumerable<ColumnDefinition>) public IEnumerable<KeyValuePair<ColumnDefinition, object?>> GetValues(IEnumerable<ColumnDefinition> columns) Parameters columns IEnumerable<ColumnDefinition> Returns IEnumerable<KeyValuePair<ColumnDefinition, object?>> HasPrimaryKeysSet() public bool HasPrimaryKeysSet() Returns bool Metadata() public ModelDefinition Metadata() Returns ModelDefinition PrimaryKeys() public IKey PrimaryKeys() Returns IKey"
  },
  "api/DataLinq.Instances.ImmutableRelation-1.html": {
    "href": "api/DataLinq.Instances.ImmutableRelation-1.html",
    "title": "Class ImmutableRelation<T> | DataLinq",
    "summary": "Class ImmutableRelation<T> Namespace DataLinq.Instances Assembly DataLinq.dll public class ImmutableRelation<T> : IImmutableRelation<T>, IEnumerable<T>, IEnumerable where T : IImmutableInstance Type Parameters T Inheritance object ImmutableRelation<T> Implements IImmutableRelation<T> IEnumerable<T> IEnumerable Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors ImmutableRelation(IKey, DataSourceAccess, RelationProperty) public ImmutableRelation(IKey foreignKey, DataSourceAccess dataSource, RelationProperty property) Parameters foreignKey IKey dataSource DataSourceAccess property RelationProperty Fields relationInstances protected FrozenDictionary<IKey, T>? relationInstances Field Value FrozenDictionary<IKey, T>? Properties Count public int Count { get; } Property Value int Keys public ImmutableArray<IKey> Keys { get; } Property Value ImmutableArray<IKey> Values public ImmutableArray<T> Values { get; } Property Value ImmutableArray<T> this[IKey] Indexer to get an instance by its primary key. Returns null if the key is not found. public T? this[IKey key] { get; } Property Value T? Methods AsEnumerable() public IEnumerable<KeyValuePair<IKey, T>> AsEnumerable() Returns IEnumerable<KeyValuePair<IKey, T>> Clear() public void Clear() ContainsKey(IKey) public bool ContainsKey(IKey key) Parameters key IKey Returns bool Get(IKey) A method that does the same as the indexer: returns the instance corresponding to the primary key, or null if not found. public T? Get(IKey key) Parameters key IKey Returns T? GetDataSource() protected DataSourceAccess GetDataSource() Returns DataSourceAccess GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> An enumerator that can be used to iterate through the collection. GetInstances() protected FrozenDictionary<IKey, T> GetInstances() Returns FrozenDictionary<IKey, T> GetRelation() protected IEnumerable<T> GetRelation() Returns IEnumerable<T> ToFrozenDictionary() public FrozenDictionary<IKey, T> ToFrozenDictionary() Returns FrozenDictionary<IKey, T>"
  },
  "api/DataLinq.Instances.ImmutableRelationMock-1.html": {
    "href": "api/DataLinq.Instances.ImmutableRelationMock-1.html",
    "title": "Class ImmutableRelationMock<T> | DataLinq",
    "summary": "Class ImmutableRelationMock<T> Namespace DataLinq.Instances Assembly DataLinq.dll public class ImmutableRelationMock<T> : IImmutableRelation<T>, IEnumerable<T>, IEnumerable where T : IModelInstance Type Parameters T Inheritance object ImmutableRelationMock<T> Implements IImmutableRelation<T> IEnumerable<T> IEnumerable Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors ImmutableRelationMock(IEnumerable<T>) public ImmutableRelationMock(IEnumerable<T> list) Parameters list IEnumerable<T> Properties Count public int Count { get; } Property Value int Keys public ImmutableArray<IKey> Keys { get; } Property Value ImmutableArray<IKey> Values public ImmutableArray<T> Values { get; } Property Value ImmutableArray<T> this[IKey] public T? this[IKey key] { get; } Property Value T? Methods AsEnumerable() public IEnumerable<KeyValuePair<IKey, T>> AsEnumerable() Returns IEnumerable<KeyValuePair<IKey, T>> Clear() public void Clear() ContainsKey(IKey) public bool ContainsKey(IKey key) Parameters key IKey Returns bool Get(IKey) public T? Get(IKey key) Parameters key IKey Returns T? GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> An enumerator that can be used to iterate through the collection. ToFrozenDictionary() public FrozenDictionary<IKey, T> ToFrozenDictionary() Returns FrozenDictionary<IKey, T>"
  },
  "api/DataLinq.Instances.InstanceFactory.html": {
    "href": "api/DataLinq.Instances.InstanceFactory.html",
    "title": "Class InstanceFactory | DataLinq",
    "summary": "Class InstanceFactory Namespace DataLinq.Instances Assembly DataLinq.dll public static class InstanceFactory Inheritance object InstanceFactory Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Methods NewDatabase<T>(DataSourceAccess) public static T NewDatabase<T>(DataSourceAccess dataSource) Parameters dataSource DataSourceAccess Returns T Type Parameters T NewImmutableRow(RowData, DataSourceAccess) public static IImmutableInstance NewImmutableRow(RowData rowData, DataSourceAccess dataSource) Parameters rowData RowData dataSource DataSourceAccess Returns IImmutableInstance NewImmutableRow<T>(RowData, DataSourceAccess) public static T NewImmutableRow<T>(RowData rowData, DataSourceAccess dataSource) Parameters rowData RowData dataSource DataSourceAccess Returns T Type Parameters T"
  },
  "api/DataLinq.Instances.Int64Key.html": {
    "href": "api/DataLinq.Instances.Int64Key.html",
    "title": "Struct Int64Key | DataLinq",
    "summary": "Struct Int64Key Namespace DataLinq.Instances Assembly DataLinq.dll public readonly record struct Int64Key : IKey, IEquatable<Int64Key> Implements IKey IEquatable<Int64Key> Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.ReferenceEquals(object?, object?) object.ToString() Constructors Int64Key(long) public Int64Key(long Value) Parameters Value long Properties Value public long Value { get; init; } Property Value long Values public object?[] Values { get; } Property Value object?[] Methods Equals(Int64Key) Indicates whether the current object is equal to another object of the same type. public bool Equals(Int64Key other) Parameters other Int64Key An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance."
  },
  "api/DataLinq.Instances.IntKey.html": {
    "href": "api/DataLinq.Instances.IntKey.html",
    "title": "Struct IntKey | DataLinq",
    "summary": "Struct IntKey Namespace DataLinq.Instances Assembly DataLinq.dll public readonly record struct IntKey : IKey, IEquatable<IntKey> Implements IKey IEquatable<IntKey> Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.ReferenceEquals(object?, object?) object.ToString() Constructors IntKey(int) public IntKey(int Value) Parameters Value int Properties Value public int Value { get; init; } Property Value int Values public object?[] Values { get; } Property Value object?[] Methods Equals(IntKey) Indicates whether the current object is equal to another object of the same type. public bool Equals(IntKey other) Parameters other IntKey An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance."
  },
  "api/DataLinq.Instances.KeyFactory.html": {
    "href": "api/DataLinq.Instances.KeyFactory.html",
    "title": "Class KeyFactory | DataLinq",
    "summary": "Class KeyFactory Namespace DataLinq.Instances Assembly DataLinq.dll public static class KeyFactory Inheritance object KeyFactory Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Methods CreateKeyFromValue<T>(T?) public static IKey CreateKeyFromValue<T>(T? value) Parameters value T? Returns IKey Type Parameters T CreateKeyFromValues(IEnumerable<object?>) public static IKey CreateKeyFromValues(IEnumerable<object?> values) Parameters values IEnumerable<object?> Returns IKey GetKey(IDataLinqDataReader, ColumnDefinition[]) public static IKey GetKey(IDataLinqDataReader reader, ColumnDefinition[] columns) Parameters reader IDataLinqDataReader columns ColumnDefinition[] Returns IKey GetKey(RowData, ColumnDefinition[]) public static IKey GetKey(RowData row, ColumnDefinition[] columns) Parameters row RowData columns ColumnDefinition[] Returns IKey GetKeys<T>(Select<T>, ColumnDefinition[]) public static IEnumerable<IKey> GetKeys<T>(Select<T> select, ColumnDefinition[] columns) Parameters select Select<T> columns ColumnDefinition[] Returns IEnumerable<IKey> Type Parameters T"
  },
  "api/DataLinq.Instances.Mutable-1.html": {
    "href": "api/DataLinq.Instances.Mutable-1.html",
    "title": "Class Mutable<T> | DataLinq",
    "summary": "Class Mutable<T> Namespace DataLinq.Instances Assembly DataLinq.dll public class Mutable<T> : IMutableInstance, IModelInstance, IModel where T : IImmutableInstance Type Parameters T Inheritance object Mutable<T> Implements IMutableInstance IModelInstance IModel Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Extension Methods IModelExtensions.Delete<Mutable<T>>(Mutable<T>, Transaction) IModelExtensions.Insert<T>(Mutable<T>, Transaction) IModelExtensions.Save<T>(Mutable<T>, Transaction) IModelExtensions.Update<T>(Mutable<T>, Transaction) Constructors Mutable() public Mutable() Mutable(T) public Mutable(T model) Parameters model T Mutable(RowData) public Mutable(RowData rowData) Parameters rowData RowData Fields lazyValues protected ConcurrentDictionary<string, object?>? lazyValues Field Value ConcurrentDictionary<string, object?>? Properties this[ColumnDefinition] public object? this[ColumnDefinition column] { get; set; } Property Value object? this[string] public object? this[string propertyName] { get; set; } Property Value object? Methods ClearLazy() public void ClearLazy() GetChanges() public IEnumerable<KeyValuePair<ColumnDefinition, object?>> GetChanges() Returns IEnumerable<KeyValuePair<ColumnDefinition, object?>> GetImmutableInstance() public T? GetImmutableInstance() Returns T? GetLazy<V>(string, Func<V>) public V? GetLazy<V>(string name, Func<V> fetchCode) Parameters name string fetchCode Func<V> Returns V? Type Parameters V GetRowData() public MutableRowData GetRowData() Returns MutableRowData GetValue(string) public object? GetValue(string propertyName) Parameters propertyName string Returns object? GetValues() public IEnumerable<KeyValuePair<ColumnDefinition, object?>> GetValues() Returns IEnumerable<KeyValuePair<ColumnDefinition, object?>> GetValues(IEnumerable<ColumnDefinition>) public IEnumerable<KeyValuePair<ColumnDefinition, object?>> GetValues(IEnumerable<ColumnDefinition> columns) Parameters columns IEnumerable<ColumnDefinition> Returns IEnumerable<KeyValuePair<ColumnDefinition, object?>> HasChanges() public bool HasChanges() Returns bool HasPrimaryKeysSet() public bool HasPrimaryKeysSet() Returns bool IsDeleted() public bool IsDeleted() Returns bool IsNew() public bool IsNew() Returns bool Metadata() public ModelDefinition Metadata() Returns ModelDefinition PrimaryKeys() public IKey PrimaryKeys() Returns IKey Reset() public void Reset() Reset(T) public void Reset(T model) Parameters model T Reset(RowData) public void Reset(RowData rowData) Parameters rowData RowData SetDeleted() public void SetDeleted() SetLazy<V>(string, V) public void SetLazy<V>(string name, V value) Parameters name string value V Type Parameters V SetValue<V>(string, V) public void SetValue<V>(string propertyName, V value) Parameters propertyName string value V Type Parameters V"
  },
  "api/DataLinq.Instances.MutableRowData.html": {
    "href": "api/DataLinq.Instances.MutableRowData.html",
    "title": "Class MutableRowData | DataLinq",
    "summary": "Class MutableRowData Namespace DataLinq.Instances Assembly DataLinq.dll public class MutableRowData : IRowData Inheritance object MutableRowData Implements IRowData Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors MutableRowData(TableDefinition) public MutableRowData(TableDefinition table) Parameters table TableDefinition MutableRowData(RowData) public MutableRowData(RowData immutableRowData) Parameters immutableRowData RowData Properties Table public TableDefinition Table { get; } Property Value TableDefinition this[ColumnDefinition] public object? this[ColumnDefinition column] { get; } Property Value object? Methods GetChanges() public IEnumerable<KeyValuePair<ColumnDefinition, object?>> GetChanges() Returns IEnumerable<KeyValuePair<ColumnDefinition, object?>> GetColumnAndValues() public IEnumerable<KeyValuePair<ColumnDefinition, object?>> GetColumnAndValues() Returns IEnumerable<KeyValuePair<ColumnDefinition, object?>> GetColumnAndValues(IEnumerable<ColumnDefinition>) public IEnumerable<KeyValuePair<ColumnDefinition, object?>> GetColumnAndValues(IEnumerable<ColumnDefinition> columns) Parameters columns IEnumerable<ColumnDefinition> Returns IEnumerable<KeyValuePair<ColumnDefinition, object?>> GetValue(ColumnDefinition) public object? GetValue(ColumnDefinition column) Parameters column ColumnDefinition Returns object? GetValues(IEnumerable<ColumnDefinition>) public IEnumerable<object?> GetValues(IEnumerable<ColumnDefinition> columns) Parameters columns IEnumerable<ColumnDefinition> Returns IEnumerable<object?> HasChanges() public bool HasChanges() Returns bool Reset() public void Reset() Reset(RowData) public void Reset(RowData immutableRowData) Parameters immutableRowData RowData SetValue(ColumnDefinition, object?) public void SetValue(ColumnDefinition column, object? value) Parameters column ColumnDefinition value object?"
  },
  "api/DataLinq.Instances.NullKey.html": {
    "href": "api/DataLinq.Instances.NullKey.html",
    "title": "Struct NullKey | DataLinq",
    "summary": "Struct NullKey Namespace DataLinq.Instances Assembly DataLinq.dll public readonly record struct NullKey : IKey, IEquatable<NullKey> Implements IKey IEquatable<NullKey> Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.ReferenceEquals(object?, object?) object.ToString() Constructors NullKey() public NullKey() Properties Values public object?[] Values { get; } Property Value object?[] Methods Equals(NullKey) Indicates whether the current object is equal to another object of the same type. public bool Equals(NullKey other) Parameters other NullKey An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance."
  },
  "api/DataLinq.Instances.ObjectKey.html": {
    "href": "api/DataLinq.Instances.ObjectKey.html",
    "title": "Struct ObjectKey | DataLinq",
    "summary": "Struct ObjectKey Namespace DataLinq.Instances Assembly DataLinq.dll public readonly record struct ObjectKey : IKey, IEquatable<ObjectKey> Implements IKey IEquatable<ObjectKey> Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.ReferenceEquals(object?, object?) object.ToString() Constructors ObjectKey(object) public ObjectKey(object Value) Parameters Value object Properties Value public object Value { get; init; } Property Value object Values public object?[] Values { get; } Property Value object?[] Methods Equals(ObjectKey) Indicates whether the current object is equal to another object of the same type. public bool Equals(ObjectKey other) Parameters other ObjectKey An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance."
  },
  "api/DataLinq.Instances.RowData.html": {
    "href": "api/DataLinq.Instances.RowData.html",
    "title": "Class RowData | DataLinq",
    "summary": "Class RowData Namespace DataLinq.Instances Assembly DataLinq.dll public class RowData : IRowData, IEquatable<RowData> Inheritance object RowData Implements IRowData IEquatable<RowData> Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors RowData(IDataLinqDataReader, TableDefinition, ReadOnlySpan<ColumnDefinition>) public RowData(IDataLinqDataReader reader, TableDefinition table, ReadOnlySpan<ColumnDefinition> columns) Parameters reader IDataLinqDataReader table TableDefinition columns ReadOnlySpan<ColumnDefinition> Properties Data protected Dictionary<ColumnDefinition, object?> Data { get; } Property Value Dictionary<ColumnDefinition, object?> Size public int Size { get; } Property Value int Table public TableDefinition Table { get; } Property Value TableDefinition this[ColumnDefinition] public object? this[ColumnDefinition column] { get; } Property Value object? Methods Equals(RowData?) Indicates whether the current object is equal to another object of the same type. public bool Equals(RowData? other) Parameters other RowData? An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object? The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetColumnAndValues() public IEnumerable<KeyValuePair<ColumnDefinition, object?>> GetColumnAndValues() Returns IEnumerable<KeyValuePair<ColumnDefinition, object?>> GetColumnAndValues(IEnumerable<ColumnDefinition>) public IEnumerable<KeyValuePair<ColumnDefinition, object?>> GetColumnAndValues(IEnumerable<ColumnDefinition> columns) Parameters columns IEnumerable<ColumnDefinition> Returns IEnumerable<KeyValuePair<ColumnDefinition, object?>> GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. GetValue(ColumnDefinition) public object? GetValue(ColumnDefinition column) Parameters column ColumnDefinition Returns object? GetValues(IEnumerable<ColumnDefinition>) public IEnumerable<object?> GetValues(IEnumerable<ColumnDefinition> columns) Parameters columns IEnumerable<ColumnDefinition> Returns IEnumerable<object?>"
  },
  "api/DataLinq.Instances.StringKey.html": {
    "href": "api/DataLinq.Instances.StringKey.html",
    "title": "Struct StringKey | DataLinq",
    "summary": "Struct StringKey Namespace DataLinq.Instances Assembly DataLinq.dll public readonly record struct StringKey : IKey, IEquatable<StringKey> Implements IKey IEquatable<StringKey> Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.ReferenceEquals(object?, object?) object.ToString() Constructors StringKey(string) public StringKey(string Value) Parameters Value string Properties Value public string Value { get; init; } Property Value string Values public object?[] Values { get; } Property Value object?[] Methods Equals(StringKey) Indicates whether the current object is equal to another object of the same type. public bool Equals(StringKey other) Parameters other StringKey An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance."
  },
  "api/DataLinq.Instances.UInt64Key.html": {
    "href": "api/DataLinq.Instances.UInt64Key.html",
    "title": "Struct UInt64Key | DataLinq",
    "summary": "Struct UInt64Key Namespace DataLinq.Instances Assembly DataLinq.dll public readonly record struct UInt64Key : IKey, IEquatable<UInt64Key> Implements IKey IEquatable<UInt64Key> Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.ReferenceEquals(object?, object?) object.ToString() Constructors UInt64Key(ulong) public UInt64Key(ulong Value) Parameters Value ulong Properties Value public ulong Value { get; init; } Property Value ulong Values public object?[] Values { get; } Property Value object?[] Methods Equals(UInt64Key) Indicates whether the current object is equal to another object of the same type. public bool Equals(UInt64Key other) Parameters other UInt64Key An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance."
  },
  "api/DataLinq.Instances.html": {
    "href": "api/DataLinq.Instances.html",
    "title": "Namespace DataLinq.Instances | DataLinq",
    "summary": "Namespace DataLinq.Instances Classes Immutable<T, M> ImmutableRelation<T> ImmutableRelationMock<T> InstanceFactory KeyFactory Mutable<T> MutableRowData RowData Structs CompositeKey GuidKey Int64Key IntKey NullKey ObjectKey StringKey UInt64Key Interfaces IImmutable<T> IImmutableInstance<T> IImmutableInstance IImmutableRelation<T> IKey IModelInstance IModelInstance<T> IMutableInstance<T> IMutableInstance IRowData"
  },
  "api/DataLinq.Interfaces.IDataSourceAccess.html": {
    "href": "api/DataLinq.Interfaces.IDataSourceAccess.html",
    "title": "Interface IDataSourceAccess | DataLinq",
    "summary": "Interface IDataSourceAccess Namespace DataLinq.Interfaces Assembly DataLinq.Core.dll public interface IDataSourceAccess"
  },
  "api/DataLinq.Interfaces.IDatabaseModel.html": {
    "href": "api/DataLinq.Interfaces.IDatabaseModel.html",
    "title": "Interface IDatabaseModel | DataLinq",
    "summary": "Interface IDatabaseModel Namespace DataLinq.Interfaces Assembly DataLinq.Core.dll public interface IDatabaseModel"
  },
  "api/DataLinq.Interfaces.IDatabaseProvider.html": {
    "href": "api/DataLinq.Interfaces.IDatabaseProvider.html",
    "title": "Interface IDatabaseProvider | DataLinq",
    "summary": "Interface IDatabaseProvider Namespace DataLinq.Interfaces Assembly DataLinq.dll public interface IDatabaseProvider : IDisposable Implements IDisposable Properties ConnectionString string ConnectionString { get; } Property Value string Constants IDatabaseProviderConstants Constants { get; } Property Value IDatabaseProviderConstants DatabaseAccess DatabaseAccess DatabaseAccess { get; } Property Value DatabaseAccess DatabaseName string DatabaseName { get; } Property Value string Metadata DatabaseDefinition Metadata { get; } Property Value DatabaseDefinition ReadOnlyAccess ReadOnlyAccess ReadOnlyAccess { get; } Property Value ReadOnlyAccess State State State { get; } Property Value State Methods AttachDatabaseTransaction(IDbTransaction, TransactionType) DatabaseTransaction AttachDatabaseTransaction(IDbTransaction dbTransaction, TransactionType type) Parameters dbTransaction IDbTransaction type TransactionType Returns DatabaseTransaction Commit<M>(Func<Transaction, M>) M Commit<M>(Func<Transaction, M> func) Parameters func Func<Transaction, M> Returns M Type Parameters M Commit(Action<Transaction>) void Commit(Action<Transaction> action) Parameters action Action<Transaction> DatabaseExists(string?) bool DatabaseExists(string? databaseName = null) Parameters databaseName string? Returns bool FileOrServerExists() bool FileOrServerExists() Returns bool GetLastIdQuery() string GetLastIdQuery() Returns string GetLimitOffset(Sql, int?, int?) Sql GetLimitOffset(Sql sql, int? limit, int? offset) Parameters sql Sql limit int? offset int? Returns Sql GetNewDatabaseTransaction(TransactionType) DatabaseTransaction GetNewDatabaseTransaction(TransactionType type) Parameters type TransactionType Returns DatabaseTransaction GetParameter(Sql, string, object?) Sql GetParameter(Sql sql, string key, object? value) Parameters sql Sql key string value object? Returns Sql GetParameterComparison(Sql, string, Relation, string[]) Sql GetParameterComparison(Sql sql, string field, Relation relation, string[] prefix) Parameters sql Sql field string relation Relation prefix string[] Returns Sql GetParameterValue(Sql, string) Sql GetParameterValue(Sql sql, string key) Parameters sql Sql key string Returns Sql GetTableCache(TableDefinition) TableCache GetTableCache(TableDefinition table) Parameters table TableDefinition Returns TableCache GetTableName(Sql, string, string?) Sql GetTableName(Sql sql, string tableName, string? alias = null) Parameters sql Sql tableName string alias string? Returns Sql GetWriter() IDataLinqDataWriter GetWriter() Returns IDataLinqDataWriter StartTransaction(TransactionType) Transaction StartTransaction(TransactionType transactionType = TransactionType.ReadAndWrite) Parameters transactionType TransactionType Returns Transaction ToDbCommand(IQuery) IDbCommand ToDbCommand(IQuery query) Parameters query IQuery Returns IDbCommand"
  },
  "api/DataLinq.Interfaces.IDatabaseProviderConstants.html": {
    "href": "api/DataLinq.Interfaces.IDatabaseProviderConstants.html",
    "title": "Interface IDatabaseProviderConstants | DataLinq",
    "summary": "Interface IDatabaseProviderConstants Namespace DataLinq.Interfaces Assembly DataLinq.dll public interface IDatabaseProviderConstants Properties EscapeCharacter string EscapeCharacter { get; } Property Value string LastInsertCommand string LastInsertCommand { get; } Property Value string ParameterSign string ParameterSign { get; } Property Value string SupportsMultipleDatabases bool SupportsMultipleDatabases { get; } Property Value bool"
  },
  "api/DataLinq.Interfaces.IDatabaseProviderRegister.html": {
    "href": "api/DataLinq.Interfaces.IDatabaseProviderRegister.html",
    "title": "Interface IDatabaseProviderRegister | DataLinq",
    "summary": "Interface IDatabaseProviderRegister Namespace DataLinq.Interfaces Assembly DataLinq.dll public interface IDatabaseProviderRegister Properties HasBeenRegistered public static bool HasBeenRegistered { get; } Property Value bool Methods RegisterProvider() public static void RegisterProvider()"
  },
  "api/DataLinq.Interfaces.IDefinition.html": {
    "href": "api/DataLinq.Interfaces.IDefinition.html",
    "title": "Interface IDefinition | DataLinq",
    "summary": "Interface IDefinition Namespace DataLinq.Interfaces Assembly DataLinq.Core.dll public interface IDefinition Properties CsFile CsFileDeclaration? CsFile { get; } Property Value CsFileDeclaration?"
  },
  "api/DataLinq.Interfaces.IModel-1.html": {
    "href": "api/DataLinq.Interfaces.IModel-1.html",
    "title": "Interface IModel<T> | DataLinq",
    "summary": "Interface IModel<T> Namespace DataLinq.Interfaces Assembly DataLinq.Core.dll public interface IModel<T> : IModel where T : IDatabaseModel Type Parameters T Implements IModel"
  },
  "api/DataLinq.Interfaces.IModel.html": {
    "href": "api/DataLinq.Interfaces.IModel.html",
    "title": "Interface IModel | DataLinq",
    "summary": "Interface IModel Namespace DataLinq.Interfaces Assembly DataLinq.Core.dll public interface IModel"
  },
  "api/DataLinq.Interfaces.IReadableView.html": {
    "href": "api/DataLinq.Interfaces.IReadableView.html",
    "title": "Interface IReadableView | DataLinq",
    "summary": "Interface IReadableView Namespace DataLinq.Interfaces Assembly DataLinq.Core.dll public interface IReadableView : IView Implements IView"
  },
  "api/DataLinq.Interfaces.ITableModel-1.html": {
    "href": "api/DataLinq.Interfaces.ITableModel-1.html",
    "title": "Interface ITableModel<T> | DataLinq",
    "summary": "Interface ITableModel<T> Namespace DataLinq.Interfaces Assembly DataLinq.Core.dll public interface ITableModel<T> : IModel<T>, IModel where T : IDatabaseModel Type Parameters T Implements IModel<T> IModel"
  },
  "api/DataLinq.Interfaces.ITableModel.html": {
    "href": "api/DataLinq.Interfaces.ITableModel.html",
    "title": "Interface ITableModel | DataLinq",
    "summary": "Interface ITableModel Namespace DataLinq.Interfaces Assembly DataLinq.Core.dll public interface ITableModel : IModel Implements IModel"
  },
  "api/DataLinq.Interfaces.IView.html": {
    "href": "api/DataLinq.Interfaces.IView.html",
    "title": "Interface IView | DataLinq",
    "summary": "Interface IView Namespace DataLinq.Interfaces Assembly DataLinq.Core.dll public interface IView"
  },
  "api/DataLinq.Interfaces.IViewModel-1.html": {
    "href": "api/DataLinq.Interfaces.IViewModel-1.html",
    "title": "Interface IViewModel<T> | DataLinq",
    "summary": "Interface IViewModel<T> Namespace DataLinq.Interfaces Assembly DataLinq.Core.dll public interface IViewModel<T> : IModel<T>, IModel where T : IDatabaseModel Type Parameters T Implements IModel<T> IModel"
  },
  "api/DataLinq.Interfaces.IViewModel.html": {
    "href": "api/DataLinq.Interfaces.IViewModel.html",
    "title": "Interface IViewModel | DataLinq",
    "summary": "Interface IViewModel Namespace DataLinq.Interfaces Assembly DataLinq.Core.dll public interface IViewModel : IModel Implements IModel"
  },
  "api/DataLinq.Interfaces.IWritableView.html": {
    "href": "api/DataLinq.Interfaces.IWritableView.html",
    "title": "Interface IWritableView | DataLinq",
    "summary": "Interface IWritableView Namespace DataLinq.Interfaces Assembly DataLinq.Core.dll public interface IWritableView : IView Implements IView"
  },
  "api/DataLinq.Interfaces.html": {
    "href": "api/DataLinq.Interfaces.html",
    "title": "Namespace DataLinq.Interfaces | DataLinq",
    "summary": "Namespace DataLinq.Interfaces Interfaces IDataSourceAccess IDatabaseModel IDatabaseProvider IDatabaseProviderConstants IDatabaseProviderRegister IDefinition IModel IModel<T> IReadableView ITableModel<T> ITableModel IView IViewModel<T> IViewModel IWritableView"
  },
  "api/DataLinq.Logging.DataLinqLogLevel.html": {
    "href": "api/DataLinq.Logging.DataLinqLogLevel.html",
    "title": "Enum DataLinqLogLevel | DataLinq",
    "summary": "Enum DataLinqLogLevel Namespace DataLinq.Logging Assembly DataLinq.dll public enum DataLinqLogLevel Fields Debug = 2 Error = 5 Fatal = 6 Info = 3 Trace = 1 Warn = 4"
  },
  "api/DataLinq.Logging.DataLinqLoggingConfiguration.html": {
    "href": "api/DataLinq.Logging.DataLinqLoggingConfiguration.html",
    "title": "Class DataLinqLoggingConfiguration | DataLinq",
    "summary": "Class DataLinqLoggingConfiguration Namespace DataLinq.Logging Assembly DataLinq.dll public sealed class DataLinqLoggingConfiguration Inheritance object DataLinqLoggingConfiguration Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.ReferenceEquals(object?, object?) object.ToString() Constructors DataLinqLoggingConfiguration(ILoggerFactory) public DataLinqLoggingConfiguration(ILoggerFactory loggerFactory) Parameters loggerFactory ILoggerFactory Properties CacheLogger public ILogger CacheLogger { get; } Property Value ILogger LoggerFactory public ILoggerFactory LoggerFactory { get; } Property Value ILoggerFactory NullConfiguration public static DataLinqLoggingConfiguration NullConfiguration { get; } Property Value DataLinqLoggingConfiguration SqlCommandLogger public ILogger SqlCommandLogger { get; } Property Value ILogger TransactionLogger public ILogger TransactionLogger { get; } Property Value ILogger"
  },
  "api/DataLinq.Logging.DbCommandExtensions.html": {
    "href": "api/DataLinq.Logging.DbCommandExtensions.html",
    "title": "Class DbCommandExtensions | DataLinq",
    "summary": "Class DbCommandExtensions Namespace DataLinq.Logging Assembly DataLinq.dll public static class DbCommandExtensions Inheritance object DbCommandExtensions Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Methods FormatCommand(IDbCommand) public static string FormatCommand(this IDbCommand command) Parameters command IDbCommand Returns string"
  },
  "api/DataLinq.Logging.Log.html": {
    "href": "api/DataLinq.Logging.Log.html",
    "title": "Class Log | DataLinq",
    "summary": "Class Log Namespace DataLinq.Logging Assembly DataLinq.dll public static class Log Inheritance object Log Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Methods IndexCachePreload(ILogger, ColumnIndex, int) [LoggerMessage(2000, LogLevel.Debug, \"Preloaded {rowsLoaded} keys to index cache: {index}\")] public static void IndexCachePreload(ILogger logger, ColumnIndex index, int rowsLoaded) Parameters logger ILogger index ColumnIndex rowsLoaded int LoadRowsFromCache(ILogger, TableDefinition, int) [LoggerMessage(2002, LogLevel.Debug, \"Fetched {rowsLoaded} rows from table cache: {table}\")] public static void LoadRowsFromCache(ILogger logger, TableDefinition table, int rowsLoaded) Parameters logger ILogger table TableDefinition rowsLoaded int LoadRowsFromDatabase(ILogger, TableDefinition, int) [LoggerMessage(2003, LogLevel.Debug, \"Fetched {rowsLoaded} rows from database and added to table cache: {table}\")] public static void LoadRowsFromDatabase(ILogger logger, TableDefinition table, int rowsLoaded) Parameters logger ILogger table TableDefinition rowsLoaded int RowCachePreload(ILogger, TableDefinition, int) [LoggerMessage(2001, LogLevel.Debug, \"Preloaded {rowsLoaded} rows to table cache: {table}\")] public static void RowCachePreload(ILogger logger, TableDefinition table, int rowsLoaded) Parameters logger ILogger table TableDefinition rowsLoaded int Sql(ILogger, string) [LoggerMessage(1000, LogLevel.Debug, \"{sql}\")] public static void Sql(ILogger logger, string sql) Parameters logger ILogger sql string SqlCommand(ILogger, IDbCommand) public static void SqlCommand(ILogger logger, IDbCommand command) Parameters logger ILogger command IDbCommand"
  },
  "api/DataLinq.Logging.html": {
    "href": "api/DataLinq.Logging.html",
    "title": "Namespace DataLinq.Logging | DataLinq",
    "summary": "Namespace DataLinq.Logging Classes DataLinqLoggingConfiguration DbCommandExtensions Log Enums DataLinqLogLevel"
  },
  "api/DataLinq.Metadata.ColumnDefinition.html": {
    "href": "api/DataLinq.Metadata.ColumnDefinition.html",
    "title": "Class ColumnDefinition | DataLinq",
    "summary": "Class ColumnDefinition Namespace DataLinq.Metadata Assembly DataLinq.Core.dll public class ColumnDefinition : IDefinition Inheritance object ColumnDefinition Implements IDefinition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ColumnDefinition(string, TableDefinition) public ColumnDefinition(string dbName, TableDefinition table) Parameters dbName string table TableDefinition Properties AutoIncrement public bool AutoIncrement { get; } Property Value bool ColumnIndices public IEnumerable<ColumnIndex> ColumnIndices { get; } Property Value IEnumerable<ColumnIndex> CsFile public CsFileDeclaration? CsFile { get; } Property Value CsFileDeclaration? DbName public string DbName { get; } Property Value string DbTypes public DatabaseColumnType[] DbTypes { get; } Property Value DatabaseColumnType[] ForeignKey public bool ForeignKey { get; } Property Value bool Index public int Index { get; } Property Value int Nullable public bool Nullable { get; } Property Value bool PrimaryKey public bool PrimaryKey { get; } Property Value bool Table public TableDefinition Table { get; } Property Value TableDefinition Unique public bool Unique { get; } Property Value bool ValueProperty public ValueProperty ValueProperty { get; } Property Value ValueProperty Methods AddDbType(DatabaseColumnType) public void AddDbType(DatabaseColumnType columnType) Parameters columnType DatabaseColumnType GetDbTypeFor(DatabaseType) public DatabaseColumnType? GetDbTypeFor(DatabaseType databaseType) Parameters databaseType DatabaseType Returns DatabaseColumnType? SetAutoIncrement(bool) public void SetAutoIncrement(bool value = true) Parameters value bool SetDbName(string) public void SetDbName(string value) Parameters value string SetForeignKey(bool) public void SetForeignKey(bool value = true) Parameters value bool SetNullable(bool) public void SetNullable(bool value = true) Parameters value bool SetPrimaryKey(bool) public void SetPrimaryKey(bool value = true) Parameters value bool SetValueProperty(ValueProperty) public void SetValueProperty(ValueProperty value) Parameters value ValueProperty ToString() public override string ToString() Returns string"
  },
  "api/DataLinq.Metadata.ColumnIndex.html": {
    "href": "api/DataLinq.Metadata.ColumnIndex.html",
    "title": "Class ColumnIndex | DataLinq",
    "summary": "Class ColumnIndex Namespace DataLinq.Metadata Assembly DataLinq.Core.dll Represents an index associated with one or more columns in a database table. public class ColumnIndex Inheritance object ColumnIndex Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ColumnIndex(string, IndexCharacteristic, IndexType, List<ColumnDefinition>) Initializes a new instance of the DataLinq.Metadata.ColumnIndex class. public ColumnIndex(string name, IndexCharacteristic characteristic, IndexType type, List<ColumnDefinition> columns) Parameters name string The name of the index. characteristic IndexCharacteristic The characteristic of the index. type IndexType The type of the index. columns List<ColumnDefinition> The columns associated with the index. Properties Characteristic Gets or sets the characteristic of the index, such as whether it's a primary key or unique. public IndexCharacteristic Characteristic { get; } Property Value IndexCharacteristic Columns Gets or sets the list of columns associated with the index. Each entry includes the column in the order of the index. public List<ColumnDefinition> Columns { get; } Property Value List<ColumnDefinition> Name Gets or sets the name of the index. public string Name { get; } Property Value string RelationParts public List<RelationPart> RelationParts { get; set; } Property Value List<RelationPart> Table Table that the index belongs to. public TableDefinition Table { get; set; } Property Value TableDefinition Type Gets or sets the type of the index, indicating the underlying data structure or algorithm used. public IndexType Type { get; } Property Value IndexType Methods AddColumn(ColumnDefinition) public void AddColumn(ColumnDefinition column) Parameters column ColumnDefinition ToString() Provides a string representation of the DataLinq.Metadata.ColumnIndex object. public override string ToString() Returns string A string representation of the index."
  },
  "api/DataLinq.Metadata.CsFileDeclaration.html": {
    "href": "api/DataLinq.Metadata.CsFileDeclaration.html",
    "title": "Struct CsFileDeclaration | DataLinq",
    "summary": "Struct CsFileDeclaration Namespace DataLinq.Metadata Assembly DataLinq.Core.dll public readonly record struct CsFileDeclaration : IEquatable<CsFileDeclaration> Implements IEquatable<CsFileDeclaration> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors CsFileDeclaration(string) public CsFileDeclaration(string fullPath) Parameters fullPath string Properties FullPath public string FullPath { get; } Property Value string Name public string Name { get; } Property Value string Methods ToString() public override string ToString() Returns string"
  },
  "api/DataLinq.Metadata.CsTypeDeclaration.html": {
    "href": "api/DataLinq.Metadata.CsTypeDeclaration.html",
    "title": "Struct CsTypeDeclaration | DataLinq",
    "summary": "Struct CsTypeDeclaration Namespace DataLinq.Metadata Assembly DataLinq.Core.dll public readonly record struct CsTypeDeclaration : IEquatable<CsTypeDeclaration> Implements IEquatable<CsTypeDeclaration> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors CsTypeDeclaration(Type) public CsTypeDeclaration(Type type) Parameters type Type CsTypeDeclaration(TypeDeclarationSyntax) public CsTypeDeclaration(TypeDeclarationSyntax typeSyntax) Parameters typeSyntax TypeDeclarationSyntax CsTypeDeclaration(PropertyDeclarationSyntax) public CsTypeDeclaration(PropertyDeclarationSyntax propertyDeclarationSyntax) Parameters propertyDeclarationSyntax PropertyDeclarationSyntax CsTypeDeclaration(BaseTypeSyntax) public CsTypeDeclaration(BaseTypeSyntax baseTypeSyntax) Parameters baseTypeSyntax BaseTypeSyntax CsTypeDeclaration(string, string, ModelCsType) public CsTypeDeclaration(string name, string @namespace, ModelCsType modelCsType) Parameters name string namespace string modelCsType ModelCsType Properties ModelCsType public ModelCsType ModelCsType { get; } Property Value ModelCsType Name public string Name { get; } Property Value string Namespace public string Namespace { get; } Property Value string Type public Type? Type { get; } Property Value Type? Methods GetNamespace(SyntaxNode) public static string GetNamespace(SyntaxNode typeSyntax) Parameters typeSyntax SyntaxNode Returns string MutateName(string) public CsTypeDeclaration MutateName(string name) Parameters name string Returns CsTypeDeclaration ParseModelCsType(Type) public static ModelCsType ParseModelCsType(Type type) Parameters type Type Returns ModelCsType ParseModelCsType(SyntaxNode) public static ModelCsType ParseModelCsType(SyntaxNode syntaxNode) Parameters syntaxNode SyntaxNode Returns ModelCsType ParseModelCsType(TypeSyntax) public static ModelCsType ParseModelCsType(TypeSyntax typeSyntax) Parameters typeSyntax TypeSyntax Returns ModelCsType"
  },
  "api/DataLinq.Metadata.DatabaseColumnType.html": {
    "href": "api/DataLinq.Metadata.DatabaseColumnType.html",
    "title": "Class DatabaseColumnType | DataLinq",
    "summary": "Class DatabaseColumnType Namespace DataLinq.Metadata Assembly DataLinq.Core.dll public class DatabaseColumnType Inheritance object DatabaseColumnType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DatabaseColumnType(DatabaseType, string, long?, int?, bool?) public DatabaseColumnType(DatabaseType databaseType, string name, long? length = null, int? decimals = null, bool? signed = null) Parameters databaseType DatabaseType name string length long? decimals int? signed bool? Properties DatabaseType public DatabaseType DatabaseType { get; } Property Value DatabaseType Decimals public int? Decimals { get; } Property Value int? Length public long? Length { get; } Property Value long? Name public string Name { get; } Property Value string Signed public bool? Signed { get; } Property Value bool? Methods Clone() public DatabaseColumnType Clone() Returns DatabaseColumnType SetDecimals(int?) public void SetDecimals(int? decimals) Parameters decimals int? SetDecimals(long?) public void SetDecimals(long? decimals) Parameters decimals long? SetLength(long?) public void SetLength(long? length) Parameters length long? SetName(string) public void SetName(string name) Parameters name string SetSigned(bool) public void SetSigned(bool signed) Parameters signed bool ToString() public override string ToString() Returns string"
  },
  "api/DataLinq.Metadata.DatabaseDefinition.html": {
    "href": "api/DataLinq.Metadata.DatabaseDefinition.html",
    "title": "Class DatabaseDefinition | DataLinq",
    "summary": "Class DatabaseDefinition Namespace DataLinq.Metadata Assembly DataLinq.Core.dll public class DatabaseDefinition : IDefinition Inheritance object DatabaseDefinition Implements IDefinition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods MetadataFactory.ParseAttributes(DatabaseDefinition) Constructors DatabaseDefinition(string, CsTypeDeclaration, string?) public DatabaseDefinition(string name, CsTypeDeclaration csType, string? dbName = null) Parameters name string csType CsTypeDeclaration dbName string? Properties Attributes public Attribute[] Attributes { get; } Property Value Attribute[] CacheCleanup public List<(CacheCleanupType cleanupType, long amount)> CacheCleanup { get; } Property Value List<(CacheCleanupType cleanupType, long amount)> CacheLimits public List<(CacheLimitType limitType, long amount)> CacheLimits { get; } Property Value List<(CacheLimitType limitType, long amount)> CsFile public CsFileDeclaration? CsFile { get; } Property Value CsFileDeclaration? CsType public CsTypeDeclaration CsType { get; } Property Value CsTypeDeclaration DbName public string DbName { get; } Property Value string IndexCache public List<(IndexCacheType indexCacheType, int? amount)> IndexCache { get; } Property Value List<(IndexCacheType indexCacheType, int? amount)> LoadedDatabases public static ConcurrentDictionary<Type, DatabaseDefinition> LoadedDatabases { get; } Property Value ConcurrentDictionary<Type, DatabaseDefinition> Name public string Name { get; } Property Value string TableModels public TableModel[] TableModels { get; } Property Value TableModel[] UseCache public bool UseCache { get; } Property Value bool Methods SetAttributes(IEnumerable<Attribute>) public void SetAttributes(IEnumerable<Attribute> attributes) Parameters attributes IEnumerable<Attribute> SetCache(bool) public void SetCache(bool useCache) Parameters useCache bool SetCsFile(CsFileDeclaration) public void SetCsFile(CsFileDeclaration csFile) Parameters csFile CsFileDeclaration SetCsType(CsTypeDeclaration) public void SetCsType(CsTypeDeclaration csType) Parameters csType CsTypeDeclaration SetDbName(string) public void SetDbName(string dbName) Parameters dbName string SetName(string) public void SetName(string name) Parameters name string SetTableModels(IEnumerable<TableModel>) public void SetTableModels(IEnumerable<TableModel> tableModels) Parameters tableModels IEnumerable<TableModel>"
  },
  "api/DataLinq.Metadata.EnumProperty.html": {
    "href": "api/DataLinq.Metadata.EnumProperty.html",
    "title": "Struct EnumProperty | DataLinq",
    "summary": "Struct EnumProperty Namespace DataLinq.Metadata Assembly DataLinq.Core.dll public record struct EnumProperty : IEquatable<EnumProperty> Implements IEquatable<EnumProperty> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors EnumProperty(List<(string name, int value)>?, List<(string name, int value)>?, bool) public EnumProperty(List<(string name, int value)>? enumValues = null, List<(string name, int value)>? csEnumValues = null, bool declaredInClass = true) Parameters enumValues List<(string name, int value)>? csEnumValues List<(string name, int value)>? declaredInClass bool Properties CsEnumValues public readonly List<(string name, int value)> CsEnumValues { get; } Property Value List<(string name, int value)> DbEnumValues public readonly List<(string name, int value)> DbEnumValues { get; } Property Value List<(string name, int value)> DeclaredInClass public readonly bool DeclaredInClass { get; } Property Value bool EnumValues public List<(string name, int value)> EnumValues { get; } Property Value List<(string name, int value)>"
  },
  "api/DataLinq.Metadata.GeneratorFileFactory.html": {
    "href": "api/DataLinq.Metadata.GeneratorFileFactory.html",
    "title": "Class GeneratorFileFactory | DataLinq",
    "summary": "Class GeneratorFileFactory Namespace DataLinq.Metadata Assembly DataLinq.Core.dll public class GeneratorFileFactory Inheritance object GeneratorFileFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GeneratorFileFactory(GeneratorFileFactoryOptions) public GeneratorFileFactory(GeneratorFileFactoryOptions options) Parameters options GeneratorFileFactoryOptions Properties Options public GeneratorFileFactoryOptions Options { get; } Property Value GeneratorFileFactoryOptions Methods CreateModelFiles(DatabaseDefinition) public IEnumerable<(string path, string contents)> CreateModelFiles(DatabaseDefinition database) Parameters database DatabaseDefinition Returns IEnumerable<(string path, string contents)>"
  },
  "api/DataLinq.Metadata.GeneratorFileFactoryOptions.html": {
    "href": "api/DataLinq.Metadata.GeneratorFileFactoryOptions.html",
    "title": "Class GeneratorFileFactoryOptions | DataLinq",
    "summary": "Class GeneratorFileFactoryOptions Namespace DataLinq.Metadata Assembly DataLinq.Core.dll public class GeneratorFileFactoryOptions Inheritance object GeneratorFileFactoryOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties NamespaceName public string? NamespaceName { get; set; } Property Value string? SeparateTablesAndViews public bool SeparateTablesAndViews { get; set; } Property Value bool Tab public string Tab { get; set; } Property Value string UseFileScopedNamespaces public bool UseFileScopedNamespaces { get; set; } Property Value bool UseNullableReferenceTypes public bool UseNullableReferenceTypes { get; set; } Property Value bool UseRecords public bool UseRecords { get; set; } Property Value bool Usings public List<string> Usings { get; set; } Property Value List<string>"
  },
  "api/DataLinq.Metadata.IDatabaseProviderCreator.html": {
    "href": "api/DataLinq.Metadata.IDatabaseProviderCreator.html",
    "title": "Interface IDatabaseProviderCreator | DataLinq",
    "summary": "Interface IDatabaseProviderCreator Namespace DataLinq.Metadata Assembly DataLinq.dll public interface IDatabaseProviderCreator Methods GetDatabaseProvider<T>(string, string) Database<T> GetDatabaseProvider<T>(string connectionString, string databaseName) where T : class, IDatabaseModel Parameters connectionString string databaseName string Returns Database<T> Type Parameters T IsDatabaseType(string) bool IsDatabaseType(string typeName) Parameters typeName string Returns bool UseLoggerFactory(ILoggerFactory?) IDatabaseProviderCreator UseLoggerFactory(ILoggerFactory? loggerFactory) Parameters loggerFactory ILoggerFactory? Returns IDatabaseProviderCreator"
  },
  "api/DataLinq.Metadata.IMetadataFromDatabaseFactoryCreator.html": {
    "href": "api/DataLinq.Metadata.IMetadataFromDatabaseFactoryCreator.html",
    "title": "Interface IMetadataFromDatabaseFactoryCreator | DataLinq",
    "summary": "Interface IMetadataFromDatabaseFactoryCreator Namespace DataLinq.Metadata Assembly DataLinq.dll public interface IMetadataFromDatabaseFactoryCreator Methods GetMetadataFromSqlFactory(MetadataFromDatabaseFactoryOptions) IMetadataFromSqlFactory GetMetadataFromSqlFactory(MetadataFromDatabaseFactoryOptions options) Parameters options MetadataFromDatabaseFactoryOptions Returns IMetadataFromSqlFactory"
  },
  "api/DataLinq.Metadata.IMetadataFromSqlFactory.html": {
    "href": "api/DataLinq.Metadata.IMetadataFromSqlFactory.html",
    "title": "Interface IMetadataFromSqlFactory | DataLinq",
    "summary": "Interface IMetadataFromSqlFactory Namespace DataLinq.Metadata Assembly DataLinq.dll public interface IMetadataFromSqlFactory Methods ParseDatabase(string, string, string, string, string) Option<DatabaseDefinition> ParseDatabase(string name, string csTypeName, string csNamespace, string dbName, string connectionString) Parameters name string csTypeName string csNamespace string dbName string connectionString string Returns Option<DatabaseDefinition>"
  },
  "api/DataLinq.Metadata.ISqlFromMetadataFactory.html": {
    "href": "api/DataLinq.Metadata.ISqlFromMetadataFactory.html",
    "title": "Interface ISqlFromMetadataFactory | DataLinq",
    "summary": "Interface ISqlFromMetadataFactory Namespace DataLinq.Metadata Assembly DataLinq.dll public interface ISqlFromMetadataFactory Methods CreateDatabase(Sql, string, string, bool) Option<int, IDLOptionFailure> CreateDatabase(Sql sql, string databaseName, string connectionString, bool foreignKeyRestrict) Parameters sql Sql databaseName string connectionString string foreignKeyRestrict bool Returns Option<int, IDLOptionFailure> GetCreateTables(DatabaseDefinition, bool) Option<Sql, IDLOptionFailure> GetCreateTables(DatabaseDefinition metadata, bool foreignKeyRestrict) Parameters metadata DatabaseDefinition foreignKeyRestrict bool Returns Option<Sql, IDLOptionFailure>"
  },
  "api/DataLinq.Metadata.MetadataFromTypeFactory.html": {
    "href": "api/DataLinq.Metadata.MetadataFromTypeFactory.html",
    "title": "Class MetadataFromTypeFactory | DataLinq",
    "summary": "Class MetadataFromTypeFactory Namespace DataLinq.Metadata Assembly DataLinq.dll public static class MetadataFromTypeFactory Inheritance object MetadataFromTypeFactory Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Methods ParseDatabaseFromDatabaseModel(Type) public static DatabaseDefinition ParseDatabaseFromDatabaseModel(Type type) Parameters type Type Returns DatabaseDefinition"
  },
  "api/DataLinq.Metadata.ModelCsType.html": {
    "href": "api/DataLinq.Metadata.ModelCsType.html",
    "title": "Enum ModelCsType | DataLinq",
    "summary": "Enum ModelCsType Namespace DataLinq.Metadata Assembly DataLinq.Core.dll public enum ModelCsType Fields Class = 0 Enum = 5 Interface = 2 Pointer = 7 Primitive = 4 Record = 1 Struct = 3 Tuple = 6"
  },
  "api/DataLinq.Metadata.ModelDefinition.html": {
    "href": "api/DataLinq.Metadata.ModelDefinition.html",
    "title": "Class ModelDefinition | DataLinq",
    "summary": "Class ModelDefinition Namespace DataLinq.Metadata Assembly DataLinq.Core.dll public class ModelDefinition : IDefinition Inheritance object ModelDefinition Implements IDefinition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ModelDefinition(CsTypeDeclaration) public ModelDefinition(CsTypeDeclaration csType) Parameters csType CsTypeDeclaration Properties Attributes public Attribute[] Attributes { get; } Property Value Attribute[] CsFile public CsFileDeclaration? CsFile { get; } Property Value CsFileDeclaration? CsType public CsTypeDeclaration CsType { get; } Property Value CsTypeDeclaration CsTypeOrInterface public CsTypeDeclaration CsTypeOrInterface { get; } Property Value CsTypeDeclaration Database public DatabaseDefinition Database { get; } Property Value DatabaseDefinition ImmutableType public CsTypeDeclaration? ImmutableType { get; } Property Value CsTypeDeclaration? ModelInstanceInterface public CsTypeDeclaration? ModelInstanceInterface { get; } Property Value CsTypeDeclaration? MutableType public CsTypeDeclaration? MutableType { get; } Property Value CsTypeDeclaration? OriginalInterfaces public CsTypeDeclaration[] OriginalInterfaces { get; } Property Value CsTypeDeclaration[] RelationProperties public Dictionary<string, RelationProperty> RelationProperties { get; } Property Value Dictionary<string, RelationProperty> Table public TableDefinition Table { get; } Property Value TableDefinition TableModel public TableModel TableModel { get; } Property Value TableModel Usings public ModelUsing[] Usings { get; } Property Value ModelUsing[] ValueProperties public Dictionary<string, ValueProperty> ValueProperties { get; } Property Value Dictionary<string, ValueProperty> Methods AddProperties(IEnumerable<PropertyDefinition>) public void AddProperties(IEnumerable<PropertyDefinition> properties) Parameters properties IEnumerable<PropertyDefinition> AddProperty(PropertyDefinition) public void AddProperty(PropertyDefinition property) Parameters property PropertyDefinition Find(IModel) public static ModelDefinition? Find(IModel model) Parameters model IModel Returns ModelDefinition? Find<T>() public static ModelDefinition? Find<T>() where T : IModel Returns ModelDefinition? Type Parameters T IsOfType(Type) protected bool IsOfType(Type modelType) Parameters modelType Type Returns bool SetAttributes(IEnumerable<Attribute>) public void SetAttributes(IEnumerable<Attribute> attributes) Parameters attributes IEnumerable<Attribute> SetCsFile(CsFileDeclaration) public void SetCsFile(CsFileDeclaration csFile) Parameters csFile CsFileDeclaration SetCsType(CsTypeDeclaration) public void SetCsType(CsTypeDeclaration csType) Parameters csType CsTypeDeclaration SetImmutableType(CsTypeDeclaration) public void SetImmutableType(CsTypeDeclaration immutableType) Parameters immutableType CsTypeDeclaration SetInterfaces(IEnumerable<CsTypeDeclaration>) public void SetInterfaces(IEnumerable<CsTypeDeclaration> interfaces) Parameters interfaces IEnumerable<CsTypeDeclaration> SetModelInstanceInterface(CsTypeDeclaration?) public void SetModelInstanceInterface(CsTypeDeclaration? interfaceType) Parameters interfaceType CsTypeDeclaration? SetMutableType(CsTypeDeclaration) public void SetMutableType(CsTypeDeclaration mutableType) Parameters mutableType CsTypeDeclaration SetUsings(IEnumerable<ModelUsing>) public void SetUsings(IEnumerable<ModelUsing> usings) Parameters usings IEnumerable<ModelUsing> ToString() public override string ToString() Returns string"
  },
  "api/DataLinq.Metadata.ModelUsing.html": {
    "href": "api/DataLinq.Metadata.ModelUsing.html",
    "title": "Class ModelUsing | DataLinq",
    "summary": "Class ModelUsing Namespace DataLinq.Metadata Assembly DataLinq.Core.dll public class ModelUsing Inheritance object ModelUsing Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ModelUsing(string) public ModelUsing(string fullNamespaceName) Parameters fullNamespaceName string Properties FullNamespaceName public string FullNamespaceName { get; } Property Value string Methods ToString() public override string ToString() Returns string"
  },
  "api/DataLinq.Metadata.PluginHook.html": {
    "href": "api/DataLinq.Metadata.PluginHook.html",
    "title": "Class PluginHook | DataLinq",
    "summary": "Class PluginHook Namespace DataLinq.Metadata Assembly DataLinq.dll public static class PluginHook Inheritance object PluginHook Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Fields DatabaseProviders public static Dictionary<DatabaseType, IDatabaseProviderCreator> DatabaseProviders Field Value Dictionary<DatabaseType, IDatabaseProviderCreator> MetadataFromSqlFactories public static Dictionary<DatabaseType, IMetadataFromDatabaseFactoryCreator> MetadataFromSqlFactories Field Value Dictionary<DatabaseType, IMetadataFromDatabaseFactoryCreator> SqlFromMetadataFactories public static Dictionary<DatabaseType, ISqlFromMetadataFactory> SqlFromMetadataFactories Field Value Dictionary<DatabaseType, ISqlFromMetadataFactory> Methods CreateDatabaseFromMetadata(DatabaseType, DatabaseDefinition, string, string, bool) public static Option<int, IDLOptionFailure> CreateDatabaseFromMetadata(this DatabaseType type, DatabaseDefinition metadata, string databaseNameOrFile, string connectionString, bool foreignKeyRestrict) Parameters type DatabaseType metadata DatabaseDefinition databaseNameOrFile string connectionString string foreignKeyRestrict bool Returns Option<int, IDLOptionFailure> CreateDatabaseFromSql(DatabaseType, Sql, string, string, bool) public static Option<int, IDLOptionFailure> CreateDatabaseFromSql(this DatabaseType type, Sql sql, string databaseOrFile, string connectionString, bool foreignKeyRestrict) Parameters type DatabaseType sql Sql databaseOrFile string connectionString string foreignKeyRestrict bool Returns Option<int, IDLOptionFailure> GenerateSql(DatabaseType, DatabaseDefinition, bool) public static Option<Sql, IDLOptionFailure> GenerateSql(this DatabaseType type, DatabaseDefinition metadata, bool foreignKeyRestrict) Parameters type DatabaseType metadata DatabaseDefinition foreignKeyRestrict bool Returns Option<Sql, IDLOptionFailure>"
  },
  "api/DataLinq.Metadata.PropertyDefinition.html": {
    "href": "api/DataLinq.Metadata.PropertyDefinition.html",
    "title": "Class PropertyDefinition | DataLinq",
    "summary": "Class PropertyDefinition Namespace DataLinq.Metadata Assembly DataLinq.Core.dll public abstract class PropertyDefinition : IDefinition Inheritance object PropertyDefinition Derived RelationProperty ValueProperty Implements IDefinition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PropertyDefinition(string, CsTypeDeclaration, ModelDefinition, IEnumerable<Attribute>) protected PropertyDefinition(string propertyName, CsTypeDeclaration csType, ModelDefinition model, IEnumerable<Attribute> attributes) Parameters propertyName string csType CsTypeDeclaration model ModelDefinition attributes IEnumerable<Attribute> Properties Attributes public Attribute[] Attributes { get; } Property Value Attribute[] CsFile public CsFileDeclaration? CsFile { get; } Property Value CsFileDeclaration? CsType public CsTypeDeclaration CsType { get; } Property Value CsTypeDeclaration Model public ModelDefinition Model { get; } Property Value ModelDefinition PropertyName public string PropertyName { get; } Property Value string Type public PropertyType Type { get; } Property Value PropertyType Methods AddAttribute(Attribute) public void AddAttribute(Attribute attribute) Parameters attribute Attribute SetAttributes(IEnumerable<Attribute>) public void SetAttributes(IEnumerable<Attribute> attributes) Parameters attributes IEnumerable<Attribute> SetCsType(CsTypeDeclaration) public void SetCsType(CsTypeDeclaration csType) Parameters csType CsTypeDeclaration SetPropertyName(string) public void SetPropertyName(string propertyName) Parameters propertyName string ToString() public override string ToString() Returns string"
  },
  "api/DataLinq.Metadata.PropertyType.html": {
    "href": "api/DataLinq.Metadata.PropertyType.html",
    "title": "Enum PropertyType | DataLinq",
    "summary": "Enum PropertyType Namespace DataLinq.Metadata Assembly DataLinq.Core.dll public enum PropertyType Fields Relation = 1 Value = 0"
  },
  "api/DataLinq.Metadata.RelationDefinition.html": {
    "href": "api/DataLinq.Metadata.RelationDefinition.html",
    "title": "Class RelationDefinition | DataLinq",
    "summary": "Class RelationDefinition Namespace DataLinq.Metadata Assembly DataLinq.Core.dll public class RelationDefinition Inheritance object RelationDefinition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CandidateKey public RelationPart CandidateKey { get; set; } Property Value RelationPart ConstraintName public string ConstraintName { get; set; } Property Value string ForeignKey public RelationPart ForeignKey { get; set; } Property Value RelationPart Type public RelationType Type { get; set; } Property Value RelationType Methods ToString() public override string ToString() Returns string"
  },
  "api/DataLinq.Metadata.RelationPart.html": {
    "href": "api/DataLinq.Metadata.RelationPart.html",
    "title": "Class RelationPart | DataLinq",
    "summary": "Class RelationPart Namespace DataLinq.Metadata Assembly DataLinq.Core.dll public class RelationPart Inheritance object RelationPart Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ColumnIndex public ColumnIndex ColumnIndex { get; set; } Property Value ColumnIndex CsName public string CsName { get; set; } Property Value string Relation public RelationDefinition Relation { get; set; } Property Value RelationDefinition Type public RelationPartType Type { get; set; } Property Value RelationPartType Methods GetOtherSide() public RelationPart GetOtherSide() Returns RelationPart ToString() public override string ToString() Returns string"
  },
  "api/DataLinq.Metadata.RelationPartType.html": {
    "href": "api/DataLinq.Metadata.RelationPartType.html",
    "title": "Enum RelationPartType | DataLinq",
    "summary": "Enum RelationPartType Namespace DataLinq.Metadata Assembly DataLinq.Core.dll public enum RelationPartType Fields CandidateKey = 1 ForeignKey = 0"
  },
  "api/DataLinq.Metadata.RelationProperty.html": {
    "href": "api/DataLinq.Metadata.RelationProperty.html",
    "title": "Class RelationProperty | DataLinq",
    "summary": "Class RelationProperty Namespace DataLinq.Metadata Assembly DataLinq.Core.dll public class RelationProperty : PropertyDefinition, IDefinition Inheritance object PropertyDefinition RelationProperty Implements IDefinition Inherited Members PropertyDefinition.Attributes PropertyDefinition.SetAttributes(IEnumerable<Attribute>) PropertyDefinition.AddAttribute(Attribute) PropertyDefinition.PropertyName PropertyDefinition.SetPropertyName(string) PropertyDefinition.CsType PropertyDefinition.SetCsType(CsTypeDeclaration) PropertyDefinition.Model PropertyDefinition.Type PropertyDefinition.CsFile PropertyDefinition.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RelationProperty(string, CsTypeDeclaration, ModelDefinition, IEnumerable<Attribute>) public RelationProperty(string propertyName, CsTypeDeclaration csType, ModelDefinition model, IEnumerable<Attribute> attributes) Parameters propertyName string csType CsTypeDeclaration model ModelDefinition attributes IEnumerable<Attribute> Properties RelationName public string RelationName { get; set; } Property Value string RelationPart public RelationPart RelationPart { get; set; } Property Value RelationPart"
  },
  "api/DataLinq.Metadata.RelationType.html": {
    "href": "api/DataLinq.Metadata.RelationType.html",
    "title": "Enum RelationType | DataLinq",
    "summary": "Enum RelationType Namespace DataLinq.Metadata Assembly DataLinq.Core.dll public enum RelationType Fields OneToMany = 0"
  },
  "api/DataLinq.Metadata.SqlGeneration.html": {
    "href": "api/DataLinq.Metadata.SqlGeneration.html",
    "title": "Class SqlGeneration | DataLinq",
    "summary": "Class SqlGeneration Namespace DataLinq.Metadata Assembly DataLinq.dll public class SqlGeneration Inheritance object SqlGeneration Derived SQLiteGeneration Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors SqlGeneration(int, char, string) public SqlGeneration(int indentationSpaces = 4, char quoteChar = '`', string generatedText = \"\") Parameters indentationSpaces int quoteChar char generatedText string Fields Buffer public string Buffer Field Value string sql public Sql sql Field Value Sql Properties IndentationSpaces public int IndentationSpaces { get; set; } Property Value int QuoteCharacter public char QuoteCharacter { get; set; } Property Value char Methods Add(string) public SqlGeneration Add(string s) Parameters s string Returns SqlGeneration Align(int, string) public string Align(int longest, string text) Parameters longest int text string Returns string Autoincrement(bool) public SqlGeneration Autoincrement(bool inc) Parameters inc bool Returns SqlGeneration ColumnName(string) public SqlGeneration ColumnName(string column) Parameters column string Returns SqlGeneration CreateTable(string, Action<SqlGeneration>) public SqlGeneration CreateTable(string tableName, Action<SqlGeneration> func) Parameters tableName string func Action<SqlGeneration> Returns SqlGeneration CreateView(string, string) public SqlGeneration CreateView(string viewName, string definition) Parameters viewName string definition string Returns SqlGeneration DefaultValue(string) public SqlGeneration DefaultValue(string defaultValue) Parameters defaultValue string Returns SqlGeneration EnumValues(IEnumerable<string>) public SqlGeneration EnumValues(IEnumerable<string> values) Parameters values IEnumerable<string> Returns SqlGeneration ForeignKey(RelationPart, bool) public SqlGeneration ForeignKey(RelationPart relation, bool restrict) Parameters relation RelationPart restrict bool Returns SqlGeneration ForeignKey(string?, string, string, string, bool) public SqlGeneration ForeignKey(string? constraintName, string from, string table, string to, bool restrict) Parameters constraintName string? from string table string to string restrict bool Returns SqlGeneration Indent() public SqlGeneration Indent() Returns SqlGeneration Index(string, string?, string, params string[]) public SqlGeneration Index(string name, string? characteristic, string type, params string[] columns) Parameters name string characteristic string? type string columns string[] Returns SqlGeneration NewLine() public SqlGeneration NewLine() Returns SqlGeneration NewLineComma() public SqlGeneration NewLineComma() Returns SqlGeneration NewRow() public SqlGeneration NewRow() Returns SqlGeneration Nullable(bool) public SqlGeneration Nullable(bool nullable) Parameters nullable bool Returns SqlGeneration OnUpdateDelete(bool) public string OnUpdateDelete(bool restrict) Parameters restrict bool Returns string Parenthesis(string) public string Parenthesis(string s) Parameters s string Returns string ParenthesisList(string[]) public string ParenthesisList(string[] columns) Parameters columns string[] Returns string PrimaryKey(params string[]) public SqlGeneration PrimaryKey(params string[] columns) Parameters columns string[] Returns SqlGeneration QuotedParenthesis(string) public string QuotedParenthesis(string s) Parameters s string Returns string QuotedString(string) public string QuotedString(string s) Parameters s string Returns string SortTablesByForeignKeys(List<TableDefinition>) public List<TableDefinition> SortTablesByForeignKeys(List<TableDefinition> tables) Parameters tables List<TableDefinition> Returns List<TableDefinition> SortViewsByForeignKeys(List<ViewDefinition>) public List<ViewDefinition> SortViewsByForeignKeys(List<ViewDefinition> views) Parameters views List<ViewDefinition> Returns List<ViewDefinition> Space() public SqlGeneration Space() Returns SqlGeneration Type(string, string, int) public SqlGeneration Type(string type, string columnName, int longestColumnName) Parameters type string columnName string longestColumnName int Returns SqlGeneration TypeLength(long?, int?) public SqlGeneration TypeLength(long? length, int? decimals) Parameters length long? decimals int? Returns SqlGeneration UniqueKey(string, params string[]) public virtual SqlGeneration UniqueKey(string name, params string[] columns) Parameters name string columns string[] Returns SqlGeneration Unsigned(bool?) public SqlGeneration Unsigned(bool? signed) Parameters signed bool? Returns SqlGeneration ValueWithSpace(string?) public string ValueWithSpace(string? s) Parameters s string? Returns string"
  },
  "api/DataLinq.Metadata.TableDefinition.html": {
    "href": "api/DataLinq.Metadata.TableDefinition.html",
    "title": "Class TableDefinition | DataLinq",
    "summary": "Class TableDefinition Namespace DataLinq.Metadata Assembly DataLinq.Core.dll public class TableDefinition : IDefinition Inheritance object TableDefinition Derived ViewDefinition Implements IDefinition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods MetadataFactory.ParseColumn(TableDefinition, ValueProperty) Constructors TableDefinition(string) public TableDefinition(string dbName) Parameters dbName string Properties CacheLimits public List<(CacheLimitType limitType, long amount)> CacheLimits { get; } Property Value List<(CacheLimitType limitType, long amount)> ColumnIndices public List<ColumnIndex> ColumnIndices { get; } Property Value List<ColumnIndex> Columns public ColumnDefinition[] Columns { get; } Property Value ColumnDefinition[] CsFile public CsFileDeclaration? CsFile { get; } Property Value CsFileDeclaration? Database public DatabaseDefinition Database { get; } Property Value DatabaseDefinition DbName public string DbName { get; } Property Value string IndexCache public List<(IndexCacheType indexCacheType, int? amount)> IndexCache { get; } Property Value List<(IndexCacheType indexCacheType, int? amount)> Model public ModelDefinition Model { get; } Property Value ModelDefinition PrimaryKeyColumns public ColumnDefinition[] PrimaryKeyColumns { get; } Property Value ColumnDefinition[] TableModel public TableModel TableModel { get; } Property Value TableModel Type public TableType Type { get; protected set; } Property Value TableType UseCache public bool UseCache { get; set; } Property Value bool Methods AddPrimaryKeyColumn(ColumnDefinition) public void AddPrimaryKeyColumn(ColumnDefinition column) Parameters column ColumnDefinition RemovePrimaryKeyColumn(ColumnDefinition) public void RemovePrimaryKeyColumn(ColumnDefinition column) Parameters column ColumnDefinition SetColumns(IEnumerable<ColumnDefinition>) public void SetColumns(IEnumerable<ColumnDefinition> columns) Parameters columns IEnumerable<ColumnDefinition> SetDbName(string) public void SetDbName(string dbName) Parameters dbName string ToString() public override string ToString() Returns string"
  },
  "api/DataLinq.Metadata.TableModel.html": {
    "href": "api/DataLinq.Metadata.TableModel.html",
    "title": "Class TableModel | DataLinq",
    "summary": "Class TableModel Namespace DataLinq.Metadata Assembly DataLinq.Core.dll public class TableModel Inheritance object TableModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TableModel(string, DatabaseDefinition, TableDefinition, string) public TableModel(string csPropertyName, DatabaseDefinition database, TableDefinition table, string csName) Parameters csPropertyName string database DatabaseDefinition table TableDefinition csName string TableModel(string, DatabaseDefinition, ModelDefinition, bool) public TableModel(string csPropertyName, DatabaseDefinition database, ModelDefinition model, bool isStub = false) Parameters csPropertyName string database DatabaseDefinition model ModelDefinition isStub bool Properties CsPropertyName public string CsPropertyName { get; } Property Value string Database public DatabaseDefinition Database { get; } Property Value DatabaseDefinition IsStub public bool IsStub { get; } Property Value bool Model public ModelDefinition Model { get; } Property Value ModelDefinition Table public TableDefinition Table { get; } Property Value TableDefinition Methods SetCsPropertyName(string) public void SetCsPropertyName(string csPropertyName) Parameters csPropertyName string ToString() public override string ToString() Returns string"
  },
  "api/DataLinq.Metadata.TableType.html": {
    "href": "api/DataLinq.Metadata.TableType.html",
    "title": "Enum TableType | DataLinq",
    "summary": "Enum TableType Namespace DataLinq.Metadata Assembly DataLinq.Core.dll public enum TableType Fields Table = 0 View = 1"
  },
  "api/DataLinq.Metadata.ValueProperty.html": {
    "href": "api/DataLinq.Metadata.ValueProperty.html",
    "title": "Class ValueProperty | DataLinq",
    "summary": "Class ValueProperty Namespace DataLinq.Metadata Assembly DataLinq.Core.dll public class ValueProperty : PropertyDefinition, IDefinition Inheritance object PropertyDefinition ValueProperty Implements IDefinition Inherited Members PropertyDefinition.Attributes PropertyDefinition.SetAttributes(IEnumerable<Attribute>) PropertyDefinition.AddAttribute(Attribute) PropertyDefinition.PropertyName PropertyDefinition.SetPropertyName(string) PropertyDefinition.CsType PropertyDefinition.SetCsType(CsTypeDeclaration) PropertyDefinition.Model PropertyDefinition.Type PropertyDefinition.CsFile PropertyDefinition.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ValueProperty(string, CsTypeDeclaration, ModelDefinition, IEnumerable<Attribute>) public ValueProperty(string propertyName, CsTypeDeclaration csType, ModelDefinition model, IEnumerable<Attribute> attributes) Parameters propertyName string csType CsTypeDeclaration model ModelDefinition attributes IEnumerable<Attribute> Properties Column public ColumnDefinition Column { get; } Property Value ColumnDefinition CsNullable public bool CsNullable { get; } Property Value bool CsSize public int? CsSize { get; } Property Value int? EnumProperty public EnumProperty? EnumProperty { get; } Property Value EnumProperty? Methods GetDefaultAttribute() public DefaultAttribute? GetDefaultAttribute() Returns DefaultAttribute? GetDefaultValue() public string? GetDefaultValue() Returns string? HasDefaultValue() public bool HasDefaultValue() Returns bool SetColumn(ColumnDefinition) public void SetColumn(ColumnDefinition column) Parameters column ColumnDefinition SetCsNullable(bool) public void SetCsNullable(bool csNullable = true) Parameters csNullable bool SetCsSize(int?) public void SetCsSize(int? csSize) Parameters csSize int? SetEnumProperty(EnumProperty) public void SetEnumProperty(EnumProperty enumProperty) Parameters enumProperty EnumProperty"
  },
  "api/DataLinq.Metadata.ViewDefinition.html": {
    "href": "api/DataLinq.Metadata.ViewDefinition.html",
    "title": "Class ViewDefinition | DataLinq",
    "summary": "Class ViewDefinition Namespace DataLinq.Metadata Assembly DataLinq.Core.dll public class ViewDefinition : TableDefinition, IDefinition Inheritance object TableDefinition ViewDefinition Implements IDefinition Inherited Members TableDefinition.DbName TableDefinition.SetDbName(string) TableDefinition.TableModel TableDefinition.Database TableDefinition.Model TableDefinition.Columns TableDefinition.SetColumns(IEnumerable<ColumnDefinition>) TableDefinition.PrimaryKeyColumns TableDefinition.ColumnIndices TableDefinition.Type TableDefinition.CacheLimits TableDefinition.IndexCache TableDefinition.CsFile TableDefinition.UseCache TableDefinition.AddPrimaryKeyColumn(ColumnDefinition) TableDefinition.RemovePrimaryKeyColumn(ColumnDefinition) TableDefinition.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods MetadataFactory.ParseColumn(TableDefinition, ValueProperty) Constructors ViewDefinition(string) public ViewDefinition(string dbName) Parameters dbName string Properties Definition public string? Definition { get; } Property Value string? Methods SetDefinition(string) public void SetDefinition(string definition) Parameters definition string"
  },
  "api/DataLinq.Metadata.html": {
    "href": "api/DataLinq.Metadata.html",
    "title": "Namespace DataLinq.Metadata | DataLinq",
    "summary": "Namespace DataLinq.Metadata Classes ColumnDefinition ColumnIndex Represents an index associated with one or more columns in a database table. DatabaseColumnType DatabaseDefinition GeneratorFileFactory GeneratorFileFactoryOptions MetadataFromTypeFactory ModelDefinition ModelUsing PluginHook PropertyDefinition RelationDefinition RelationPart RelationProperty SqlGeneration TableDefinition TableModel ValueProperty ViewDefinition Structs CsFileDeclaration CsTypeDeclaration EnumProperty Interfaces IDatabaseProviderCreator IMetadataFromDatabaseFactoryCreator IMetadataFromSqlFactory ISqlFromMetadataFactory Enums ModelCsType PropertyType RelationPartType RelationType TableType"
  },
  "api/DataLinq.Mutation.DataSourceAccess.html": {
    "href": "api/DataLinq.Mutation.DataSourceAccess.html",
    "title": "Class DataSourceAccess | DataLinq",
    "summary": "Class DataSourceAccess Namespace DataLinq.Mutation Assembly DataLinq.dll public abstract class DataSourceAccess : IDataSourceAccess Inheritance object DataSourceAccess Derived ReadOnlyAccess Transaction Implements IDataSourceAccess Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors DataSourceAccess(IDatabaseProvider) protected DataSourceAccess(IDatabaseProvider provider) Parameters provider IDatabaseProvider Properties DatabaseAccess Gets or sets the database transaction. public abstract DatabaseAccess DatabaseAccess { get; } Property Value DatabaseAccess Provider Gets the database provider. public IDatabaseProvider Provider { get; } Property Value IDatabaseProvider Methods GetFromCommand<T>(IDbCommand) Gets models from a command. public abstract IEnumerable<T> GetFromCommand<T>(IDbCommand dbCommand) where T : IModel Parameters dbCommand IDbCommand The command to execute. Returns IEnumerable<T> The models returned by the command. Type Parameters T The type of the model. GetFromQuery<T>(string) Gets models from a query. public abstract IEnumerable<T> GetFromQuery<T>(string query) where T : IModel Parameters query string The query to execute. Returns IEnumerable<T> The models returned by the query. Type Parameters T The type of the model."
  },
  "api/DataLinq.Mutation.History.html": {
    "href": "api/DataLinq.Mutation.History.html",
    "title": "Class History | DataLinq",
    "summary": "Class History Namespace DataLinq.Mutation Assembly DataLinq.dll public class History Inheritance object History Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Properties Changes public List<StateChange> Changes { get; } Property Value List<StateChange> Methods AddChanges(params StateChange[]) public void AddChanges(params StateChange[] changes) Parameters changes StateChange[]"
  },
  "api/DataLinq.Mutation.ReadOnlyAccess-1.html": {
    "href": "api/DataLinq.Mutation.ReadOnlyAccess-1.html",
    "title": "Class ReadOnlyAccess<T> | DataLinq",
    "summary": "Class ReadOnlyAccess<T> Namespace DataLinq.Mutation Assembly DataLinq.dll Represents a database transaction. public class ReadOnlyAccess<T> : ReadOnlyAccess, IDataSourceAccess where T : class, IDatabaseModel Type Parameters T The type of the database model. Inheritance object DataSourceAccess ReadOnlyAccess ReadOnlyAccess<T> Implements IDataSourceAccess Inherited Members ReadOnlyAccess.DatabaseAccess ReadOnlyAccess.GetFromQuery<T>(string) ReadOnlyAccess.GetFromCommand<T>(IDbCommand) DataSourceAccess.Provider DataSourceAccess.DatabaseAccess DataSourceAccess.GetFromQuery<T>(string) DataSourceAccess.GetFromCommand<T>(IDbCommand) object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors ReadOnlyAccess(DatabaseProvider<T>) Initializes a new instance of the DataLinq.Mutation.Transaction`1 class. public ReadOnlyAccess(DatabaseProvider<T> databaseProvider) Parameters databaseProvider DatabaseProvider<T> The database provider. Properties Database Gets the database for the transaction. protected T Database { get; } Property Value T Methods From(string) Creates a new SQL query from the specified table name. public SqlQuery From(string tableName) Parameters tableName string The name of the table. Returns SqlQuery The SQL query. From(TableDefinition) Creates a new SQL query from the specified table metadata. public SqlQuery From(TableDefinition table) Parameters table TableDefinition The table metadata. Returns SqlQuery The SQL query. From<V>() Creates a new SQL query from the specified model type. public SqlQuery<V> From<V>() where V : IModel Returns SqlQuery<V> The SQL query. Type Parameters V The type of the model. Query() Gets the schema. public T Query() Returns T The schema."
  },
  "api/DataLinq.Mutation.ReadOnlyAccess.html": {
    "href": "api/DataLinq.Mutation.ReadOnlyAccess.html",
    "title": "Class ReadOnlyAccess | DataLinq",
    "summary": "Class ReadOnlyAccess Namespace DataLinq.Mutation Assembly DataLinq.dll public class ReadOnlyAccess : DataSourceAccess, IDataSourceAccess Inheritance object DataSourceAccess ReadOnlyAccess Derived ReadOnlyAccess<T> Implements IDataSourceAccess Inherited Members DataSourceAccess.Provider DataSourceAccess.DatabaseAccess DataSourceAccess.GetFromQuery<T>(string) DataSourceAccess.GetFromCommand<T>(IDbCommand) object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors ReadOnlyAccess(IDatabaseProvider) public ReadOnlyAccess(IDatabaseProvider provider) Parameters provider IDatabaseProvider Properties DatabaseAccess Gets or sets the database transaction. public override DatabaseAccess DatabaseAccess { get; } Property Value DatabaseAccess Methods GetFromCommand<T>(IDbCommand) Gets models from a command. public override IEnumerable<T> GetFromCommand<T>(IDbCommand dbCommand) where T : IModel Parameters dbCommand IDbCommand The command to execute. Returns IEnumerable<T> The models returned by the command. Type Parameters T The type of the model. GetFromQuery<T>(string) Gets models from a query. public override IEnumerable<T> GetFromQuery<T>(string query) where T : IModel Parameters query string The query to execute. Returns IEnumerable<T> The models returned by the query. Type Parameters T The type of the model."
  },
  "api/DataLinq.Mutation.State.html": {
    "href": "api/DataLinq.Mutation.State.html",
    "title": "Class State | DataLinq",
    "summary": "Class State Namespace DataLinq.Mutation Assembly DataLinq.dll Represents the state of the database, including history and cache. It provides methods to apply changes to the state, manage the transactions in the cache, and handle cleanup of resources. public class State : IDisposable Inheritance object State Implements IDisposable Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors State(DatabaseProvider, DataLinqLoggingConfiguration) Initializes a new instance of the DataLinq.Mutation.State class with the specified database provider. public State(DatabaseProvider database, DataLinqLoggingConfiguration loggingConfiguration) Parameters database DatabaseProvider The database provider to associate with the state. loggingConfiguration DataLinqLoggingConfiguration Properties Cache Gets or sets the cache associated with the database state. public DatabaseCache Cache { get; set; } Property Value DatabaseCache Database Gets the database provider associated with the state. public DatabaseProvider Database { get; } Property Value DatabaseProvider History Gets or sets the history of changes made to the database. public History History { get; set; } Property Value History Methods ApplyChanges(IEnumerable<StateChange>, Transaction?) Applies a collection of state changes to the database using an optional transaction context. public void ApplyChanges(IEnumerable<StateChange> changes, Transaction? transaction = null) Parameters changes IEnumerable<StateChange> The state changes to apply. transaction Transaction? The transaction to associate with the changes, if any. ClearCache() Clears all entries from the cache. public void ClearCache() Dispose() Releases all resources used by the cache. public void Dispose() RemoveTransactionFromCache(Transaction) Removes a transaction from the cache, effectively rolling back any changes associated with the transaction. public void RemoveTransactionFromCache(Transaction transaction) Parameters transaction Transaction The transaction to remove from the cache."
  },
  "api/DataLinq.Mutation.StateChange.html": {
    "href": "api/DataLinq.Mutation.StateChange.html",
    "title": "Class StateChange | DataLinq",
    "summary": "Class StateChange Namespace DataLinq.Mutation Assembly DataLinq.dll Represents a change of state to be applied to a model within a transaction. public class StateChange Inheritance object StateChange Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors StateChange(IModelInstance, TableDefinition, TransactionChangeType) Initializes a new instance of the DataLinq.Mutation.StateChange class. public StateChange(IModelInstance model, TableDefinition table, TransactionChangeType type) Parameters model IModelInstance The model to apply the change to. table TableDefinition The table metadata for the model. type TransactionChangeType The type of change to be applied. Properties HasAutoIncrement Determines if the model has an auto-incrementing primary key. public bool HasAutoIncrement { get; } Property Value bool Model Gets the model that the change will be applied to. public IModelInstance Model { get; } Property Value IModelInstance PrimaryKeys Gets the primary keys for the model. public IKey PrimaryKeys { get; } Property Value IKey Table Gets the table metadata associated with the model. public TableDefinition Table { get; } Property Value TableDefinition Type Gets the type of change that will be applied to the model. public TransactionChangeType Type { get; } Property Value TransactionChangeType Methods ExecuteQuery(Transaction) Executes the query associated with the state change on the given transaction. public void ExecuteQuery(Transaction transaction) Parameters transaction Transaction The transaction to execute the query on. GetChanges() public IEnumerable<KeyValuePair<ColumnDefinition, object?>> GetChanges() Returns IEnumerable<KeyValuePair<ColumnDefinition, object?>> GetDbCommand(Transaction) Creates a database command for the state change to be executed within the transaction. public IDbCommand GetDbCommand(Transaction transaction) Parameters transaction Transaction The transaction the command is for. Returns IDbCommand The database command to execute. GetQuery(Transaction) Generates the query for the state change. public IQuery GetQuery(Transaction transaction) Parameters transaction Transaction The transaction the query is for. Returns IQuery The query representing the state change."
  },
  "api/DataLinq.Mutation.Transaction-1.html": {
    "href": "api/DataLinq.Mutation.Transaction-1.html",
    "title": "Class Transaction<T> | DataLinq",
    "summary": "Class Transaction<T> Namespace DataLinq.Mutation Assembly DataLinq.dll Represents a database transaction. public class Transaction<T> : Transaction, IDataSourceAccess, IDisposable, IEquatable<Transaction> where T : class, IDatabaseModel Type Parameters T The type of the database model. Inheritance object DataSourceAccess Transaction Transaction<T> Implements IDataSourceAccess IDisposable IEquatable<Transaction> Inherited Members Transaction.TransactionID Transaction.Changes Transaction.Type Transaction.Status Transaction.DatabaseAccess Transaction.OnStatusChanged Transaction.Insert<T>(Mutable<T>) Transaction.Insert<T>(IEnumerable<Mutable<T>>) Transaction.Update<T>(Mutable<T>) Transaction.Update<T>(T, Action<Mutable<T>>) Transaction.Save<T>(Mutable<T>) Transaction.Save<T>(T, Action<Mutable<T>>) Transaction.Save<T>(Mutable<T>, Action<Mutable<T>>) Transaction.Delete(IModelInstance) Transaction.GetFromQuery<T>(string) Transaction.GetFromCommand<T>(IDbCommand) Transaction.Commit() Transaction.Rollback() Transaction.Dispose() Transaction.Equals(Transaction?) Transaction.Equals(object?) Transaction.GetHashCode() Transaction.ToString() DataSourceAccess.Provider DataSourceAccess.DatabaseAccess DataSourceAccess.GetFromQuery<T>(string) DataSourceAccess.GetFromCommand<T>(IDbCommand) object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors Transaction(DatabaseProvider<T>, TransactionType) Initializes a new instance of the DataLinq.Mutation.Transaction`1 class. public Transaction(DatabaseProvider<T> databaseProvider, TransactionType type) Parameters databaseProvider DatabaseProvider<T> The database provider. type TransactionType The type of the transaction. Transaction(DatabaseProvider<T>, IDbTransaction, TransactionType) Initializes a new instance of the DataLinq.Mutation.Transaction`1 class. public Transaction(DatabaseProvider<T> databaseProvider, IDbTransaction dbTransaction, TransactionType type) Parameters databaseProvider DatabaseProvider<T> The database provider. dbTransaction IDbTransaction The database transaction. type TransactionType The type of the transaction. Properties Database Gets the database for the transaction. protected T Database { get; } Property Value T Methods From(string) Creates a new SQL query from the specified table name. public SqlQuery From(string tableName) Parameters tableName string The name of the table. Returns SqlQuery The SQL query. From(TableDefinition) Creates a new SQL query from the specified table metadata. public SqlQuery From(TableDefinition table) Parameters table TableDefinition The table metadata. Returns SqlQuery The SQL query. From<V>() Creates a new SQL query from the specified model type. public SqlQuery<V> From<V>() where V : IModel Returns SqlQuery<V> The SQL query. Type Parameters V The type of the model. Query() Gets the schema. public T Query() Returns T The schema."
  },
  "api/DataLinq.Mutation.Transaction.html": {
    "href": "api/DataLinq.Mutation.Transaction.html",
    "title": "Class Transaction | DataLinq",
    "summary": "Class Transaction Namespace DataLinq.Mutation Assembly DataLinq.dll Represents a database transaction. public class Transaction : DataSourceAccess, IDataSourceAccess, IDisposable, IEquatable<Transaction> Inheritance object DataSourceAccess Transaction Derived Transaction<T> Implements IDataSourceAccess IDisposable IEquatable<Transaction> Inherited Members DataSourceAccess.Provider DataSourceAccess.DatabaseAccess DataSourceAccess.GetFromQuery<T>(string) DataSourceAccess.GetFromCommand<T>(IDbCommand) object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors Transaction(IDatabaseProvider, TransactionType) Initializes a new instance of the DataLinq.Mutation.Transaction class. public Transaction(IDatabaseProvider databaseProvider, TransactionType type) Parameters databaseProvider IDatabaseProvider The database provider. type TransactionType The type of the transaction. Transaction(IDatabaseProvider, IDbTransaction, TransactionType) Initializes a new instance of the DataLinq.Mutation.Transaction class. public Transaction(IDatabaseProvider databaseProvider, IDbTransaction dbTransaction, TransactionType type) Parameters databaseProvider IDatabaseProvider The database provider. dbTransaction IDbTransaction The database transaction. type TransactionType The type of the transaction. Properties Changes Gets the list of state changes. public List<StateChange> Changes { get; } Property Value List<StateChange> DatabaseAccess Gets or sets the database transaction. public override DatabaseTransaction DatabaseAccess { get; } Property Value DatabaseTransaction Status Gets the status of the database transaction. public DatabaseTransactionStatus Status { get; } Property Value DatabaseTransactionStatus TransactionID Gets the ID of the transaction. public uint TransactionID { get; } Property Value uint Type Gets the type of the transaction. public TransactionType Type { get; protected set; } Property Value TransactionType Methods Commit() Commits the transaction. public void Commit() Delete(IModelInstance) Deletes an existing row from the database. public void Delete(IModelInstance model) Parameters model IModelInstance The model to delete. Dispose() Disposes of the transaction. public void Dispose() Equals(Transaction?) Determines whether the specified object is equal to the current object. public bool Equals(Transaction? other) Parameters other Transaction? The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object? The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetFromCommand<T>(IDbCommand) Gets models from a command. public override IEnumerable<T> GetFromCommand<T>(IDbCommand dbCommand) where T : IModel Parameters dbCommand IDbCommand The command to execute. Returns IEnumerable<T> The models returned by the command. Type Parameters T The type of the model. GetFromQuery<T>(string) Gets models from a query. public override IEnumerable<T> GetFromQuery<T>(string query) where T : IModel Parameters query string The query to execute. Returns IEnumerable<T> The models returned by the query. Type Parameters T The type of the model. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Insert<T>(Mutable<T>) Inserts a new row into the database. public T Insert<T>(Mutable<T> model) where T : IImmutableInstance Parameters model Mutable<T> The model to insert. Returns T The inserted model. Type Parameters T The type of the model. Insert<T>(IEnumerable<Mutable<T>>) Inserts multiple new rows into the database. public List<T> Insert<T>(IEnumerable<Mutable<T>> models) where T : IImmutableInstance Parameters models IEnumerable<Mutable<T>> The models to insert. Returns List<T> The inserted models. Type Parameters T The type of the model. Rollback() Rolls back the transaction. public void Rollback() Save<T>(Mutable<T>) Inserts a new row into the database or updates an existing row if it already exists. public T Save<T>(Mutable<T> model) where T : IImmutableInstance Parameters model Mutable<T> The model to insert or update. Returns T The inserted or updated model. Type Parameters T The type of the model. Save<T>(T, Action<Mutable<T>>) Inserts a new row into the database or updates an existing row if it already exists with the specified changes. public T Save<T>(T model, Action<Mutable<T>> changes) where T : IImmutableInstance Parameters model T The model to insert or update. changes Action<Mutable<T>> The changes to apply to the model. Returns T The inserted or updated model. Type Parameters T The type of the model. Save<T>(Mutable<T>, Action<Mutable<T>>) Inserts a new row into the database or updates an existing row if it already exists with the specified changes. public T Save<T>(Mutable<T> model, Action<Mutable<T>> changes) where T : IImmutableInstance Parameters model Mutable<T> The model to insert or update. changes Action<Mutable<T>> The changes to apply to the model. Returns T The inserted or updated model. Type Parameters T The type of the model. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Update<T>(Mutable<T>) Updates an existing row in the database. public T Update<T>(Mutable<T> model) where T : IImmutableInstance Parameters model Mutable<T> The model to update. Returns T The updated model. Type Parameters T The type of the model. Update<T>(T, Action<Mutable<T>>) Updates an existing row in the database with the specified changes. public T Update<T>(T model, Action<Mutable<T>> changes) where T : IImmutableInstance Parameters model T The model to update. changes Action<Mutable<T>> The changes to apply to the model. Returns T The updated model. Type Parameters T The type of the model. OnStatusChanged Occurs when the status of the transaction changes. public event EventHandler<TransactionStatusChangeEventArgs>? OnStatusChanged Event Type EventHandler<TransactionStatusChangeEventArgs>?"
  },
  "api/DataLinq.Mutation.TransactionChangeType.html": {
    "href": "api/DataLinq.Mutation.TransactionChangeType.html",
    "title": "Enum TransactionChangeType | DataLinq",
    "summary": "Enum TransactionChangeType Namespace DataLinq.Mutation Assembly DataLinq.dll Enumerates the types of changes that can be made to a transaction. public enum TransactionChangeType Fields Delete = 2 Delete an existing row from the database. Insert = 0 Insert a new row into the database. Update = 1 Update an existing row in the database."
  },
  "api/DataLinq.Mutation.TransactionStatusChangeEventArgs.html": {
    "href": "api/DataLinq.Mutation.TransactionStatusChangeEventArgs.html",
    "title": "Class TransactionStatusChangeEventArgs | DataLinq",
    "summary": "Class TransactionStatusChangeEventArgs Namespace DataLinq.Mutation Assembly DataLinq.dll Provides data for the DataLinq.Mutation.Transaction.OnStatusChanged event. public class TransactionStatusChangeEventArgs : EventArgs Inheritance object EventArgs TransactionStatusChangeEventArgs Inherited Members EventArgs.Empty object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors TransactionStatusChangeEventArgs(Transaction, DatabaseTransactionStatus) Initializes a new instance of the DataLinq.Mutation.TransactionStatusChangeEventArgs class. public TransactionStatusChangeEventArgs(Transaction transaction, DatabaseTransactionStatus status) Parameters transaction Transaction The transaction that raised the event. status DatabaseTransactionStatus The new status of the transaction. Properties Status Gets the new status of the transaction. public DatabaseTransactionStatus Status { get; } Property Value DatabaseTransactionStatus Transaction Gets the transaction that raised the event. public Transaction Transaction { get; } Property Value Transaction"
  },
  "api/DataLinq.Mutation.TransactionType.html": {
    "href": "api/DataLinq.Mutation.TransactionType.html",
    "title": "Enum TransactionType | DataLinq",
    "summary": "Enum TransactionType Namespace DataLinq.Mutation Assembly DataLinq.dll Enumerates the types of transactions. public enum TransactionType Fields ReadAndWrite = 0 Transaction that allows both read and write operations. ReadOnly = 1 Transaction that only allows read operations. WriteOnly = 2 Transaction that only allows write operations."
  },
  "api/DataLinq.Mutation.html": {
    "href": "api/DataLinq.Mutation.html",
    "title": "Namespace DataLinq.Mutation | DataLinq",
    "summary": "Namespace DataLinq.Mutation Classes DataSourceAccess History ReadOnlyAccess ReadOnlyAccess<T> Represents a database transaction. State Represents the state of the database, including history and cache. It provides methods to apply changes to the state, manage the transactions in the cache, and handle cleanup of resources. StateChange Represents a change of state to be applied to a model within a transaction. Transaction<T> Represents a database transaction. Transaction Represents a database transaction. TransactionStatusChangeEventArgs Provides data for the DataLinq.Mutation.Transaction.OnStatusChanged event. Enums TransactionChangeType Enumerates the types of changes that can be made to a transaction. TransactionType Enumerates the types of transactions."
  },
  "api/DataLinq.MySql.MetadataFromMySqlFactory.html": {
    "href": "api/DataLinq.MySql.MetadataFromMySqlFactory.html",
    "title": "Class MetadataFromMySqlFactory | DataLinq",
    "summary": "Class MetadataFromMySqlFactory Namespace DataLinq.MySql Assembly DataLinq.MySql.dll public class MetadataFromMySqlFactory : IMetadataFromSqlFactory Inheritance object MetadataFromMySqlFactory Implements IMetadataFromSqlFactory Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors MetadataFromMySqlFactory(MetadataFromDatabaseFactoryOptions) public MetadataFromMySqlFactory(MetadataFromDatabaseFactoryOptions options) Parameters options MetadataFromDatabaseFactoryOptions Methods ParseDatabase(string, string, string, string, string) public Option<DatabaseDefinition> ParseDatabase(string name, string csTypeName, string csNamespace, string dbName, string connectionString) Parameters name string csTypeName string csNamespace string dbName string connectionString string Returns Option<DatabaseDefinition>"
  },
  "api/DataLinq.MySql.MetadataFromMySqlFactoryCreator.html": {
    "href": "api/DataLinq.MySql.MetadataFromMySqlFactoryCreator.html",
    "title": "Class MetadataFromMySqlFactoryCreator | DataLinq",
    "summary": "Class MetadataFromMySqlFactoryCreator Namespace DataLinq.MySql Assembly DataLinq.MySql.dll public class MetadataFromMySqlFactoryCreator : IMetadataFromDatabaseFactoryCreator Inheritance object MetadataFromMySqlFactoryCreator Implements IMetadataFromDatabaseFactoryCreator Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Methods GetMetadataFromSqlFactory(MetadataFromDatabaseFactoryOptions) public IMetadataFromSqlFactory GetMetadataFromSqlFactory(MetadataFromDatabaseFactoryOptions options) Parameters options MetadataFromDatabaseFactoryOptions Returns IMetadataFromSqlFactory"
  },
  "api/DataLinq.MySql.Models.COLUMNS.html": {
    "href": "api/DataLinq.MySql.Models.COLUMNS.html",
    "title": "Class COLUMNS | DataLinq",
    "summary": "Class COLUMNS Namespace DataLinq.MySql.Models Assembly DataLinq.MySql.dll [Definition(\"\")] [View(\"COLUMNS\")] public abstract class COLUMNS : Immutable<COLUMNS, information_schema>, IImmutable<COLUMNS>, IImmutableInstance<information_schema>, IImmutableInstance, IModelInstance<information_schema>, IModelInstance, IEquatable<Immutable<COLUMNS, information_schema>>, IViewModel<information_schema>, IModel<information_schema>, IModel Inheritance object Immutable<COLUMNS, information_schema> COLUMNS Implements IImmutable<COLUMNS> IImmutableInstance<information_schema> IImmutableInstance IModelInstance<information_schema> IModelInstance IEquatable<Immutable<COLUMNS, information_schema>> IViewModel<information_schema> IModel<information_schema> IModel Inherited Members Immutable<COLUMNS, information_schema>.relationKeys Immutable<COLUMNS, information_schema>.lazyValues Immutable<COLUMNS, information_schema>.this[ColumnDefinition] Immutable<COLUMNS, information_schema>.this[string] Immutable<COLUMNS, information_schema>.Metadata() Immutable<COLUMNS, information_schema>.PrimaryKeys() Immutable<COLUMNS, information_schema>.HasPrimaryKeysSet() Immutable<COLUMNS, information_schema>.GetRowData() Immutable<COLUMNS, information_schema>.GetValues() Immutable<COLUMNS, information_schema>.GetValues(IEnumerable<ColumnDefinition>) Immutable<COLUMNS, information_schema>.ClearLazy() Immutable<COLUMNS, information_schema>.GetLazy<V>(string, Func<V>) Immutable<COLUMNS, information_schema>.GetImmutableForeignKey<V>(string) Immutable<COLUMNS, information_schema>.GetImmutableRelation<V>(string) Immutable<COLUMNS, information_schema>.GetValue(string) Immutable<COLUMNS, information_schema>.GetNullableValue(string) Immutable<COLUMNS, information_schema>.GetForeignKey<V>(string) Immutable<COLUMNS, information_schema>.GetRelation<V>(string) Immutable<COLUMNS, information_schema>.GetRelation<V>(RelationProperty) Immutable<COLUMNS, information_schema>.GetDataSource() Immutable<COLUMNS, information_schema>.Equals(Immutable<COLUMNS, information_schema>?) Immutable<COLUMNS, information_schema>.Equals(object?) Immutable<COLUMNS, information_schema>.GetHashCode() object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Extension Methods IModelExtensions.Delete<COLUMNS>(COLUMNS) IModelExtensions.Delete<COLUMNS>(COLUMNS, Transaction) Constructors COLUMNS(RowData, DataSourceAccess) protected COLUMNS(RowData rowData, DataSourceAccess dataSource) Parameters rowData RowData dataSource DataSourceAccess Properties CHARACTER_MAXIMUM_LENGTH [Nullable] [Type(DatabaseType.MySQL, \"bigint\", 21, false)] [Column(\"CHARACTER_MAXIMUM_LENGTH\")] public abstract long? CHARACTER_MAXIMUM_LENGTH { get; } Property Value long? CHARACTER_OCTET_LENGTH [Nullable] [Type(DatabaseType.MySQL, \"bigint\", 21, false)] [Column(\"CHARACTER_OCTET_LENGTH\")] public abstract long? CHARACTER_OCTET_LENGTH { get; } Property Value long? CHARACTER_SET_NAME [Nullable] [Type(DatabaseType.MySQL, \"varchar\", 32)] [Column(\"CHARACTER_SET_NAME\")] public abstract string? CHARACTER_SET_NAME { get; } Property Value string? COLLATION_NAME [Nullable] [Type(DatabaseType.MySQL, \"varchar\", 32)] [Column(\"COLLATION_NAME\")] public abstract string? COLLATION_NAME { get; } Property Value string? COLUMN_COMMENT [Type(DatabaseType.MySQL, \"varchar\", 1024)] [Column(\"COLUMN_COMMENT\")] public abstract string COLUMN_COMMENT { get; } Property Value string COLUMN_DEFAULT [Nullable] [Type(DatabaseType.MySQL, \"longtext\", 4294967295)] [Column(\"COLUMN_DEFAULT\")] public abstract string? COLUMN_DEFAULT { get; } Property Value string? COLUMN_KEY [Type(DatabaseType.MySQL, \"varchar\", 3)] [Column(\"COLUMN_KEY\")] public abstract string COLUMN_KEY { get; } Property Value string COLUMN_NAME [Type(DatabaseType.MySQL, \"varchar\", 64)] [Column(\"COLUMN_NAME\")] public abstract string COLUMN_NAME { get; } Property Value string COLUMN_TYPE [Type(DatabaseType.MySQL, \"longtext\", 4294967295)] [Column(\"COLUMN_TYPE\")] public abstract string COLUMN_TYPE { get; } Property Value string DATA_TYPE [Type(DatabaseType.MySQL, \"varchar\", 64)] [Column(\"DATA_TYPE\")] public abstract string DATA_TYPE { get; } Property Value string DATETIME_PRECISION [Nullable] [Type(DatabaseType.MySQL, \"bigint\", 21, false)] [Column(\"DATETIME_PRECISION\")] public abstract long? DATETIME_PRECISION { get; } Property Value long? EXTRA [Type(DatabaseType.MySQL, \"varchar\", 80)] [Column(\"EXTRA\")] public abstract string EXTRA { get; } Property Value string GENERATION_EXPRESSION [Nullable] [Type(DatabaseType.MySQL, \"longtext\", 4294967295)] [Column(\"GENERATION_EXPRESSION\")] public abstract string? GENERATION_EXPRESSION { get; } Property Value string? IS_GENERATED [Type(DatabaseType.MySQL, \"varchar\", 6)] [Column(\"IS_GENERATED\")] public abstract string IS_GENERATED { get; } Property Value string IS_NULLABLE [Type(DatabaseType.MySQL, \"varchar\", 3)] [Column(\"IS_NULLABLE\")] public abstract string IS_NULLABLE { get; } Property Value string NUMERIC_PRECISION [Nullable] [Type(DatabaseType.MySQL, \"bigint\", 21, false)] [Column(\"NUMERIC_PRECISION\")] public abstract long? NUMERIC_PRECISION { get; } Property Value long? NUMERIC_SCALE [Nullable] [Type(DatabaseType.MySQL, \"bigint\", 21, false)] [Column(\"NUMERIC_SCALE\")] public abstract long? NUMERIC_SCALE { get; } Property Value long? ORDINAL_POSITION [Type(DatabaseType.MySQL, \"bigint\", 21, false)] [Column(\"ORDINAL_POSITION\")] public abstract long ORDINAL_POSITION { get; } Property Value long PRIVILEGES [Type(DatabaseType.MySQL, \"varchar\", 80)] [Column(\"PRIVILEGES\")] public abstract string PRIVILEGES { get; } Property Value string TABLE_CATALOG [Type(DatabaseType.MySQL, \"varchar\", 512)] [Column(\"TABLE_CATALOG\")] public abstract string TABLE_CATALOG { get; } Property Value string TABLE_NAME [Type(DatabaseType.MySQL, \"varchar\", 64)] [Column(\"TABLE_NAME\")] public abstract string TABLE_NAME { get; } Property Value string TABLE_SCHEMA [Type(DatabaseType.MySQL, \"varchar\", 64)] [Column(\"TABLE_SCHEMA\")] public abstract string TABLE_SCHEMA { get; } Property Value string"
  },
  "api/DataLinq.MySql.Models.ImmutableCOLUMNS.html": {
    "href": "api/DataLinq.MySql.Models.ImmutableCOLUMNS.html",
    "title": "Class ImmutableCOLUMNS | DataLinq",
    "summary": "Class ImmutableCOLUMNS Namespace DataLinq.MySql.Models Assembly DataLinq.MySql.dll public class ImmutableCOLUMNS : COLUMNS, IImmutable<COLUMNS>, IImmutableInstance<information_schema>, IImmutableInstance, IModelInstance<information_schema>, IModelInstance, IEquatable<Immutable<COLUMNS, information_schema>>, IViewModel<information_schema>, IModel<information_schema>, IModel Inheritance object Immutable<COLUMNS, information_schema> COLUMNS ImmutableCOLUMNS Implements IImmutable<COLUMNS> IImmutableInstance<information_schema> IImmutableInstance IModelInstance<information_schema> IModelInstance IEquatable<Immutable<COLUMNS, information_schema>> IViewModel<information_schema> IModel<information_schema> IModel Inherited Members COLUMNS.CHARACTER_MAXIMUM_LENGTH COLUMNS.CHARACTER_OCTET_LENGTH COLUMNS.CHARACTER_SET_NAME COLUMNS.COLLATION_NAME COLUMNS.COLUMN_COMMENT COLUMNS.COLUMN_DEFAULT COLUMNS.COLUMN_KEY COLUMNS.COLUMN_NAME COLUMNS.COLUMN_TYPE COLUMNS.DATA_TYPE COLUMNS.DATETIME_PRECISION COLUMNS.EXTRA COLUMNS.GENERATION_EXPRESSION COLUMNS.IS_GENERATED COLUMNS.IS_NULLABLE COLUMNS.NUMERIC_PRECISION COLUMNS.NUMERIC_SCALE COLUMNS.ORDINAL_POSITION COLUMNS.PRIVILEGES COLUMNS.TABLE_CATALOG COLUMNS.TABLE_NAME COLUMNS.TABLE_SCHEMA Immutable<COLUMNS, information_schema>.relationKeys Immutable<COLUMNS, information_schema>.lazyValues Immutable<COLUMNS, information_schema>.this[ColumnDefinition] Immutable<COLUMNS, information_schema>.this[string] Immutable<COLUMNS, information_schema>.Metadata() Immutable<COLUMNS, information_schema>.PrimaryKeys() Immutable<COLUMNS, information_schema>.HasPrimaryKeysSet() Immutable<COLUMNS, information_schema>.GetRowData() Immutable<COLUMNS, information_schema>.GetValues() Immutable<COLUMNS, information_schema>.GetValues(IEnumerable<ColumnDefinition>) Immutable<COLUMNS, information_schema>.ClearLazy() Immutable<COLUMNS, information_schema>.GetLazy<V>(string, Func<V>) Immutable<COLUMNS, information_schema>.GetImmutableForeignKey<V>(string) Immutable<COLUMNS, information_schema>.GetImmutableRelation<V>(string) Immutable<COLUMNS, information_schema>.GetValue(string) Immutable<COLUMNS, information_schema>.GetNullableValue(string) Immutable<COLUMNS, information_schema>.GetForeignKey<V>(string) Immutable<COLUMNS, information_schema>.GetRelation<V>(string) Immutable<COLUMNS, information_schema>.GetRelation<V>(RelationProperty) Immutable<COLUMNS, information_schema>.GetDataSource() Immutable<COLUMNS, information_schema>.Equals(Immutable<COLUMNS, information_schema>?) Immutable<COLUMNS, information_schema>.Equals(object?) Immutable<COLUMNS, information_schema>.GetHashCode() object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Extension Methods IModelExtensions.Delete<ImmutableCOLUMNS>(ImmutableCOLUMNS) IModelExtensions.Delete<ImmutableCOLUMNS>(ImmutableCOLUMNS, Transaction) Constructors ImmutableCOLUMNS(RowData, DataSourceAccess) public ImmutableCOLUMNS(RowData rowData, DataSourceAccess dataSource) Parameters rowData RowData dataSource DataSourceAccess Properties CHARACTER_MAXIMUM_LENGTH public override long? CHARACTER_MAXIMUM_LENGTH { get; } Property Value long? CHARACTER_OCTET_LENGTH public override long? CHARACTER_OCTET_LENGTH { get; } Property Value long? CHARACTER_SET_NAME public override string? CHARACTER_SET_NAME { get; } Property Value string? COLLATION_NAME public override string? COLLATION_NAME { get; } Property Value string? COLUMN_COMMENT public override string COLUMN_COMMENT { get; } Property Value string COLUMN_DEFAULT public override string? COLUMN_DEFAULT { get; } Property Value string? COLUMN_KEY public override string COLUMN_KEY { get; } Property Value string COLUMN_NAME public override string COLUMN_NAME { get; } Property Value string COLUMN_TYPE public override string COLUMN_TYPE { get; } Property Value string DATA_TYPE public override string DATA_TYPE { get; } Property Value string DATETIME_PRECISION public override long? DATETIME_PRECISION { get; } Property Value long? EXTRA public override string EXTRA { get; } Property Value string GENERATION_EXPRESSION public override string? GENERATION_EXPRESSION { get; } Property Value string? IS_GENERATED public override string IS_GENERATED { get; } Property Value string IS_NULLABLE public override string IS_NULLABLE { get; } Property Value string NUMERIC_PRECISION public override long? NUMERIC_PRECISION { get; } Property Value long? NUMERIC_SCALE public override long? NUMERIC_SCALE { get; } Property Value long? ORDINAL_POSITION public override long ORDINAL_POSITION { get; } Property Value long PRIVILEGES public override string PRIVILEGES { get; } Property Value string TABLE_CATALOG public override string TABLE_CATALOG { get; } Property Value string TABLE_NAME public override string TABLE_NAME { get; } Property Value string TABLE_SCHEMA public override string TABLE_SCHEMA { get; } Property Value string"
  },
  "api/DataLinq.MySql.Models.ImmutableKEY_COLUMN_USAGE.html": {
    "href": "api/DataLinq.MySql.Models.ImmutableKEY_COLUMN_USAGE.html",
    "title": "Class ImmutableKEY_COLUMN_USAGE | DataLinq",
    "summary": "Class ImmutableKEY_COLUMN_USAGE Namespace DataLinq.MySql.Models Assembly DataLinq.MySql.dll public class ImmutableKEY_COLUMN_USAGE : KEY_COLUMN_USAGE, IImmutable<KEY_COLUMN_USAGE>, IImmutableInstance<information_schema>, IImmutableInstance, IModelInstance<information_schema>, IModelInstance, IEquatable<Immutable<KEY_COLUMN_USAGE, information_schema>>, IViewModel<information_schema>, IModel<information_schema>, IModel Inheritance object Immutable<KEY_COLUMN_USAGE, information_schema> KEY_COLUMN_USAGE ImmutableKEY_COLUMN_USAGE Implements IImmutable<KEY_COLUMN_USAGE> IImmutableInstance<information_schema> IImmutableInstance IModelInstance<information_schema> IModelInstance IEquatable<Immutable<KEY_COLUMN_USAGE, information_schema>> IViewModel<information_schema> IModel<information_schema> IModel Inherited Members KEY_COLUMN_USAGE.COLUMN_NAME KEY_COLUMN_USAGE.CONSTRAINT_CATALOG KEY_COLUMN_USAGE.CONSTRAINT_NAME KEY_COLUMN_USAGE.CONSTRAINT_SCHEMA KEY_COLUMN_USAGE.ORDINAL_POSITION KEY_COLUMN_USAGE.POSITION_IN_UNIQUE_CONSTRAINT KEY_COLUMN_USAGE.REFERENCED_COLUMN_NAME KEY_COLUMN_USAGE.REFERENCED_TABLE_NAME KEY_COLUMN_USAGE.REFERENCED_TABLE_SCHEMA KEY_COLUMN_USAGE.TABLE_CATALOG KEY_COLUMN_USAGE.TABLE_NAME KEY_COLUMN_USAGE.TABLE_SCHEMA Immutable<KEY_COLUMN_USAGE, information_schema>.relationKeys Immutable<KEY_COLUMN_USAGE, information_schema>.lazyValues Immutable<KEY_COLUMN_USAGE, information_schema>.this[ColumnDefinition] Immutable<KEY_COLUMN_USAGE, information_schema>.this[string] Immutable<KEY_COLUMN_USAGE, information_schema>.Metadata() Immutable<KEY_COLUMN_USAGE, information_schema>.PrimaryKeys() Immutable<KEY_COLUMN_USAGE, information_schema>.HasPrimaryKeysSet() Immutable<KEY_COLUMN_USAGE, information_schema>.GetRowData() Immutable<KEY_COLUMN_USAGE, information_schema>.GetValues() Immutable<KEY_COLUMN_USAGE, information_schema>.GetValues(IEnumerable<ColumnDefinition>) Immutable<KEY_COLUMN_USAGE, information_schema>.ClearLazy() Immutable<KEY_COLUMN_USAGE, information_schema>.GetLazy<V>(string, Func<V>) Immutable<KEY_COLUMN_USAGE, information_schema>.GetImmutableForeignKey<V>(string) Immutable<KEY_COLUMN_USAGE, information_schema>.GetImmutableRelation<V>(string) Immutable<KEY_COLUMN_USAGE, information_schema>.GetValue(string) Immutable<KEY_COLUMN_USAGE, information_schema>.GetNullableValue(string) Immutable<KEY_COLUMN_USAGE, information_schema>.GetForeignKey<V>(string) Immutable<KEY_COLUMN_USAGE, information_schema>.GetRelation<V>(string) Immutable<KEY_COLUMN_USAGE, information_schema>.GetRelation<V>(RelationProperty) Immutable<KEY_COLUMN_USAGE, information_schema>.GetDataSource() Immutable<KEY_COLUMN_USAGE, information_schema>.Equals(Immutable<KEY_COLUMN_USAGE, information_schema>?) Immutable<KEY_COLUMN_USAGE, information_schema>.Equals(object?) Immutable<KEY_COLUMN_USAGE, information_schema>.GetHashCode() object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Extension Methods IModelExtensions.Delete<ImmutableKEY_COLUMN_USAGE>(ImmutableKEY_COLUMN_USAGE) IModelExtensions.Delete<ImmutableKEY_COLUMN_USAGE>(ImmutableKEY_COLUMN_USAGE, Transaction) Constructors ImmutableKEY_COLUMN_USAGE(RowData, DataSourceAccess) public ImmutableKEY_COLUMN_USAGE(RowData rowData, DataSourceAccess dataSource) Parameters rowData RowData dataSource DataSourceAccess Properties COLUMN_NAME public override string COLUMN_NAME { get; } Property Value string CONSTRAINT_CATALOG public override string CONSTRAINT_CATALOG { get; } Property Value string CONSTRAINT_NAME public override string CONSTRAINT_NAME { get; } Property Value string CONSTRAINT_SCHEMA public override string CONSTRAINT_SCHEMA { get; } Property Value string ORDINAL_POSITION public override long ORDINAL_POSITION { get; } Property Value long POSITION_IN_UNIQUE_CONSTRAINT public override long? POSITION_IN_UNIQUE_CONSTRAINT { get; } Property Value long? REFERENCED_COLUMN_NAME public override string? REFERENCED_COLUMN_NAME { get; } Property Value string? REFERENCED_TABLE_NAME public override string? REFERENCED_TABLE_NAME { get; } Property Value string? REFERENCED_TABLE_SCHEMA public override string? REFERENCED_TABLE_SCHEMA { get; } Property Value string? TABLE_CATALOG public override string TABLE_CATALOG { get; } Property Value string TABLE_NAME public override string TABLE_NAME { get; } Property Value string TABLE_SCHEMA public override string TABLE_SCHEMA { get; } Property Value string"
  },
  "api/DataLinq.MySql.Models.ImmutableSTATISTICS.html": {
    "href": "api/DataLinq.MySql.Models.ImmutableSTATISTICS.html",
    "title": "Class ImmutableSTATISTICS | DataLinq",
    "summary": "Class ImmutableSTATISTICS Namespace DataLinq.MySql.Models Assembly DataLinq.MySql.dll public class ImmutableSTATISTICS : STATISTICS, IImmutable<STATISTICS>, IImmutableInstance<information_schema>, IImmutableInstance, IModelInstance<information_schema>, IModelInstance, IEquatable<Immutable<STATISTICS, information_schema>>, IViewModel<information_schema>, IModel<information_schema>, IModel Inheritance object Immutable<STATISTICS, information_schema> STATISTICS ImmutableSTATISTICS Implements IImmutable<STATISTICS> IImmutableInstance<information_schema> IImmutableInstance IModelInstance<information_schema> IModelInstance IEquatable<Immutable<STATISTICS, information_schema>> IViewModel<information_schema> IModel<information_schema> IModel Inherited Members STATISTICS.CARDINALITY STATISTICS.COLLATION STATISTICS.COLUMN_NAME STATISTICS.COMMENT STATISTICS.INDEX_COMMENT STATISTICS.INDEX_NAME STATISTICS.INDEX_SCHEMA STATISTICS.INDEX_TYPE STATISTICS.NON_UNIQUE STATISTICS.NULLABLE STATISTICS.PACKED STATISTICS.SEQ_IN_INDEX STATISTICS.SUB_PART STATISTICS.TABLE_CATALOG STATISTICS.TABLE_NAME STATISTICS.TABLE_SCHEMA Immutable<STATISTICS, information_schema>.relationKeys Immutable<STATISTICS, information_schema>.lazyValues Immutable<STATISTICS, information_schema>.this[ColumnDefinition] Immutable<STATISTICS, information_schema>.this[string] Immutable<STATISTICS, information_schema>.Metadata() Immutable<STATISTICS, information_schema>.PrimaryKeys() Immutable<STATISTICS, information_schema>.HasPrimaryKeysSet() Immutable<STATISTICS, information_schema>.GetRowData() Immutable<STATISTICS, information_schema>.GetValues() Immutable<STATISTICS, information_schema>.GetValues(IEnumerable<ColumnDefinition>) Immutable<STATISTICS, information_schema>.ClearLazy() Immutable<STATISTICS, information_schema>.GetLazy<V>(string, Func<V>) Immutable<STATISTICS, information_schema>.GetImmutableForeignKey<V>(string) Immutable<STATISTICS, information_schema>.GetImmutableRelation<V>(string) Immutable<STATISTICS, information_schema>.GetValue(string) Immutable<STATISTICS, information_schema>.GetNullableValue(string) Immutable<STATISTICS, information_schema>.GetForeignKey<V>(string) Immutable<STATISTICS, information_schema>.GetRelation<V>(string) Immutable<STATISTICS, information_schema>.GetRelation<V>(RelationProperty) Immutable<STATISTICS, information_schema>.GetDataSource() Immutable<STATISTICS, information_schema>.Equals(Immutable<STATISTICS, information_schema>?) Immutable<STATISTICS, information_schema>.Equals(object?) Immutable<STATISTICS, information_schema>.GetHashCode() object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Extension Methods IModelExtensions.Delete<ImmutableSTATISTICS>(ImmutableSTATISTICS) IModelExtensions.Delete<ImmutableSTATISTICS>(ImmutableSTATISTICS, Transaction) Constructors ImmutableSTATISTICS(RowData, DataSourceAccess) public ImmutableSTATISTICS(RowData rowData, DataSourceAccess dataSource) Parameters rowData RowData dataSource DataSourceAccess Properties CARDINALITY public override long? CARDINALITY { get; } Property Value long? COLLATION public override string? COLLATION { get; } Property Value string? COLUMN_NAME public override string COLUMN_NAME { get; } Property Value string COMMENT public override string? COMMENT { get; } Property Value string? INDEX_COMMENT public override string INDEX_COMMENT { get; } Property Value string INDEX_NAME public override string INDEX_NAME { get; } Property Value string INDEX_SCHEMA public override string INDEX_SCHEMA { get; } Property Value string INDEX_TYPE public override string INDEX_TYPE { get; } Property Value string NON_UNIQUE public override long NON_UNIQUE { get; } Property Value long NULLABLE public override string NULLABLE { get; } Property Value string PACKED public override string? PACKED { get; } Property Value string? SEQ_IN_INDEX public override long SEQ_IN_INDEX { get; } Property Value long SUB_PART public override long? SUB_PART { get; } Property Value long? TABLE_CATALOG public override string TABLE_CATALOG { get; } Property Value string TABLE_NAME public override string TABLE_NAME { get; } Property Value string TABLE_SCHEMA public override string TABLE_SCHEMA { get; } Property Value string"
  },
  "api/DataLinq.MySql.Models.ImmutableTABLES.html": {
    "href": "api/DataLinq.MySql.Models.ImmutableTABLES.html",
    "title": "Class ImmutableTABLES | DataLinq",
    "summary": "Class ImmutableTABLES Namespace DataLinq.MySql.Models Assembly DataLinq.MySql.dll public class ImmutableTABLES : TABLES, IImmutable<TABLES>, IImmutableInstance<information_schema>, IImmutableInstance, IModelInstance<information_schema>, IModelInstance, IEquatable<Immutable<TABLES, information_schema>>, IViewModel<information_schema>, IModel<information_schema>, IModel Inheritance object Immutable<TABLES, information_schema> TABLES ImmutableTABLES Implements IImmutable<TABLES> IImmutableInstance<information_schema> IImmutableInstance IModelInstance<information_schema> IModelInstance IEquatable<Immutable<TABLES, information_schema>> IViewModel<information_schema> IModel<information_schema> IModel Inherited Members TABLES.AUTO_INCREMENT TABLES.AVG_ROW_LENGTH TABLES.CHECK_TIME TABLES.CHECKSUM TABLES.CREATE_OPTIONS TABLES.CREATE_TIME TABLES.DATA_FREE TABLES.DATA_LENGTH TABLES.ENGINE TABLES.INDEX_LENGTH TABLES.MAX_DATA_LENGTH TABLES.MAX_INDEX_LENGTH TABLES.ROW_FORMAT TABLES.TABLE_CATALOG TABLES.TABLE_COLLATION TABLES.TABLE_COMMENT TABLES.TABLE_NAME TABLES.TABLE_ROWS TABLES.TABLE_SCHEMA TABLES.TABLE_TYPE TABLES.TEMPORARY TABLES.UPDATE_TIME TABLES.VERSION Immutable<TABLES, information_schema>.relationKeys Immutable<TABLES, information_schema>.lazyValues Immutable<TABLES, information_schema>.this[ColumnDefinition] Immutable<TABLES, information_schema>.this[string] Immutable<TABLES, information_schema>.Metadata() Immutable<TABLES, information_schema>.PrimaryKeys() Immutable<TABLES, information_schema>.HasPrimaryKeysSet() Immutable<TABLES, information_schema>.GetRowData() Immutable<TABLES, information_schema>.GetValues() Immutable<TABLES, information_schema>.GetValues(IEnumerable<ColumnDefinition>) Immutable<TABLES, information_schema>.ClearLazy() Immutable<TABLES, information_schema>.GetLazy<V>(string, Func<V>) Immutable<TABLES, information_schema>.GetImmutableForeignKey<V>(string) Immutable<TABLES, information_schema>.GetImmutableRelation<V>(string) Immutable<TABLES, information_schema>.GetValue(string) Immutable<TABLES, information_schema>.GetNullableValue(string) Immutable<TABLES, information_schema>.GetForeignKey<V>(string) Immutable<TABLES, information_schema>.GetRelation<V>(string) Immutable<TABLES, information_schema>.GetRelation<V>(RelationProperty) Immutable<TABLES, information_schema>.GetDataSource() Immutable<TABLES, information_schema>.Equals(Immutable<TABLES, information_schema>?) Immutable<TABLES, information_schema>.Equals(object?) Immutable<TABLES, information_schema>.GetHashCode() object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Extension Methods IModelExtensions.Delete<ImmutableTABLES>(ImmutableTABLES) IModelExtensions.Delete<ImmutableTABLES>(ImmutableTABLES, Transaction) Constructors ImmutableTABLES(RowData, DataSourceAccess) public ImmutableTABLES(RowData rowData, DataSourceAccess dataSource) Parameters rowData RowData dataSource DataSourceAccess Properties AUTO_INCREMENT public override long? AUTO_INCREMENT { get; } Property Value long? AVG_ROW_LENGTH public override long? AVG_ROW_LENGTH { get; } Property Value long? CHECKSUM public override long? CHECKSUM { get; } Property Value long? CHECK_TIME public override DateTime? CHECK_TIME { get; } Property Value DateTime? CREATE_OPTIONS public override string? CREATE_OPTIONS { get; } Property Value string? CREATE_TIME public override DateTime? CREATE_TIME { get; } Property Value DateTime? DATA_FREE public override long? DATA_FREE { get; } Property Value long? DATA_LENGTH public override long? DATA_LENGTH { get; } Property Value long? ENGINE public override string? ENGINE { get; } Property Value string? INDEX_LENGTH public override long? INDEX_LENGTH { get; } Property Value long? MAX_DATA_LENGTH public override long? MAX_DATA_LENGTH { get; } Property Value long? MAX_INDEX_LENGTH public override long? MAX_INDEX_LENGTH { get; } Property Value long? ROW_FORMAT public override string? ROW_FORMAT { get; } Property Value string? TABLE_CATALOG public override string TABLE_CATALOG { get; } Property Value string TABLE_COLLATION public override string? TABLE_COLLATION { get; } Property Value string? TABLE_COMMENT public override string TABLE_COMMENT { get; } Property Value string TABLE_NAME public override string TABLE_NAME { get; } Property Value string TABLE_ROWS public override long? TABLE_ROWS { get; } Property Value long? TABLE_SCHEMA public override string TABLE_SCHEMA { get; } Property Value string TABLE_TYPE public override string TABLE_TYPE { get; } Property Value string TEMPORARY public override string? TEMPORARY { get; } Property Value string? UPDATE_TIME public override DateTime? UPDATE_TIME { get; } Property Value DateTime? VERSION public override long? VERSION { get; } Property Value long?"
  },
  "api/DataLinq.MySql.Models.ImmutableVIEWS.html": {
    "href": "api/DataLinq.MySql.Models.ImmutableVIEWS.html",
    "title": "Class ImmutableVIEWS | DataLinq",
    "summary": "Class ImmutableVIEWS Namespace DataLinq.MySql.Models Assembly DataLinq.MySql.dll public class ImmutableVIEWS : VIEWS, IImmutable<VIEWS>, IImmutableInstance<information_schema>, IImmutableInstance, IModelInstance<information_schema>, IModelInstance, IEquatable<Immutable<VIEWS, information_schema>>, IViewModel<information_schema>, IModel<information_schema>, IModel Inheritance object Immutable<VIEWS, information_schema> VIEWS ImmutableVIEWS Implements IImmutable<VIEWS> IImmutableInstance<information_schema> IImmutableInstance IModelInstance<information_schema> IModelInstance IEquatable<Immutable<VIEWS, information_schema>> IViewModel<information_schema> IModel<information_schema> IModel Inherited Members VIEWS.ALGORITHM VIEWS.CHARACTER_SET_CLIENT VIEWS.CHECK_OPTION VIEWS.COLLATION_CONNECTION VIEWS.DEFINER VIEWS.IS_UPDATABLE VIEWS.SECURITY_TYPE VIEWS.TABLE_CATALOG VIEWS.TABLE_NAME VIEWS.TABLE_SCHEMA VIEWS.VIEW_DEFINITION Immutable<VIEWS, information_schema>.relationKeys Immutable<VIEWS, information_schema>.lazyValues Immutable<VIEWS, information_schema>.this[ColumnDefinition] Immutable<VIEWS, information_schema>.this[string] Immutable<VIEWS, information_schema>.Metadata() Immutable<VIEWS, information_schema>.PrimaryKeys() Immutable<VIEWS, information_schema>.HasPrimaryKeysSet() Immutable<VIEWS, information_schema>.GetRowData() Immutable<VIEWS, information_schema>.GetValues() Immutable<VIEWS, information_schema>.GetValues(IEnumerable<ColumnDefinition>) Immutable<VIEWS, information_schema>.ClearLazy() Immutable<VIEWS, information_schema>.GetLazy<V>(string, Func<V>) Immutable<VIEWS, information_schema>.GetImmutableForeignKey<V>(string) Immutable<VIEWS, information_schema>.GetImmutableRelation<V>(string) Immutable<VIEWS, information_schema>.GetValue(string) Immutable<VIEWS, information_schema>.GetNullableValue(string) Immutable<VIEWS, information_schema>.GetForeignKey<V>(string) Immutable<VIEWS, information_schema>.GetRelation<V>(string) Immutable<VIEWS, information_schema>.GetRelation<V>(RelationProperty) Immutable<VIEWS, information_schema>.GetDataSource() Immutable<VIEWS, information_schema>.Equals(Immutable<VIEWS, information_schema>?) Immutable<VIEWS, information_schema>.Equals(object?) Immutable<VIEWS, information_schema>.GetHashCode() object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Extension Methods IModelExtensions.Delete<ImmutableVIEWS>(ImmutableVIEWS) IModelExtensions.Delete<ImmutableVIEWS>(ImmutableVIEWS, Transaction) Constructors ImmutableVIEWS(RowData, DataSourceAccess) public ImmutableVIEWS(RowData rowData, DataSourceAccess dataSource) Parameters rowData RowData dataSource DataSourceAccess Properties ALGORITHM public override string ALGORITHM { get; } Property Value string CHARACTER_SET_CLIENT public override string CHARACTER_SET_CLIENT { get; } Property Value string CHECK_OPTION public override string CHECK_OPTION { get; } Property Value string COLLATION_CONNECTION public override string COLLATION_CONNECTION { get; } Property Value string DEFINER public override string DEFINER { get; } Property Value string IS_UPDATABLE public override string IS_UPDATABLE { get; } Property Value string SECURITY_TYPE public override string SECURITY_TYPE { get; } Property Value string TABLE_CATALOG public override string TABLE_CATALOG { get; } Property Value string TABLE_NAME public override string TABLE_NAME { get; } Property Value string TABLE_SCHEMA public override string TABLE_SCHEMA { get; } Property Value string VIEW_DEFINITION public override string VIEW_DEFINITION { get; } Property Value string"
  },
  "api/DataLinq.MySql.Models.KEY_COLUMN_USAGE.html": {
    "href": "api/DataLinq.MySql.Models.KEY_COLUMN_USAGE.html",
    "title": "Class KEY_COLUMN_USAGE | DataLinq",
    "summary": "Class KEY_COLUMN_USAGE Namespace DataLinq.MySql.Models Assembly DataLinq.MySql.dll [Definition(\"\")] [View(\"KEY_COLUMN_USAGE\")] public abstract class KEY_COLUMN_USAGE : Immutable<KEY_COLUMN_USAGE, information_schema>, IImmutable<KEY_COLUMN_USAGE>, IImmutableInstance<information_schema>, IImmutableInstance, IModelInstance<information_schema>, IModelInstance, IEquatable<Immutable<KEY_COLUMN_USAGE, information_schema>>, IViewModel<information_schema>, IModel<information_schema>, IModel Inheritance object Immutable<KEY_COLUMN_USAGE, information_schema> KEY_COLUMN_USAGE Implements IImmutable<KEY_COLUMN_USAGE> IImmutableInstance<information_schema> IImmutableInstance IModelInstance<information_schema> IModelInstance IEquatable<Immutable<KEY_COLUMN_USAGE, information_schema>> IViewModel<information_schema> IModel<information_schema> IModel Inherited Members Immutable<KEY_COLUMN_USAGE, information_schema>.relationKeys Immutable<KEY_COLUMN_USAGE, information_schema>.lazyValues Immutable<KEY_COLUMN_USAGE, information_schema>.this[ColumnDefinition] Immutable<KEY_COLUMN_USAGE, information_schema>.this[string] Immutable<KEY_COLUMN_USAGE, information_schema>.Metadata() Immutable<KEY_COLUMN_USAGE, information_schema>.PrimaryKeys() Immutable<KEY_COLUMN_USAGE, information_schema>.HasPrimaryKeysSet() Immutable<KEY_COLUMN_USAGE, information_schema>.GetRowData() Immutable<KEY_COLUMN_USAGE, information_schema>.GetValues() Immutable<KEY_COLUMN_USAGE, information_schema>.GetValues(IEnumerable<ColumnDefinition>) Immutable<KEY_COLUMN_USAGE, information_schema>.ClearLazy() Immutable<KEY_COLUMN_USAGE, information_schema>.GetLazy<V>(string, Func<V>) Immutable<KEY_COLUMN_USAGE, information_schema>.GetImmutableForeignKey<V>(string) Immutable<KEY_COLUMN_USAGE, information_schema>.GetImmutableRelation<V>(string) Immutable<KEY_COLUMN_USAGE, information_schema>.GetValue(string) Immutable<KEY_COLUMN_USAGE, information_schema>.GetNullableValue(string) Immutable<KEY_COLUMN_USAGE, information_schema>.GetForeignKey<V>(string) Immutable<KEY_COLUMN_USAGE, information_schema>.GetRelation<V>(string) Immutable<KEY_COLUMN_USAGE, information_schema>.GetRelation<V>(RelationProperty) Immutable<KEY_COLUMN_USAGE, information_schema>.GetDataSource() Immutable<KEY_COLUMN_USAGE, information_schema>.Equals(Immutable<KEY_COLUMN_USAGE, information_schema>?) Immutable<KEY_COLUMN_USAGE, information_schema>.Equals(object?) Immutable<KEY_COLUMN_USAGE, information_schema>.GetHashCode() object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Extension Methods IModelExtensions.Delete<KEY_COLUMN_USAGE>(KEY_COLUMN_USAGE) IModelExtensions.Delete<KEY_COLUMN_USAGE>(KEY_COLUMN_USAGE, Transaction) Constructors KEY_COLUMN_USAGE(RowData, DataSourceAccess) protected KEY_COLUMN_USAGE(RowData rowData, DataSourceAccess dataSource) Parameters rowData RowData dataSource DataSourceAccess Properties COLUMN_NAME [Type(DatabaseType.MySQL, \"varchar\", 64)] [Column(\"COLUMN_NAME\")] public abstract string COLUMN_NAME { get; } Property Value string CONSTRAINT_CATALOG [Type(DatabaseType.MySQL, \"varchar\", 512)] [Column(\"CONSTRAINT_CATALOG\")] public abstract string CONSTRAINT_CATALOG { get; } Property Value string CONSTRAINT_NAME [Type(DatabaseType.MySQL, \"varchar\", 64)] [Column(\"CONSTRAINT_NAME\")] public abstract string CONSTRAINT_NAME { get; } Property Value string CONSTRAINT_SCHEMA [Type(DatabaseType.MySQL, \"varchar\", 64)] [Column(\"CONSTRAINT_SCHEMA\")] public abstract string CONSTRAINT_SCHEMA { get; } Property Value string ORDINAL_POSITION [Type(DatabaseType.MySQL, \"bigint\", 10)] [Column(\"ORDINAL_POSITION\")] public abstract long ORDINAL_POSITION { get; } Property Value long POSITION_IN_UNIQUE_CONSTRAINT [Nullable] [Type(DatabaseType.MySQL, \"bigint\", 10)] [Column(\"POSITION_IN_UNIQUE_CONSTRAINT\")] public abstract long? POSITION_IN_UNIQUE_CONSTRAINT { get; } Property Value long? REFERENCED_COLUMN_NAME [Nullable] [Type(DatabaseType.MySQL, \"varchar\", 64)] [Column(\"REFERENCED_COLUMN_NAME\")] public abstract string? REFERENCED_COLUMN_NAME { get; } Property Value string? REFERENCED_TABLE_NAME [Nullable] [Type(DatabaseType.MySQL, \"varchar\", 64)] [Column(\"REFERENCED_TABLE_NAME\")] public abstract string? REFERENCED_TABLE_NAME { get; } Property Value string? REFERENCED_TABLE_SCHEMA [Nullable] [Type(DatabaseType.MySQL, \"varchar\", 64)] [Column(\"REFERENCED_TABLE_SCHEMA\")] public abstract string? REFERENCED_TABLE_SCHEMA { get; } Property Value string? TABLE_CATALOG [Type(DatabaseType.MySQL, \"varchar\", 512)] [Column(\"TABLE_CATALOG\")] public abstract string TABLE_CATALOG { get; } Property Value string TABLE_NAME [Type(DatabaseType.MySQL, \"varchar\", 64)] [Column(\"TABLE_NAME\")] public abstract string TABLE_NAME { get; } Property Value string TABLE_SCHEMA [Type(DatabaseType.MySQL, \"varchar\", 64)] [Column(\"TABLE_SCHEMA\")] public abstract string TABLE_SCHEMA { get; } Property Value string"
  },
  "api/DataLinq.MySql.Models.STATISTICS.html": {
    "href": "api/DataLinq.MySql.Models.STATISTICS.html",
    "title": "Class STATISTICS | DataLinq",
    "summary": "Class STATISTICS Namespace DataLinq.MySql.Models Assembly DataLinq.MySql.dll [Definition(\"\")] [View(\"STATISTICS\")] public abstract class STATISTICS : Immutable<STATISTICS, information_schema>, IImmutable<STATISTICS>, IImmutableInstance<information_schema>, IImmutableInstance, IModelInstance<information_schema>, IModelInstance, IEquatable<Immutable<STATISTICS, information_schema>>, IViewModel<information_schema>, IModel<information_schema>, IModel Inheritance object Immutable<STATISTICS, information_schema> STATISTICS Implements IImmutable<STATISTICS> IImmutableInstance<information_schema> IImmutableInstance IModelInstance<information_schema> IModelInstance IEquatable<Immutable<STATISTICS, information_schema>> IViewModel<information_schema> IModel<information_schema> IModel Inherited Members Immutable<STATISTICS, information_schema>.relationKeys Immutable<STATISTICS, information_schema>.lazyValues Immutable<STATISTICS, information_schema>.this[ColumnDefinition] Immutable<STATISTICS, information_schema>.this[string] Immutable<STATISTICS, information_schema>.Metadata() Immutable<STATISTICS, information_schema>.PrimaryKeys() Immutable<STATISTICS, information_schema>.HasPrimaryKeysSet() Immutable<STATISTICS, information_schema>.GetRowData() Immutable<STATISTICS, information_schema>.GetValues() Immutable<STATISTICS, information_schema>.GetValues(IEnumerable<ColumnDefinition>) Immutable<STATISTICS, information_schema>.ClearLazy() Immutable<STATISTICS, information_schema>.GetLazy<V>(string, Func<V>) Immutable<STATISTICS, information_schema>.GetImmutableForeignKey<V>(string) Immutable<STATISTICS, information_schema>.GetImmutableRelation<V>(string) Immutable<STATISTICS, information_schema>.GetValue(string) Immutable<STATISTICS, information_schema>.GetNullableValue(string) Immutable<STATISTICS, information_schema>.GetForeignKey<V>(string) Immutable<STATISTICS, information_schema>.GetRelation<V>(string) Immutable<STATISTICS, information_schema>.GetRelation<V>(RelationProperty) Immutable<STATISTICS, information_schema>.GetDataSource() Immutable<STATISTICS, information_schema>.Equals(Immutable<STATISTICS, information_schema>?) Immutable<STATISTICS, information_schema>.Equals(object?) Immutable<STATISTICS, information_schema>.GetHashCode() object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Extension Methods IModelExtensions.Delete<STATISTICS>(STATISTICS) IModelExtensions.Delete<STATISTICS>(STATISTICS, Transaction) Constructors STATISTICS(RowData, DataSourceAccess) protected STATISTICS(RowData rowData, DataSourceAccess dataSource) Parameters rowData RowData dataSource DataSourceAccess Properties CARDINALITY [Nullable] [Type(DatabaseType.MySQL, \"bigint\", 21)] [Column(\"CARDINALITY\")] public abstract long? CARDINALITY { get; } Property Value long? COLLATION [Nullable] [Type(DatabaseType.MySQL, \"varchar\", 1)] [Column(\"COLLATION\")] public abstract string? COLLATION { get; } Property Value string? COLUMN_NAME [Type(DatabaseType.MySQL, \"varchar\", 64)] [Column(\"COLUMN_NAME\")] public abstract string COLUMN_NAME { get; } Property Value string COMMENT [Nullable] [Type(DatabaseType.MySQL, \"varchar\", 16)] [Column(\"COMMENT\")] public abstract string? COMMENT { get; } Property Value string? INDEX_COMMENT [Type(DatabaseType.MySQL, \"varchar\", 1024)] [Column(\"INDEX_COMMENT\")] public abstract string INDEX_COMMENT { get; } Property Value string INDEX_NAME [Type(DatabaseType.MySQL, \"varchar\", 64)] [Column(\"INDEX_NAME\")] public abstract string INDEX_NAME { get; } Property Value string INDEX_SCHEMA [Type(DatabaseType.MySQL, \"varchar\", 64)] [Column(\"INDEX_SCHEMA\")] public abstract string INDEX_SCHEMA { get; } Property Value string INDEX_TYPE [Type(DatabaseType.MySQL, \"varchar\", 16)] [Column(\"INDEX_TYPE\")] public abstract string INDEX_TYPE { get; } Property Value string NON_UNIQUE [Type(DatabaseType.MySQL, \"bigint\", 1)] [Column(\"NON_UNIQUE\")] public abstract long NON_UNIQUE { get; } Property Value long NULLABLE [Type(DatabaseType.MySQL, \"varchar\", 3)] [Column(\"NULLABLE\")] public abstract string NULLABLE { get; } Property Value string PACKED [Nullable] [Type(DatabaseType.MySQL, \"varchar\", 10)] [Column(\"PACKED\")] public abstract string? PACKED { get; } Property Value string? SEQ_IN_INDEX [Type(DatabaseType.MySQL, \"bigint\", 2)] [Column(\"SEQ_IN_INDEX\")] public abstract long SEQ_IN_INDEX { get; } Property Value long SUB_PART [Nullable] [Type(DatabaseType.MySQL, \"bigint\", 3)] [Column(\"SUB_PART\")] public abstract long? SUB_PART { get; } Property Value long? TABLE_CATALOG [Type(DatabaseType.MySQL, \"varchar\", 512)] [Column(\"TABLE_CATALOG\")] public abstract string TABLE_CATALOG { get; } Property Value string TABLE_NAME [Type(DatabaseType.MySQL, \"varchar\", 64)] [Column(\"TABLE_NAME\")] public abstract string TABLE_NAME { get; } Property Value string TABLE_SCHEMA [Type(DatabaseType.MySQL, \"varchar\", 64)] [Column(\"TABLE_SCHEMA\")] public abstract string TABLE_SCHEMA { get; } Property Value string"
  },
  "api/DataLinq.MySql.Models.TABLES.html": {
    "href": "api/DataLinq.MySql.Models.TABLES.html",
    "title": "Class TABLES | DataLinq",
    "summary": "Class TABLES Namespace DataLinq.MySql.Models Assembly DataLinq.MySql.dll [Definition(\"\")] [View(\"TABLES\")] public abstract class TABLES : Immutable<TABLES, information_schema>, IImmutable<TABLES>, IImmutableInstance<information_schema>, IImmutableInstance, IModelInstance<information_schema>, IModelInstance, IEquatable<Immutable<TABLES, information_schema>>, IViewModel<information_schema>, IModel<information_schema>, IModel Inheritance object Immutable<TABLES, information_schema> TABLES Implements IImmutable<TABLES> IImmutableInstance<information_schema> IImmutableInstance IModelInstance<information_schema> IModelInstance IEquatable<Immutable<TABLES, information_schema>> IViewModel<information_schema> IModel<information_schema> IModel Inherited Members Immutable<TABLES, information_schema>.relationKeys Immutable<TABLES, information_schema>.lazyValues Immutable<TABLES, information_schema>.this[ColumnDefinition] Immutable<TABLES, information_schema>.this[string] Immutable<TABLES, information_schema>.Metadata() Immutable<TABLES, information_schema>.PrimaryKeys() Immutable<TABLES, information_schema>.HasPrimaryKeysSet() Immutable<TABLES, information_schema>.GetRowData() Immutable<TABLES, information_schema>.GetValues() Immutable<TABLES, information_schema>.GetValues(IEnumerable<ColumnDefinition>) Immutable<TABLES, information_schema>.ClearLazy() Immutable<TABLES, information_schema>.GetLazy<V>(string, Func<V>) Immutable<TABLES, information_schema>.GetImmutableForeignKey<V>(string) Immutable<TABLES, information_schema>.GetImmutableRelation<V>(string) Immutable<TABLES, information_schema>.GetValue(string) Immutable<TABLES, information_schema>.GetNullableValue(string) Immutable<TABLES, information_schema>.GetForeignKey<V>(string) Immutable<TABLES, information_schema>.GetRelation<V>(string) Immutable<TABLES, information_schema>.GetRelation<V>(RelationProperty) Immutable<TABLES, information_schema>.GetDataSource() Immutable<TABLES, information_schema>.Equals(Immutable<TABLES, information_schema>?) Immutable<TABLES, information_schema>.Equals(object?) Immutable<TABLES, information_schema>.GetHashCode() object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Extension Methods IModelExtensions.Delete<TABLES>(TABLES) IModelExtensions.Delete<TABLES>(TABLES, Transaction) Constructors TABLES(RowData, DataSourceAccess) protected TABLES(RowData rowData, DataSourceAccess dataSource) Parameters rowData RowData dataSource DataSourceAccess Properties AUTO_INCREMENT [Nullable] [Type(DatabaseType.MySQL, \"bigint\", 21, false)] [Column(\"AUTO_INCREMENT\")] public abstract long? AUTO_INCREMENT { get; } Property Value long? AVG_ROW_LENGTH [Nullable] [Type(DatabaseType.MySQL, \"bigint\", 21, false)] [Column(\"AVG_ROW_LENGTH\")] public abstract long? AVG_ROW_LENGTH { get; } Property Value long? CHECKSUM [Nullable] [Type(DatabaseType.MySQL, \"bigint\", 21, false)] [Column(\"CHECKSUM\")] public abstract long? CHECKSUM { get; } Property Value long? CHECK_TIME [Nullable] [Type(DatabaseType.MySQL, \"datetime\")] [Column(\"CHECK_TIME\")] public abstract DateTime? CHECK_TIME { get; } Property Value DateTime? CREATE_OPTIONS [Nullable] [Type(DatabaseType.MySQL, \"varchar\", 2048)] [Column(\"CREATE_OPTIONS\")] public abstract string? CREATE_OPTIONS { get; } Property Value string? CREATE_TIME [Nullable] [Type(DatabaseType.MySQL, \"datetime\")] [Column(\"CREATE_TIME\")] public abstract DateTime? CREATE_TIME { get; } Property Value DateTime? DATA_FREE [Nullable] [Type(DatabaseType.MySQL, \"bigint\", 21, false)] [Column(\"DATA_FREE\")] public abstract long? DATA_FREE { get; } Property Value long? DATA_LENGTH [Nullable] [Type(DatabaseType.MySQL, \"bigint\", 21, false)] [Column(\"DATA_LENGTH\")] public abstract long? DATA_LENGTH { get; } Property Value long? ENGINE [Nullable] [Type(DatabaseType.MySQL, \"varchar\", 64)] [Column(\"ENGINE\")] public abstract string? ENGINE { get; } Property Value string? INDEX_LENGTH [Nullable] [Type(DatabaseType.MySQL, \"bigint\", 21, false)] [Column(\"INDEX_LENGTH\")] public abstract long? INDEX_LENGTH { get; } Property Value long? MAX_DATA_LENGTH [Nullable] [Type(DatabaseType.MySQL, \"bigint\", 21, false)] [Column(\"MAX_DATA_LENGTH\")] public abstract long? MAX_DATA_LENGTH { get; } Property Value long? MAX_INDEX_LENGTH [Nullable] [Type(DatabaseType.MySQL, \"bigint\", 21, false)] [Column(\"MAX_INDEX_LENGTH\")] public abstract long? MAX_INDEX_LENGTH { get; } Property Value long? ROW_FORMAT [Nullable] [Type(DatabaseType.MySQL, \"varchar\", 10)] [Column(\"ROW_FORMAT\")] public abstract string? ROW_FORMAT { get; } Property Value string? TABLE_CATALOG [Type(DatabaseType.MySQL, \"varchar\", 512)] [Column(\"TABLE_CATALOG\")] public abstract string TABLE_CATALOG { get; } Property Value string TABLE_COLLATION [Nullable] [Type(DatabaseType.MySQL, \"varchar\", 32)] [Column(\"TABLE_COLLATION\")] public abstract string? TABLE_COLLATION { get; } Property Value string? TABLE_COMMENT [Type(DatabaseType.MySQL, \"varchar\", 2048)] [Column(\"TABLE_COMMENT\")] public abstract string TABLE_COMMENT { get; } Property Value string TABLE_NAME [Type(DatabaseType.MySQL, \"varchar\", 64)] [Column(\"TABLE_NAME\")] public abstract string TABLE_NAME { get; } Property Value string TABLE_ROWS [Nullable] [Type(DatabaseType.MySQL, \"bigint\", 21, false)] [Column(\"TABLE_ROWS\")] public abstract long? TABLE_ROWS { get; } Property Value long? TABLE_SCHEMA [Type(DatabaseType.MySQL, \"varchar\", 64)] [Column(\"TABLE_SCHEMA\")] public abstract string TABLE_SCHEMA { get; } Property Value string TABLE_TYPE [Type(DatabaseType.MySQL, \"varchar\", 64)] [Column(\"TABLE_TYPE\")] public abstract string TABLE_TYPE { get; } Property Value string TEMPORARY [Nullable] [Type(DatabaseType.MySQL, \"varchar\", 1)] [Column(\"TEMPORARY\")] public abstract string? TEMPORARY { get; } Property Value string? UPDATE_TIME [Nullable] [Type(DatabaseType.MySQL, \"datetime\")] [Column(\"UPDATE_TIME\")] public abstract DateTime? UPDATE_TIME { get; } Property Value DateTime? VERSION [Nullable] [Type(DatabaseType.MySQL, \"bigint\", 21, false)] [Column(\"VERSION\")] public abstract long? VERSION { get; } Property Value long?"
  },
  "api/DataLinq.MySql.Models.VIEWS.html": {
    "href": "api/DataLinq.MySql.Models.VIEWS.html",
    "title": "Class VIEWS | DataLinq",
    "summary": "Class VIEWS Namespace DataLinq.MySql.Models Assembly DataLinq.MySql.dll [Definition(\"\")] [View(\"VIEWS\")] public abstract class VIEWS : Immutable<VIEWS, information_schema>, IImmutable<VIEWS>, IImmutableInstance<information_schema>, IImmutableInstance, IModelInstance<information_schema>, IModelInstance, IEquatable<Immutable<VIEWS, information_schema>>, IViewModel<information_schema>, IModel<information_schema>, IModel Inheritance object Immutable<VIEWS, information_schema> VIEWS Implements IImmutable<VIEWS> IImmutableInstance<information_schema> IImmutableInstance IModelInstance<information_schema> IModelInstance IEquatable<Immutable<VIEWS, information_schema>> IViewModel<information_schema> IModel<information_schema> IModel Inherited Members Immutable<VIEWS, information_schema>.relationKeys Immutable<VIEWS, information_schema>.lazyValues Immutable<VIEWS, information_schema>.this[ColumnDefinition] Immutable<VIEWS, information_schema>.this[string] Immutable<VIEWS, information_schema>.Metadata() Immutable<VIEWS, information_schema>.PrimaryKeys() Immutable<VIEWS, information_schema>.HasPrimaryKeysSet() Immutable<VIEWS, information_schema>.GetRowData() Immutable<VIEWS, information_schema>.GetValues() Immutable<VIEWS, information_schema>.GetValues(IEnumerable<ColumnDefinition>) Immutable<VIEWS, information_schema>.ClearLazy() Immutable<VIEWS, information_schema>.GetLazy<V>(string, Func<V>) Immutable<VIEWS, information_schema>.GetImmutableForeignKey<V>(string) Immutable<VIEWS, information_schema>.GetImmutableRelation<V>(string) Immutable<VIEWS, information_schema>.GetValue(string) Immutable<VIEWS, information_schema>.GetNullableValue(string) Immutable<VIEWS, information_schema>.GetForeignKey<V>(string) Immutable<VIEWS, information_schema>.GetRelation<V>(string) Immutable<VIEWS, information_schema>.GetRelation<V>(RelationProperty) Immutable<VIEWS, information_schema>.GetDataSource() Immutable<VIEWS, information_schema>.Equals(Immutable<VIEWS, information_schema>?) Immutable<VIEWS, information_schema>.Equals(object?) Immutable<VIEWS, information_schema>.GetHashCode() object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Extension Methods IModelExtensions.Delete<VIEWS>(VIEWS) IModelExtensions.Delete<VIEWS>(VIEWS, Transaction) Constructors VIEWS(RowData, DataSourceAccess) protected VIEWS(RowData rowData, DataSourceAccess dataSource) Parameters rowData RowData dataSource DataSourceAccess Properties ALGORITHM [Type(DatabaseType.MySQL, \"varchar\", 10)] [Column(\"ALGORITHM\")] public abstract string ALGORITHM { get; } Property Value string CHARACTER_SET_CLIENT [Type(DatabaseType.MySQL, \"varchar\", 32)] [Column(\"CHARACTER_SET_CLIENT\")] public abstract string CHARACTER_SET_CLIENT { get; } Property Value string CHECK_OPTION [Type(DatabaseType.MySQL, \"varchar\", 8)] [Column(\"CHECK_OPTION\")] public abstract string CHECK_OPTION { get; } Property Value string COLLATION_CONNECTION [Type(DatabaseType.MySQL, \"varchar\", 32)] [Column(\"COLLATION_CONNECTION\")] public abstract string COLLATION_CONNECTION { get; } Property Value string DEFINER [Type(DatabaseType.MySQL, \"varchar\", 189)] [Column(\"DEFINER\")] public abstract string DEFINER { get; } Property Value string IS_UPDATABLE [Type(DatabaseType.MySQL, \"varchar\", 3)] [Column(\"IS_UPDATABLE\")] public abstract string IS_UPDATABLE { get; } Property Value string SECURITY_TYPE [Type(DatabaseType.MySQL, \"varchar\", 7)] [Column(\"SECURITY_TYPE\")] public abstract string SECURITY_TYPE { get; } Property Value string TABLE_CATALOG [Type(DatabaseType.MySQL, \"varchar\", 512)] [Column(\"TABLE_CATALOG\")] public abstract string TABLE_CATALOG { get; } Property Value string TABLE_NAME [Type(DatabaseType.MySQL, \"varchar\", 64)] [Column(\"TABLE_NAME\")] public abstract string TABLE_NAME { get; } Property Value string TABLE_SCHEMA [Type(DatabaseType.MySQL, \"varchar\", 64)] [Column(\"TABLE_SCHEMA\")] public abstract string TABLE_SCHEMA { get; } Property Value string VIEW_DEFINITION [Type(DatabaseType.MySQL, \"longtext\", 4294967295)] [Column(\"VIEW_DEFINITION\")] public abstract string VIEW_DEFINITION { get; } Property Value string"
  },
  "api/DataLinq.MySql.Models.html": {
    "href": "api/DataLinq.MySql.Models.html",
    "title": "Namespace DataLinq.MySql.Models | DataLinq",
    "summary": "Namespace DataLinq.MySql.Models Classes COLUMNS KEY_COLUMN_USAGE STATISTICS TABLES VIEWS information_schema"
  },
  "api/DataLinq.MySql.Models.information_schema.html": {
    "href": "api/DataLinq.MySql.Models.information_schema.html",
    "title": "Class information_schema | DataLinq",
    "summary": "Class information_schema Namespace DataLinq.MySql.Models Assembly DataLinq.MySql.dll [Database(\"information_schema\")] public class information_schema : IDatabaseModel Inheritance object information_schema Implements IDatabaseModel Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors information_schema(DataSourceAccess) public information_schema(DataSourceAccess dataSource) Parameters dataSource DataSourceAccess Properties COLUMNS public DbRead<COLUMNS> COLUMNS { get; } Property Value DbRead<COLUMNS> KEY_COLUMN_USAGE public DbRead<KEY_COLUMN_USAGE> KEY_COLUMN_USAGE { get; } Property Value DbRead<KEY_COLUMN_USAGE> STATISTICS public DbRead<STATISTICS> STATISTICS { get; } Property Value DbRead<STATISTICS> TABLES public DbRead<TABLES> TABLES { get; } Property Value DbRead<TABLES> VIEWS public DbRead<VIEWS> VIEWS { get; } Property Value DbRead<VIEWS>"
  },
  "api/DataLinq.MySql.MySQLProvider-1.html": {
    "href": "api/DataLinq.MySql.MySQLProvider-1.html",
    "title": "Class MySQLProvider<T> | DataLinq",
    "summary": "Class MySQLProvider<T> Namespace DataLinq.MySql Assembly DataLinq.MySql.dll public class MySQLProvider<T> : DatabaseProvider<T>, IDatabaseProvider, IDisposable where T : class, IDatabaseModel Type Parameters T Inheritance object DatabaseProvider DatabaseProvider<T> MySQLProvider<T> Implements IDatabaseProvider IDisposable Inherited Members DatabaseProvider<T>.TypedReadOnlyAccess DatabaseProvider.DatabaseName DatabaseProvider.CsModelType DatabaseProvider.DatabaseType DatabaseProvider.LoggingConfiguration DatabaseProvider.Constants DatabaseProvider.ConnectionString DatabaseProvider.DatabaseAccess DatabaseProvider.ReadOnlyAccess DatabaseProvider.Metadata DatabaseProvider.State DatabaseProvider.GetTableCache(TableDefinition) DatabaseProvider.StartTransaction(TransactionType) DatabaseProvider.Commit<M>(Func<Transaction, M>) DatabaseProvider.Commit(Action<Transaction>) DatabaseProvider.AttachTransaction(IDbTransaction, TransactionType) DatabaseProvider.ToDbCommand(IQuery) DatabaseProvider.GetLastIdQuery() DatabaseProvider.GetParameter(Sql, string, object?) DatabaseProvider.GetParameterValue(Sql, string) DatabaseProvider.GetParameterComparison(Sql, string, Relation, string[]) DatabaseProvider.GetLimitOffset(Sql, int?, int?) DatabaseProvider.GetTableName(Sql, string, string?) DatabaseProvider.GetCreateSql() DatabaseProvider.GetNewDatabaseTransaction(TransactionType) DatabaseProvider.AttachDatabaseTransaction(IDbTransaction, TransactionType) DatabaseProvider.DatabaseExists(string?) DatabaseProvider.FileOrServerExists() DatabaseProvider.GetWriter() DatabaseProvider.Dispose() object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors MySQLProvider(string) public MySQLProvider(string connectionString) Parameters connectionString string MySQLProvider(string, DataLinqLoggingConfiguration) public MySQLProvider(string connectionString, DataLinqLoggingConfiguration loggingConfiguration) Parameters connectionString string loggingConfiguration DataLinqLoggingConfiguration MySQLProvider(string, string?) public MySQLProvider(string connectionString, string? databaseName) Parameters connectionString string databaseName string? MySQLProvider(string, string?, DataLinqLoggingConfiguration) public MySQLProvider(string connectionString, string? databaseName, DataLinqLoggingConfiguration loggingConfiguration) Parameters connectionString string databaseName string? loggingConfiguration DataLinqLoggingConfiguration Properties Constants public override IDatabaseProviderConstants Constants { get; } Property Value IDatabaseProviderConstants DatabaseAccess public override DatabaseAccess DatabaseAccess { get; } Property Value DatabaseAccess Methods AttachDatabaseTransaction(IDbTransaction, TransactionType) public override DatabaseTransaction AttachDatabaseTransaction(IDbTransaction dbTransaction, TransactionType type) Parameters dbTransaction IDbTransaction type TransactionType Returns DatabaseTransaction DatabaseExists(string?) public override bool DatabaseExists(string? databaseName = null) Parameters databaseName string? Returns bool FileOrServerExists() public override bool FileOrServerExists() Returns bool GetCreateSql() public override Sql GetCreateSql() Returns Sql GetLastIdQuery() public override string GetLastIdQuery() Returns string GetLimitOffset(Sql, int?, int?) public override Sql GetLimitOffset(Sql sql, int? limit, int? offset) Parameters sql Sql limit int? offset int? Returns Sql GetNewDatabaseTransaction(TransactionType) public override DatabaseTransaction GetNewDatabaseTransaction(TransactionType type) Parameters type TransactionType Returns DatabaseTransaction GetParameter(Sql, string, object?) public override Sql GetParameter(Sql sql, string key, object? value) Parameters sql Sql key string value object? Returns Sql GetParameterComparison(Sql, string, Relation, string[]) public override Sql GetParameterComparison(Sql sql, string field, Relation relation, string[] key) Parameters sql Sql field string relation Relation key string[] Returns Sql GetParameterValue(Sql, string) public override Sql GetParameterValue(Sql sql, string key) Parameters sql Sql key string Returns Sql GetTableName(Sql, string, string?) public override Sql GetTableName(Sql sql, string tableName, string? alias = null) Parameters sql Sql tableName string alias string? Returns Sql GetWriter() public override IDataLinqDataWriter GetWriter() Returns IDataLinqDataWriter ToDbCommand(IQuery) public override IDbCommand ToDbCommand(IQuery query) Parameters query IQuery Returns IDbCommand"
  },
  "api/DataLinq.MySql.MySQLProvider.html": {
    "href": "api/DataLinq.MySql.MySQLProvider.html",
    "title": "Class MySQLProvider | DataLinq",
    "summary": "Class MySQLProvider Namespace DataLinq.MySql Assembly DataLinq.MySql.dll public class MySQLProvider : IDatabaseProviderRegister Inheritance object MySQLProvider Implements IDatabaseProviderRegister Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Properties HasBeenRegistered public static bool HasBeenRegistered { get; } Property Value bool Methods RegisterProvider() public static void RegisterProvider()"
  },
  "api/DataLinq.MySql.MySQLProviderConstants.html": {
    "href": "api/DataLinq.MySql.MySQLProviderConstants.html",
    "title": "Class MySQLProviderConstants | DataLinq",
    "summary": "Class MySQLProviderConstants Namespace DataLinq.MySql Assembly DataLinq.MySql.dll public class MySQLProviderConstants : IDatabaseProviderConstants Inheritance object MySQLProviderConstants Implements IDatabaseProviderConstants Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Properties EscapeCharacter public string EscapeCharacter { get; } Property Value string LastInsertCommand public string LastInsertCommand { get; } Property Value string ParameterSign public string ParameterSign { get; } Property Value string SupportsMultipleDatabases public bool SupportsMultipleDatabases { get; } Property Value bool"
  },
  "api/DataLinq.MySql.MySqlDataLinqDataReader.html": {
    "href": "api/DataLinq.MySql.MySqlDataLinqDataReader.html",
    "title": "Struct MySqlDataLinqDataReader | DataLinq",
    "summary": "Struct MySqlDataLinqDataReader Namespace DataLinq.MySql Assembly DataLinq.MySql.dll public struct MySqlDataLinqDataReader : IDataLinqDataReader, IDisposable Implements IDataLinqDataReader IDisposable Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.ReferenceEquals(object?, object?) object.ToString() Constructors MySqlDataLinqDataReader(MySqlDataReader) public MySqlDataLinqDataReader(MySqlDataReader dataReader) Parameters dataReader MySqlDataReader Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() GetBoolean(int) public bool GetBoolean(int ordinal) Parameters ordinal int Returns bool GetByteLength(int) public long GetByteLength(int ordinal) Parameters ordinal int Returns long GetBytes(int) public byte[]? GetBytes(int ordinal) Parameters ordinal int Returns byte[]? GetBytes(int, Span<byte>) public long GetBytes(int ordinal, Span<byte> buffer) Parameters ordinal int buffer Span<byte> Returns long GetDateOnly(int) public DateOnly GetDateOnly(int ordinal) Parameters ordinal int Returns DateOnly GetGuid(int) public Guid GetGuid(int ordinal) Parameters ordinal int Returns Guid GetInt32(int) public int GetInt32(int ordinal) Parameters ordinal int Returns int GetOrdinal(string) public int GetOrdinal(string name) Parameters name string Returns int GetString(int) public string GetString(int ordinal) Parameters ordinal int Returns string GetValue(int) public object GetValue(int ordinal) Parameters ordinal int Returns object GetValue<T>(ColumnDefinition) public T? GetValue<T>(ColumnDefinition column) Parameters column ColumnDefinition Returns T? Type Parameters T GetValue<T>(ColumnDefinition, int) public T? GetValue<T>(ColumnDefinition column, int ordinal) Parameters column ColumnDefinition ordinal int Returns T? Type Parameters T IsDbNull(int) public bool IsDbNull(int ordinal) Parameters ordinal int Returns bool ReadNextRow() public bool ReadNextRow() Returns bool"
  },
  "api/DataLinq.MySql.MySqlDataLinqDataWriter.html": {
    "href": "api/DataLinq.MySql.MySqlDataLinqDataWriter.html",
    "title": "Class MySqlDataLinqDataWriter | DataLinq",
    "summary": "Class MySqlDataLinqDataWriter Namespace DataLinq.MySql Assembly DataLinq.MySql.dll Represents a data writer for MySql database. public class MySqlDataLinqDataWriter : IDataLinqDataWriter Inheritance object MySqlDataLinqDataWriter Implements IDataLinqDataWriter Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Extension Methods DataWriter.ConvertColumnValue(IDataLinqDataWriter, ColumnDefinition, object?) Constructors MySqlDataLinqDataWriter() Initializes a new instance of the DataLinq.MySql.MySqlDataLinqDataWriter class. public MySqlDataLinqDataWriter() Methods ConvertValue(ColumnDefinition, object?) Converts the specified value to the appropriate type for the specified column. public object? ConvertValue(ColumnDefinition column, object? value) Parameters column ColumnDefinition The column metadata. value object? The value to convert. Returns object? The converted value."
  },
  "api/DataLinq.MySql.MySqlDatabase-1.html": {
    "href": "api/DataLinq.MySql.MySqlDatabase-1.html",
    "title": "Class MySqlDatabase<T> | DataLinq",
    "summary": "Class MySqlDatabase<T> Namespace DataLinq.MySql Assembly DataLinq.MySql.dll Represents a MySQL database provider specific to a given database model type. public class MySqlDatabase<T> : Database<T>, IDisposable where T : class, IDatabaseModel Type Parameters T The type of the database model. Inheritance object Database<T> MySqlDatabase<T> Implements IDisposable Inherited Members Database<T>.DatabaseType Database<T>.Provider Database<T>.FileOrServerExists() Database<T>.Exists(string?) Database<T>.Transaction(TransactionType) Database<T>.AttachTransaction(IDbTransaction, TransactionType) Database<T>.Query() Database<T>.From(string, string?) Database<T>.From(TableDefinition, string?) Database<T>.From<V>() Database<T>.Get<M>(IKey) Database<T>.Insert<M>(Mutable<M>, TransactionType) Database<T>.Update<M>(Mutable<M>, TransactionType) Database<T>.Save<M>(Mutable<M>, TransactionType) Database<T>.Delete<M>(M, TransactionType) Database<T>.Commit(Action<Transaction>, TransactionType) Database<T>.Commit<M>(Func<Transaction, M>, TransactionType) Database<T>.Dispose() object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors MySqlDatabase(string) Initializes a new instance of the MySqlDatabase with the specified connection string. public MySqlDatabase(string connectionString) Parameters connectionString string The connection string for the MySQL database. MySqlDatabase(string, ILoggerFactory?) Initializes a new instance of the MySqlDatabase with the specified connection string and logger factory. public MySqlDatabase(string connectionString, ILoggerFactory? loggerFactory) Parameters connectionString string The connection string for the MySQL database. loggerFactory ILoggerFactory? The logger factory to use for logging. MySqlDatabase(string, string) Initializes a new instance of the MySqlDatabase with the specified connection string and database name. public MySqlDatabase(string connectionString, string databaseName) Parameters connectionString string The connection string for the MySQL database. databaseName string The name of the database. MySqlDatabase(string, string, ILoggerFactory?) Initializes a new instance of the MySqlDatabase with the specified connection string, database name and logger factory. public MySqlDatabase(string connectionString, string databaseName, ILoggerFactory? loggerFactory) Parameters connectionString string The connection string for the MySQL database. databaseName string The name of the database. loggerFactory ILoggerFactory? The logger factory to use for logging."
  },
  "api/DataLinq.MySql.MySqlDatabaseCreator.html": {
    "href": "api/DataLinq.MySql.MySqlDatabaseCreator.html",
    "title": "Class MySqlDatabaseCreator | DataLinq",
    "summary": "Class MySqlDatabaseCreator Namespace DataLinq.MySql Assembly DataLinq.MySql.dll Factory for creating instances of MySQL database providers. public class MySqlDatabaseCreator : IDatabaseProviderCreator Inheritance object MySqlDatabaseCreator Implements IDatabaseProviderCreator Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Methods IsDatabaseType(string) Determines if the provided type name corresponds to a MySQL or MariaDB database type. public bool IsDatabaseType(string typeName) Parameters typeName string The name of the database type to check. Returns bool true if typeName is either 'mysql' or 'mariadb'; otherwise, false. UseLoggerFactory(ILoggerFactory?) public MySqlDatabaseCreator UseLoggerFactory(ILoggerFactory? loggerFactory) Parameters loggerFactory ILoggerFactory? Returns MySqlDatabaseCreator"
  },
  "api/DataLinq.MySql.MySqlDatabaseTransaction.html": {
    "href": "api/DataLinq.MySql.MySqlDatabaseTransaction.html",
    "title": "Class MySqlDatabaseTransaction | DataLinq",
    "summary": "Class MySqlDatabaseTransaction Namespace DataLinq.MySql Assembly DataLinq.MySql.dll Represents a transaction for a MySQL database, encapsulating the logic to execute commands with transactional support. public class MySqlDatabaseTransaction : DatabaseTransaction, IDisposable Inheritance object DatabaseAccess DatabaseTransaction MySqlDatabaseTransaction Implements IDisposable Inherited Members DatabaseTransaction.Status DatabaseTransaction.OnStatusChanged DatabaseTransaction.DbTransaction DatabaseTransaction.Type DatabaseTransaction.SetStatus(DatabaseTransactionStatus) DatabaseTransaction.Rollback() DatabaseTransaction.Commit() DatabaseTransaction.Dispose() DatabaseAccess.ExecuteReader(IDbCommand) DatabaseAccess.ExecuteReader(string) DatabaseAccess.ExecuteScalar(IDbCommand) DatabaseAccess.ExecuteScalar<T>(IDbCommand) DatabaseAccess.ExecuteScalar(string) DatabaseAccess.ExecuteScalar<T>(string) DatabaseAccess.ExecuteNonQuery(IDbCommand) DatabaseAccess.ExecuteNonQuery(string) DatabaseAccess.ReadReader(IDbCommand) DatabaseAccess.ReadReader(string) object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors MySqlDatabaseTransaction(MySqlDataSource, TransactionType, string, DataLinqLoggingConfiguration) Initializes a new instance of the MySqlDatabaseTransaction class with the specified connection string and transaction type. public MySqlDatabaseTransaction(MySqlDataSource dataSource, TransactionType type, string databaseName, DataLinqLoggingConfiguration loggingConfiguration) Parameters dataSource MySqlDataSource type TransactionType The type of transaction to be performed. databaseName string loggingConfiguration DataLinqLoggingConfiguration MySqlDatabaseTransaction(IDbTransaction, TransactionType, string, DataLinqLoggingConfiguration) Initializes a new instance of the MySqlDatabaseTransaction class with the specified database transaction and transaction type. Ensures that the provided transaction is valid and the connection is open. public MySqlDatabaseTransaction(IDbTransaction dbTransaction, TransactionType type, string databaseName, DataLinqLoggingConfiguration loggingConfiguration) Parameters dbTransaction IDbTransaction The existing database transaction. type TransactionType The type of transaction to be performed. databaseName string loggingConfiguration DataLinqLoggingConfiguration Methods Commit() Commits the transaction, ensuring it is open before attempting to commit. public override void Commit() Dispose() Releases all resources used by the MySqlDatabaseTransaction, rolling back the transaction if it is still open. public override void Dispose() ExecuteNonQuery(IDbCommand) Executes a non-query SQL command within the context of the transaction. public override int ExecuteNonQuery(IDbCommand command) Parameters command IDbCommand The command to execute. Returns int The number of rows affected. ExecuteNonQuery(string) Executes a SQL command with a non-query statement such as INSERT, UPDATE, or DELETE. public override int ExecuteNonQuery(string query) Parameters query string The SQL query string to execute. Returns int The number of rows affected by the command. ExecuteReader(string) Executes a SQL command that returns a result set, such as a SELECT query. public override IDataLinqDataReader ExecuteReader(string query) Parameters query string The SQL query string to execute. Returns IDataLinqDataReader An IDataLinqDataReader that can be used to read the returned data. ExecuteReader(IDbCommand) Close this reader when done! (or use a using-statement) public override IDataLinqDataReader ExecuteReader(IDbCommand command) Parameters command IDbCommand Returns IDataLinqDataReader ExecuteScalar(string) Executes a SQL command that returns a single value, such as a COUNT or MAX. public override object? ExecuteScalar(string query) Parameters query string The SQL query string to execute. Returns object? The first column of the first row in the result set returned by the query. ExecuteScalar<T>(string) Executes a SQL command that returns a single value of type T. public override T ExecuteScalar<T>(string query) Parameters query string The SQL query string to execute. Returns T The result cast to the type T, or default(T) if the result is DBNull or null. Type Parameters T The expected return type of the scalar result. ExecuteScalar<T>(IDbCommand) Executes a SQL command that returns a single value of type T, using the provided IDbCommand. public override T ExecuteScalar<T>(IDbCommand command) Parameters command IDbCommand The IDbCommand to execute. Returns T The result cast to the type T, or default(T) if the result is DBNull or null. Type Parameters T The expected return type of the scalar result. ExecuteScalar(IDbCommand) Executes a SQL command that returns a single value, using the provided IDbCommand. public override object? ExecuteScalar(IDbCommand command) Parameters command IDbCommand The IDbCommand to execute. Returns object? The first column of the first row in the result set returned by the command, or null if the result is DBNull. Rollback() Rolls back the transaction, ensuring it is open before attempting to roll back. public override void Rollback()"
  },
  "api/DataLinq.MySql.MySqlDbAccess.html": {
    "href": "api/DataLinq.MySql.MySqlDbAccess.html",
    "title": "Class MySqlDbAccess | DataLinq",
    "summary": "Class MySqlDbAccess Namespace DataLinq.MySql Assembly DataLinq.MySql.dll public class MySqlDbAccess : DatabaseAccess Inheritance object DatabaseAccess MySqlDbAccess Inherited Members DatabaseAccess.ExecuteReader(IDbCommand) DatabaseAccess.ExecuteReader(string) DatabaseAccess.ExecuteScalar(IDbCommand) DatabaseAccess.ExecuteScalar<T>(IDbCommand) DatabaseAccess.ExecuteScalar(string) DatabaseAccess.ExecuteScalar<T>(string) DatabaseAccess.ExecuteNonQuery(IDbCommand) DatabaseAccess.ExecuteNonQuery(string) DatabaseAccess.ReadReader(IDbCommand) DatabaseAccess.ReadReader(string) object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors MySqlDbAccess(MySqlDataSource, DataLinqLoggingConfiguration) public MySqlDbAccess(MySqlDataSource dataSource, DataLinqLoggingConfiguration loggingConfiguration) Parameters dataSource MySqlDataSource loggingConfiguration DataLinqLoggingConfiguration Methods ExecuteNonQuery(IDbCommand) public override int ExecuteNonQuery(IDbCommand command) Parameters command IDbCommand Returns int ExecuteNonQuery(string) public override int ExecuteNonQuery(string query) Parameters query string Returns int ExecuteReader(IDbCommand) public override IDataLinqDataReader ExecuteReader(IDbCommand command) Parameters command IDbCommand Returns IDataLinqDataReader ExecuteReader(string) public override IDataLinqDataReader ExecuteReader(string query) Parameters query string Returns IDataLinqDataReader ExecuteScalar(string) public override object? ExecuteScalar(string query) Parameters query string Returns object? ExecuteScalar<T>(string) public override T ExecuteScalar<T>(string query) Parameters query string Returns T Type Parameters T ExecuteScalar<T>(IDbCommand) public override T ExecuteScalar<T>(IDbCommand command) Parameters command IDbCommand Returns T Type Parameters T ExecuteScalar(IDbCommand) public override object? ExecuteScalar(IDbCommand command) Parameters command IDbCommand Returns object?"
  },
  "api/DataLinq.MySql.SqlFromMetadataFactory.html": {
    "href": "api/DataLinq.MySql.SqlFromMetadataFactory.html",
    "title": "Class SqlFromMetadataFactory | DataLinq",
    "summary": "Class SqlFromMetadataFactory Namespace DataLinq.MySql Assembly DataLinq.MySql.dll public class SqlFromMetadataFactory : ISqlFromMetadataFactory Inheritance object SqlFromMetadataFactory Implements ISqlFromMetadataFactory Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Methods CreateDatabase(Sql, string, string, bool) public Option<int, IDLOptionFailure> CreateDatabase(Sql sql, string databaseName, string connectionString, bool foreignKeyRestrict) Parameters sql Sql databaseName string connectionString string foreignKeyRestrict bool Returns Option<int, IDLOptionFailure> GetCreateTables(DatabaseDefinition, bool) public Option<Sql, IDLOptionFailure> GetCreateTables(DatabaseDefinition metadata, bool foreignKeyRestrict) Parameters metadata DatabaseDefinition foreignKeyRestrict bool Returns Option<Sql, IDLOptionFailure> GetDbType(ColumnDefinition) public static DatabaseColumnType GetDbType(ColumnDefinition column) Parameters column ColumnDefinition Returns DatabaseColumnType GetDefaultValue(ColumnDefinition) public static string? GetDefaultValue(ColumnDefinition column) Parameters column ColumnDefinition Returns string?"
  },
  "api/DataLinq.MySql.html": {
    "href": "api/DataLinq.MySql.html",
    "title": "Namespace DataLinq.MySql | DataLinq",
    "summary": "Namespace DataLinq.MySql Namespaces DataLinq.MySql.Models Classes MetadataFromMySqlFactory MetadataFromMySqlFactoryCreator MySQLProvider<T> MySQLProvider MySQLProviderConstants MySqlDataLinqDataWriter Represents a data writer for MySql database. MySqlDatabase<T> Represents a MySQL database provider specific to a given database model type. MySqlDatabaseCreator Factory for creating instances of MySQL database providers. MySqlDatabaseTransaction Represents a transaction for a MySQL database, encapsulating the logic to execute commands with transactional support. MySqlDbAccess SqlFromMetadataFactory Structs MySqlDataLinqDataReader"
  },
  "api/DataLinq.Query.BooleanType.html": {
    "href": "api/DataLinq.Query.BooleanType.html",
    "title": "Enum BooleanType | DataLinq",
    "summary": "Enum BooleanType Namespace DataLinq.Query Assembly DataLinq.dll public enum BooleanType Fields And = 0 Or = 1"
  },
  "api/DataLinq.Query.Delete-1.html": {
    "href": "api/DataLinq.Query.Delete-1.html",
    "title": "Class Delete<T> | DataLinq",
    "summary": "Class Delete<T> Namespace DataLinq.Query Assembly DataLinq.dll public class Delete<T> : IQuery Type Parameters T Inheritance object Delete<T> Implements IQuery Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors Delete(SqlQuery<T>) public Delete(SqlQuery<T> query) Parameters query SqlQuery<T> Methods Execute() public QueryResult Execute() Returns QueryResult ToDbCommand() public IDbCommand ToDbCommand() Returns IDbCommand ToSql(string?) public Sql ToSql(string? paramPrefix = null) Parameters paramPrefix string? Returns Sql"
  },
  "api/DataLinq.Query.IQuery.html": {
    "href": "api/DataLinq.Query.IQuery.html",
    "title": "Interface IQuery | DataLinq",
    "summary": "Interface IQuery Namespace DataLinq.Query Assembly DataLinq.dll public interface IQuery Methods ToSql(string?) Sql ToSql(string? paramPrefix = null) Parameters paramPrefix string? Returns Sql"
  },
  "api/DataLinq.Query.IQueryPart.html": {
    "href": "api/DataLinq.Query.IQueryPart.html",
    "title": "Interface IQueryPart | DataLinq",
    "summary": "Interface IQueryPart Namespace DataLinq.Query Assembly DataLinq.dll public interface IQueryPart Methods AddCommandString(Sql, string, bool, bool) void AddCommandString(Sql sql, string prefix, bool addCommandParameter = true, bool addParentheses = false) Parameters sql Sql prefix string addCommandParameter bool addParentheses bool"
  },
  "api/DataLinq.Query.IWhere-1.html": {
    "href": "api/DataLinq.Query.IWhere-1.html",
    "title": "Interface IWhere<T> | DataLinq",
    "summary": "Interface IWhere<T> Namespace DataLinq.Query Assembly DataLinq.dll public interface IWhere<T> : IQueryPart Type Parameters T Implements IQueryPart"
  },
  "api/DataLinq.Query.Insert-1.html": {
    "href": "api/DataLinq.Query.Insert-1.html",
    "title": "Class Insert<T> | DataLinq",
    "summary": "Class Insert<T> Namespace DataLinq.Query Assembly DataLinq.dll public class Insert<T> : IQuery Type Parameters T Inheritance object Insert<T> Implements IQuery Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors Insert(SqlQuery<T>) public Insert(SqlQuery<T> query) Parameters query SqlQuery<T> Methods Execute() public QueryResult Execute() Returns QueryResult GetSet(Sql, string?) protected Sql GetSet(Sql sql, string? paramPrefix) Parameters sql Sql paramPrefix string? Returns Sql ToDbCommand() public IDbCommand ToDbCommand() Returns IDbCommand ToSql(string?) public Sql ToSql(string? paramPrefix = null) Parameters paramPrefix string? Returns Sql"
  },
  "api/DataLinq.Query.Join-1.html": {
    "href": "api/DataLinq.Query.Join-1.html",
    "title": "Class Join<T> | DataLinq",
    "summary": "Class Join<T> Namespace DataLinq.Query Assembly DataLinq.dll public class Join<T> Type Parameters T Inheritance object Join<T> Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Fields Query public readonly SqlQuery<T> Query Field Value SqlQuery<T> WhereContainer protected WhereGroup<T>? WhereContainer Field Value WhereGroup<T>? Methods GetSql(Sql, string?) public Sql GetSql(Sql sql, string? paramPrefix) Parameters sql Sql paramPrefix string? Returns Sql On(string, string?) public Where<T> On(string columnName, string? alias = null) Parameters columnName string alias string? Returns Where<T>"
  },
  "api/DataLinq.Query.Literal.html": {
    "href": "api/DataLinq.Query.Literal.html",
    "title": "Class Literal | DataLinq",
    "summary": "Class Literal Namespace DataLinq.Query Assembly DataLinq.dll public class Literal : IQuery Inheritance object Literal Implements IQuery Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors Literal(Transaction, string) public Literal(Transaction transaction, string sql) Parameters transaction Transaction sql string Literal(Transaction, string, IEnumerable<IDataParameter>) public Literal(Transaction database, string sql, IEnumerable<IDataParameter> parameters) Parameters database Transaction sql string parameters IEnumerable<IDataParameter> Fields transaction protected Transaction transaction Field Value Transaction Properties ParameterCount public int ParameterCount { get; } Property Value int Transaction public Transaction Transaction { get; } Property Value Transaction Methods ToDbCommand() public IDbCommand ToDbCommand() Returns IDbCommand ToSql(string?) public Sql ToSql(string? paramPrefix = null) Parameters paramPrefix string? Returns Sql"
  },
  "api/DataLinq.Query.OrderBy.html": {
    "href": "api/DataLinq.Query.OrderBy.html",
    "title": "Class OrderBy | DataLinq",
    "summary": "Class OrderBy Namespace DataLinq.Query Assembly DataLinq.dll public class OrderBy Inheritance object OrderBy Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors OrderBy(ColumnDefinition, string?, bool) public OrderBy(ColumnDefinition column, string? alias, bool ascending) Parameters column ColumnDefinition alias string? ascending bool Properties Alias public string? Alias { get; } Property Value string? Ascending public bool Ascending { get; } Property Value bool Column public ColumnDefinition Column { get; } Property Value ColumnDefinition"
  },
  "api/DataLinq.Query.QueryResult.html": {
    "href": "api/DataLinq.Query.QueryResult.html",
    "title": "Class QueryResult | DataLinq",
    "summary": "Class QueryResult Namespace DataLinq.Query Assembly DataLinq.dll public class QueryResult Inheritance object QueryResult Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString()"
  },
  "api/DataLinq.Query.QueryUtils.html": {
    "href": "api/DataLinq.Query.QueryUtils.html",
    "title": "Class QueryUtils | DataLinq",
    "summary": "Class QueryUtils Namespace DataLinq.Query Assembly DataLinq.dll public static class QueryUtils Inheritance object QueryUtils Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Methods ParseColumnNameAndAlias(string) public static (string name, string alias) ParseColumnNameAndAlias(string nameAndAlias) Parameters nameAndAlias string Returns (string name, string alias) ParseTableNameAndAlias(string) public static (string name, string alias) ParseTableNameAndAlias(string nameAndAlias) Parameters nameAndAlias string Returns (string name, string alias)"
  },
  "api/DataLinq.Query.Relation.html": {
    "href": "api/DataLinq.Query.Relation.html",
    "title": "Enum Relation | DataLinq",
    "summary": "Enum Relation Namespace DataLinq.Query Assembly DataLinq.dll public enum Relation Fields Equal = 0 EqualNull = 1 GreaterThan = 5 GreaterThanOrEqual = 6 In = 9 LessThan = 7 LessThanOrEqual = 8 Like = 4 NotEqual = 2 NotEqualNull = 3 NotIn = 10"
  },
  "api/DataLinq.Query.Select-1.html": {
    "href": "api/DataLinq.Query.Select-1.html",
    "title": "Class Select<T> | DataLinq",
    "summary": "Class Select<T> Namespace DataLinq.Query Assembly DataLinq.dll public class Select<T> : IQuery Type Parameters T Inheritance object Select<T> Implements IQuery Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors Select(SqlQuery<T>) public Select(SqlQuery<T> query) Parameters query SqlQuery<T> Fields query protected readonly SqlQuery<T> query Field Value SqlQuery<T> Properties Query public SqlQuery<T> Query { get; } Property Value SqlQuery<T> Methods Execute() public IEnumerable<IImmutableInstance> Execute() Returns IEnumerable<IImmutableInstance> ExecuteAs<V>() public IEnumerable<V> ExecuteAs<V>() Returns IEnumerable<V> Type Parameters V ExecuteScalar<V>() public V ExecuteScalar<V>() Returns V Type Parameters V ExecuteScalar() public object? ExecuteScalar() Returns object? ReadKeys() public IEnumerable<IKey> ReadKeys() Returns IEnumerable<IKey> ReadPrimaryAndForeignKeys(ColumnIndex) public IEnumerable<(IKey fk, IKey[] pks)> ReadPrimaryAndForeignKeys(ColumnIndex foreignKeyIndex) Parameters foreignKeyIndex ColumnIndex Returns IEnumerable<(IKey fk, IKey[] pks)> ReadReader() public IEnumerable<IDataLinqDataReader> ReadReader() Returns IEnumerable<IDataLinqDataReader> ReadRows() public IEnumerable<RowData> ReadRows() Returns IEnumerable<RowData> ToDbCommand() public IDbCommand ToDbCommand() Returns IDbCommand ToSql(string?) public Sql ToSql(string? paramPrefix = null) Parameters paramPrefix string? Returns Sql ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. What(IEnumerable<ColumnDefinition>) public Select<T> What(IEnumerable<ColumnDefinition> columns) Parameters columns IEnumerable<ColumnDefinition> Returns Select<T> What(params string[]) public Select<T> What(params string[] selectors) Parameters selectors string[] Returns Select<T>"
  },
  "api/DataLinq.Query.Sql.html": {
    "href": "api/DataLinq.Query.Sql.html",
    "title": "Class Sql | DataLinq",
    "summary": "Class Sql Namespace DataLinq.Query Assembly DataLinq.dll public class Sql Inheritance object Sql Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors Sql() public Sql() Sql(string, params IDataParameter[]) public Sql(string text, params IDataParameter[] parameters) Parameters text string parameters IDataParameter[] Fields Parameters public List<IDataParameter> Parameters Field Value List<IDataParameter> Properties Index public int Index { get; protected set; } Property Value int Text public string Text { get; } Property Value string Methods AddFormat(string, params string[]) public Sql AddFormat(string format, params string[] values) Parameters format string values string[] Returns Sql AddLineBreak() public Sql AddLineBreak() Returns Sql AddParameters(params IDataParameter[]) public Sql AddParameters(params IDataParameter[] parameters) Parameters parameters IDataParameter[] Returns Sql AddText(string) public Sql AddText(string text) Parameters text string Returns Sql AddWhereText(string, params string[]) public Sql AddWhereText(string format, params string[] values) Parameters format string values string[] Returns Sql IndexAdd() public int IndexAdd() Returns int Join(string, params string[]) public Sql Join(string separator, params string[] values) Parameters separator string values string[] Returns Sql ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/DataLinq.Query.SqlQuery-1.html": {
    "href": "api/DataLinq.Query.SqlQuery-1.html",
    "title": "Class SqlQuery<T> | DataLinq",
    "summary": "Class SqlQuery<T> Namespace DataLinq.Query Assembly DataLinq.dll public class SqlQuery<T> Type Parameters T Inheritance object SqlQuery<T> Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors SqlQuery(DataSourceAccess, string?) public SqlQuery(DataSourceAccess dataSource, string? alias = null) Parameters dataSource DataSourceAccess alias string? SqlQuery(TableDefinition, DataSourceAccess, string?) public SqlQuery(TableDefinition table, DataSourceAccess transaction, string? alias = null) Parameters table TableDefinition transaction DataSourceAccess alias string? SqlQuery(string, DataSourceAccess, string?) public SqlQuery(string tableName, DataSourceAccess transaction, string? alias = null) Parameters tableName string transaction DataSourceAccess alias string? Fields JoinList protected List<Join<T>> JoinList Field Value List<Join<T>> WhereGroup protected WhereGroup<T> WhereGroup Field Value WhereGroup<T> limit protected int? limit Field Value int? offset protected int? offset Field Value int? Properties Alias public string? Alias { get; } Property Value string? DataSource public DataSourceAccess DataSource { get; } Property Value DataSourceAccess LastIdQuery public bool LastIdQuery { get; protected set; } Property Value bool Table public TableDefinition Table { get; } Property Value TableDefinition Methods AddLastIdQuery() public SqlQuery<T> AddLastIdQuery() Returns SqlQuery<T> AddWhereGroup(BooleanType) public WhereGroup<T> AddWhereGroup(BooleanType type = BooleanType.And) Parameters type BooleanType Returns WhereGroup<T> AddWhereNotGroup(BooleanType) public WhereGroup<T> AddWhereNotGroup(BooleanType type = BooleanType.And) Parameters type BooleanType Returns WhereGroup<T> Delete() public QueryResult Delete() Returns QueryResult DeleteQuery() public Delete<T> DeleteQuery() Returns Delete<T> GetBaseWhereGroup(BooleanType) public WhereGroup<T> GetBaseWhereGroup(BooleanType type = BooleanType.And) Parameters type BooleanType Returns WhereGroup<T> Insert() public QueryResult Insert() Returns QueryResult InsertQuery() public Insert<T> InsertQuery() Returns Insert<T> Join(string, string?) public Join<T> Join(string tableName, string? alias = null) Parameters tableName string alias string? Returns Join<T> LeftJoin(string, string?) public Join<T> LeftJoin(string tableName, string? alias = null) Parameters tableName string alias string? Returns Join<T> Limit(int) public SqlQuery<T> Limit(int limit) Parameters limit int Returns SqlQuery<T> Limit(int, int) public SqlQuery<T> Limit(int limit, int offset) Parameters limit int offset int Returns SqlQuery<T> Offset(int) public SqlQuery<T> Offset(int offset) Parameters offset int Returns SqlQuery<T> OrderBy(OrderByClause) public SqlQuery<T> OrderBy(OrderByClause orderBy) Parameters orderBy OrderByClause Returns SqlQuery<T> OrderBy(string, string?, bool) public SqlQuery<T> OrderBy(string columnName, string? alias = null, bool ascending = true) Parameters columnName string alias string? ascending bool Returns SqlQuery<T> OrderBy(ColumnDefinition, string?, bool) public SqlQuery<T> OrderBy(ColumnDefinition column, string? alias = null, bool ascending = true) Parameters column ColumnDefinition alias string? ascending bool Returns SqlQuery<T> OrderByDesc(string, string?) public SqlQuery<T> OrderByDesc(string columnName, string? alias = null) Parameters columnName string alias string? Returns SqlQuery<T> OrderByDesc(ColumnDefinition, string?) public SqlQuery<T> OrderByDesc(ColumnDefinition column, string? alias = null) Parameters column ColumnDefinition alias string? Returns SqlQuery<T> RightJoin(string, string?) public Join<T> RightJoin(string tableName, string? alias = null) Parameters tableName string alias string? Returns Join<T> Select() public IEnumerable<T> Select() Returns IEnumerable<T> SelectQuery() public virtual Select<T> SelectQuery() Returns Select<T> Set<V>(string, V) public SqlQuery<T> Set<V>(string key, V value) Parameters key string value V Returns SqlQuery<T> Type Parameters V Update() public QueryResult Update() Returns QueryResult UpdateQuery() public Update<T> UpdateQuery() Returns Update<T> What(IEnumerable<ColumnDefinition>) public SqlQuery<T> What(IEnumerable<ColumnDefinition> columns) Parameters columns IEnumerable<ColumnDefinition> Returns SqlQuery<T> What(IEnumerable<string>) public SqlQuery<T> What(IEnumerable<string> selectors) Parameters selectors IEnumerable<string> Returns SqlQuery<T> What(params string[]) public SqlQuery<T> What(params string[] selectors) Parameters selectors string[] Returns SqlQuery<T> Where(string, string?) public Where<T> Where(string columnName, string? alias = null) Parameters columnName string alias string? Returns Where<T> Where(IEnumerable<(string columnName, object? value)>, BooleanType, string?) public WhereGroup<T> Where(IEnumerable<(string columnName, object? value)> wheres, BooleanType type = BooleanType.And, string? alias = null) Parameters wheres IEnumerable<(string columnName, object? value)> type BooleanType alias string? Returns WhereGroup<T> Where(Func<Func<string, Where<T>>, WhereGroup<T>>) public WhereGroup<T> Where(Func<Func<string, Where<T>>, WhereGroup<T>> func) Parameters func Func<Func<string, Where<T>>, WhereGroup<T>> Returns WhereGroup<T> Where(WhereClause) public SqlQuery<T> Where(WhereClause where) Parameters where WhereClause Returns SqlQuery<T> WhereNot(string, string?) public Where<T> WhereNot(string columnName, string? alias = null) Parameters columnName string alias string? Returns Where<T> WhereNot(IEnumerable<(string columnName, object? value)>, BooleanType, string?) public WhereGroup<T> WhereNot(IEnumerable<(string columnName, object? value)> wheres, BooleanType type = BooleanType.And, string? alias = null) Parameters wheres IEnumerable<(string columnName, object? value)> type BooleanType alias string? Returns WhereGroup<T>"
  },
  "api/DataLinq.Query.SqlQuery.html": {
    "href": "api/DataLinq.Query.SqlQuery.html",
    "title": "Class SqlQuery | DataLinq",
    "summary": "Class SqlQuery Namespace DataLinq.Query Assembly DataLinq.dll public class SqlQuery : SqlQuery<object> Inheritance object SqlQuery<object> SqlQuery Inherited Members SqlQuery<object>.WhereGroup SqlQuery<object>.JoinList SqlQuery<object>.limit SqlQuery<object>.offset SqlQuery<object>.LastIdQuery SqlQuery<object>.DataSource SqlQuery<object>.Table SqlQuery<object>.Alias SqlQuery<object>.Select() SqlQuery<object>.Delete() SqlQuery<object>.Insert() SqlQuery<object>.Update() SqlQuery<object>.SelectQuery() SqlQuery<object>.DeleteQuery() SqlQuery<object>.InsertQuery() SqlQuery<object>.UpdateQuery() SqlQuery<object>.Where(string, string?) SqlQuery<object>.Where(IEnumerable<(string columnName, object? value)>, BooleanType, string?) SqlQuery<object>.Where(Func<Func<string, Where<object>>, WhereGroup<object>>) SqlQuery<object>.WhereNot(string, string?) SqlQuery<object>.WhereNot(IEnumerable<(string columnName, object? value)>, BooleanType, string?) SqlQuery<object>.AddWhereGroup(BooleanType) SqlQuery<object>.AddWhereNotGroup(BooleanType) SqlQuery<object>.GetBaseWhereGroup(BooleanType) SqlQuery<object>.Where(WhereClause) SqlQuery<object>.OrderBy(OrderByClause) SqlQuery<object>.Join(string, string?) SqlQuery<object>.LeftJoin(string, string?) SqlQuery<object>.RightJoin(string, string?) SqlQuery<object>.OrderBy(string, string?, bool) SqlQuery<object>.OrderBy(ColumnDefinition, string?, bool) SqlQuery<object>.OrderByDesc(string, string?) SqlQuery<object>.OrderByDesc(ColumnDefinition, string?) SqlQuery<object>.Limit(int) SqlQuery<object>.Limit(int, int) SqlQuery<object>.Offset(int) SqlQuery<object>.Set<V>(string, V) SqlQuery<object>.What(IEnumerable<ColumnDefinition>) SqlQuery<object>.What(IEnumerable<string>) SqlQuery<object>.What(params string[]) SqlQuery<object>.AddLastIdQuery() object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors SqlQuery(DataSourceAccess, string?) public SqlQuery(DataSourceAccess transaction, string? alias = null) Parameters transaction DataSourceAccess alias string? SqlQuery(TableDefinition, DataSourceAccess, string?) public SqlQuery(TableDefinition table, DataSourceAccess transaction, string? alias = null) Parameters table TableDefinition transaction DataSourceAccess alias string? SqlQuery(string, DataSourceAccess, string?) public SqlQuery(string tableName, DataSourceAccess transaction, string? alias = null) Parameters tableName string transaction DataSourceAccess alias string?"
  },
  "api/DataLinq.Query.Update-1.html": {
    "href": "api/DataLinq.Query.Update-1.html",
    "title": "Class Update<T> | DataLinq",
    "summary": "Class Update<T> Namespace DataLinq.Query Assembly DataLinq.dll public class Update<T> : IQuery Type Parameters T Inheritance object Update<T> Implements IQuery Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors Update(SqlQuery<T>) public Update(SqlQuery<T> query) Parameters query SqlQuery<T> Methods Execute() public QueryResult Execute() Returns QueryResult ToDbCommand() public IDbCommand ToDbCommand() Returns IDbCommand ToSql(string?) public Sql ToSql(string? paramPrefix = null) Parameters paramPrefix string? Returns Sql"
  },
  "api/DataLinq.Query.Where-1.html": {
    "href": "api/DataLinq.Query.Where-1.html",
    "title": "Class Where<T> | DataLinq",
    "summary": "Class Where<T> Namespace DataLinq.Query Assembly DataLinq.dll public class Where<T> : IWhere<T>, IQueryPart Type Parameters T Inheritance object Where<T> Implements IWhere<T> IQueryPart Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Fields WhereGroup protected WhereGroup<T> WhereGroup Field Value WhereGroup<T> Methods AddCommandString(Sql, string, bool, bool) public void AddCommandString(Sql sql, string prefix, bool addCommandParameter = true, bool addParentheses = false) Parameters sql Sql prefix string addCommandParameter bool addParentheses bool EqualTo<V>(V) public WhereGroup<T> EqualTo<V>(V value) Parameters value V Returns WhereGroup<T> Type Parameters V EqualToColumn(string, string?) public WhereGroup<T> EqualToColumn(string column, string? alias = null) Parameters column string alias string? Returns WhereGroup<T> EqualToNull() public WhereGroup<T> EqualToNull() Returns WhereGroup<T> GetCommandParameter(Sql, string) protected IEnumerable<int> GetCommandParameter(Sql sql, string prefix) Parameters sql Sql prefix string Returns IEnumerable<int> GreaterThan<V>(V) public WhereGroup<T> GreaterThan<V>(V value) Parameters value V Returns WhereGroup<T> Type Parameters V GreaterThanColumn(string, string?) public WhereGroup<T> GreaterThanColumn(string column, string? alias = null) Parameters column string alias string? Returns WhereGroup<T> GreaterThanOrEqual<V>(V) public WhereGroup<T> GreaterThanOrEqual<V>(V value) Parameters value V Returns WhereGroup<T> Type Parameters V GreaterThanOrEqualToColumn(string, string?) public WhereGroup<T> GreaterThanOrEqualToColumn(string column, string? alias = null) Parameters column string alias string? Returns WhereGroup<T> In<V>(IEnumerable<V>) public WhereGroup<T> In<V>(IEnumerable<V> values) Parameters values IEnumerable<V> Returns WhereGroup<T> Type Parameters V In<V>(params V[]) public WhereGroup<T> In<V>(params V[] values) Parameters values V[] Returns WhereGroup<T> Type Parameters V LessThan<V>(V) public WhereGroup<T> LessThan<V>(V value) Parameters value V Returns WhereGroup<T> Type Parameters V LessThanColumn(string, string?) public WhereGroup<T> LessThanColumn(string column, string? alias = null) Parameters column string alias string? Returns WhereGroup<T> LessThanOrEqual<V>(V) public WhereGroup<T> LessThanOrEqual<V>(V value) Parameters value V Returns WhereGroup<T> Type Parameters V LessThanOrEqualToColumn(string, string?) public WhereGroup<T> LessThanOrEqualToColumn(string column, string? alias = null) Parameters column string alias string? Returns WhereGroup<T> Like<V>(V) public WhereGroup<T> Like<V>(V value) Parameters value V Returns WhereGroup<T> Type Parameters V LikeColumn(string, string?) public WhereGroup<T> LikeColumn(string column, string? alias = null) Parameters column string alias string? Returns WhereGroup<T> NotEqualTo<V>(V) public WhereGroup<T> NotEqualTo<V>(V value) Parameters value V Returns WhereGroup<T> Type Parameters V NotEqualToColumn(string, string?) public WhereGroup<T> NotEqualToColumn(string column, string? alias = null) Parameters column string alias string? Returns WhereGroup<T> NotEqualToNull() public WhereGroup<T> NotEqualToNull() Returns WhereGroup<T> NotIn<V>(IEnumerable<V>) public WhereGroup<T> NotIn<V>(IEnumerable<V> values) Parameters values IEnumerable<V> Returns WhereGroup<T> Type Parameters V NotIn<V>(params V[]) public WhereGroup<T> NotIn<V>(params V[] values) Parameters values V[] Returns WhereGroup<T> Type Parameters V SetAndReturn<V>(V[], Relation) protected WhereGroup<T> SetAndReturn<V>(V[] value, Relation relation) Parameters value V[] relation Relation Returns WhereGroup<T> Type Parameters V SetAndReturn<V>(V?, Relation) protected WhereGroup<T> SetAndReturn<V>(V? value, Relation relation) Parameters value V? relation Relation Returns WhereGroup<T> Type Parameters V SetAndReturnColumn(string, string?, Relation) protected WhereGroup<T> SetAndReturnColumn(string column, string? alias, Relation relation) Parameters column string alias string? relation Relation Returns WhereGroup<T> SetAndReturnNull(Relation) protected WhereGroup<T> SetAndReturnNull(Relation relation) Parameters relation Relation Returns WhereGroup<T> ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/DataLinq.Query.WhereGroup-1.html": {
    "href": "api/DataLinq.Query.WhereGroup-1.html",
    "title": "Class WhereGroup<T> | DataLinq",
    "summary": "Class WhereGroup<T> Namespace DataLinq.Query Assembly DataLinq.dll public class WhereGroup<T> : IWhere<T>, IQueryPart Type Parameters T Inheritance object WhereGroup<T> Implements IWhere<T> IQueryPart Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Fields Query public readonly SqlQuery<T> Query Field Value SqlQuery<T> whereList protected List<(IWhere<T> where, BooleanType type)>? whereList Field Value List<(IWhere<T> where, BooleanType type)>? Properties Transaction public Transaction Transaction { get; } Property Value Transaction Methods AddCommandString(Sql, string, bool, bool) public void AddCommandString(Sql sql, string prefix = \"\", bool addCommandParameter = true, bool addParentheses = false) Parameters sql Sql prefix string addCommandParameter bool addParentheses bool AddWhere(string, string?, BooleanType) public Where<T> AddWhere(string columnName, string? alias, BooleanType type) Parameters columnName string alias string? type BooleanType Returns Where<T> AddWhereNot(string, string?, BooleanType) public Where<T> AddWhereNot(string columnName, string? alias, BooleanType type) Parameters columnName string alias string? type BooleanType Returns Where<T> And(string, string?) public Where<T> And(string columnName, string? alias = null) Parameters columnName string alias string? Returns Where<T> And(Func<Func<string, Where<T>>, WhereGroup<T>>) public WhereGroup<T> And(Func<Func<string, Where<T>>, WhereGroup<T>> func) Parameters func Func<Func<string, Where<T>>, WhereGroup<T>> Returns WhereGroup<T> Delete() public QueryResult Delete() Returns QueryResult Insert() public QueryResult Insert() Returns QueryResult InsertQuery() public Insert<T> InsertQuery() Returns Insert<T> Join(string, string?) public Join<T> Join(string tableName, string? alias = null) Parameters tableName string alias string? Returns Join<T> LeftJoin(string, string?) public Join<T> LeftJoin(string tableName, string? alias = null) Parameters tableName string alias string? Returns Join<T> Limit(int) public SqlQuery<T> Limit(int rows) Parameters rows int Returns SqlQuery<T> Or(string, string?) public Where<T> Or(string columnName, string? alias = null) Parameters columnName string alias string? Returns Where<T> Or(Func<Func<string, Where<T>>, WhereGroup<T>>) public WhereGroup<T> Or(Func<Func<string, Where<T>>, WhereGroup<T>> func) Parameters func Func<Func<string, Where<T>>, WhereGroup<T>> Returns WhereGroup<T> OrderBy(string, string?, bool) public SqlQuery<T> OrderBy(string columnName, string? alias = null, bool ascending = true) Parameters columnName string alias string? ascending bool Returns SqlQuery<T> OrderBy(ColumnDefinition, string?, bool) public SqlQuery<T> OrderBy(ColumnDefinition column, string? alias = null, bool ascending = true) Parameters column ColumnDefinition alias string? ascending bool Returns SqlQuery<T> OrderByDesc(string, string?) public SqlQuery<T> OrderByDesc(string columnName, string? alias = null) Parameters columnName string alias string? Returns SqlQuery<T> OrderByDesc(ColumnDefinition, string?) public SqlQuery<T> OrderByDesc(ColumnDefinition column, string? alias = null) Parameters column ColumnDefinition alias string? Returns SqlQuery<T> RightJoin(string, string?) public Join<T> RightJoin(string tableName, string? alias = null) Parameters tableName string alias string? Returns Join<T> Select() public IEnumerable<T> Select() Returns IEnumerable<T> SelectQuery() public Select<T> SelectQuery() Returns Select<T> Set<V>(string, V) public SqlQuery<T> Set<V>(string key, V value) Parameters key string value V Returns SqlQuery<T> Type Parameters V ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Update() public QueryResult Update() Returns QueryResult Where(string, string?) public Where<T> Where(string columnName, string? alias = null) Parameters columnName string alias string? Returns Where<T> Where(IEnumerable<(string columnName, object? value)>, BooleanType, string?) public WhereGroup<T> Where(IEnumerable<(string columnName, object? value)> wheres, BooleanType type = BooleanType.And, string? alias = null) Parameters wheres IEnumerable<(string columnName, object? value)> type BooleanType alias string? Returns WhereGroup<T> WhereNot(IEnumerable<(string columnName, object? value)>, BooleanType, string?) public WhereGroup<T> WhereNot(IEnumerable<(string columnName, object? value)> wheres, BooleanType type = BooleanType.And, string? alias = null) Parameters wheres IEnumerable<(string columnName, object? value)> type BooleanType alias string? Returns WhereGroup<T>"
  },
  "api/DataLinq.Query.html": {
    "href": "api/DataLinq.Query.html",
    "title": "Namespace DataLinq.Query | DataLinq",
    "summary": "Namespace DataLinq.Query Classes Delete<T> Insert<T> Join<T> Literal OrderBy QueryResult QueryUtils Select<T> Sql SqlQuery<T> SqlQuery Update<T> Where<T> WhereGroup<T> Interfaces IQuery IQueryPart IWhere<T> Enums BooleanType Relation"
  },
  "api/DataLinq.Queryable-1.html": {
    "href": "api/DataLinq.Queryable-1.html",
    "title": "Class Queryable<T> | DataLinq",
    "summary": "Class Queryable<T> Namespace DataLinq Assembly DataLinq.dll public class Queryable<T> : QueryableBase<T>, IOrderedQueryable<T>, IOrderedQueryable, IQueryable<T>, IQueryable, IEnumerable<T>, IEnumerable Type Parameters T Inheritance object QueryableBase<T> Queryable<T> Implements IOrderedQueryable<T> IOrderedQueryable IQueryable<T> IQueryable IEnumerable<T> IEnumerable Inherited Members QueryableBase<T>.GetEnumerator() QueryableBase<T>.Expression QueryableBase<T>.Provider QueryableBase<T>.ElementType object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors Queryable(IQueryProvider, Expression) public Queryable(IQueryProvider provider, Expression expression) Parameters provider IQueryProvider expression Expression Queryable(DataSourceAccess, TableDefinition) public Queryable(DataSourceAccess dataSource, TableDefinition table) Parameters dataSource DataSourceAccess table TableDefinition Fields queryParser protected static readonly IQueryParser queryParser Field Value IQueryParser"
  },
  "api/DataLinq.SQLite.MetadataFromSQLiteFactory.html": {
    "href": "api/DataLinq.SQLite.MetadataFromSQLiteFactory.html",
    "title": "Class MetadataFromSQLiteFactory | DataLinq",
    "summary": "Class MetadataFromSQLiteFactory Namespace DataLinq.SQLite Assembly DataLinq.SQLite.dll public class MetadataFromSQLiteFactory : IMetadataFromSqlFactory Inheritance object MetadataFromSQLiteFactory Implements IMetadataFromSqlFactory Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors MetadataFromSQLiteFactory(MetadataFromDatabaseFactoryOptions) public MetadataFromSQLiteFactory(MetadataFromDatabaseFactoryOptions options) Parameters options MetadataFromDatabaseFactoryOptions Methods ParseDatabase(string, string, string, string, string) public Option<DatabaseDefinition> ParseDatabase(string name, string csTypeName, string csNamespace, string dbName, string connectionString) Parameters name string csTypeName string csNamespace string dbName string connectionString string Returns Option<DatabaseDefinition>"
  },
  "api/DataLinq.SQLite.MetadataFromSQLiteFactoryCreator.html": {
    "href": "api/DataLinq.SQLite.MetadataFromSQLiteFactoryCreator.html",
    "title": "Class MetadataFromSQLiteFactoryCreator | DataLinq",
    "summary": "Class MetadataFromSQLiteFactoryCreator Namespace DataLinq.SQLite Assembly DataLinq.SQLite.dll public class MetadataFromSQLiteFactoryCreator : IMetadataFromDatabaseFactoryCreator Inheritance object MetadataFromSQLiteFactoryCreator Implements IMetadataFromDatabaseFactoryCreator Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Methods GetMetadataFromSqlFactory(MetadataFromDatabaseFactoryOptions) public IMetadataFromSqlFactory GetMetadataFromSqlFactory(MetadataFromDatabaseFactoryOptions options) Parameters options MetadataFromDatabaseFactoryOptions Returns IMetadataFromSqlFactory"
  },
  "api/DataLinq.SQLite.SQLiteDataLinqDataReader.html": {
    "href": "api/DataLinq.SQLite.SQLiteDataLinqDataReader.html",
    "title": "Class SQLiteDataLinqDataReader | DataLinq",
    "summary": "Class SQLiteDataLinqDataReader Namespace DataLinq.SQLite Assembly DataLinq.SQLite.dll public class SQLiteDataLinqDataReader : IDataLinqDataReader, IDisposable Inheritance object SQLiteDataLinqDataReader Implements IDataLinqDataReader IDisposable Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors SQLiteDataLinqDataReader(SqliteDataReader) public SQLiteDataLinqDataReader(SqliteDataReader dataReader) Parameters dataReader SqliteDataReader Fields dataReader protected SqliteDataReader dataReader Field Value SqliteDataReader Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() GetBoolean(int) public bool GetBoolean(int ordinal) Parameters ordinal int Returns bool GetByteLength(int) public long GetByteLength(int ordinal) Parameters ordinal int Returns long GetBytes(int) public byte[]? GetBytes(int ordinal) Parameters ordinal int Returns byte[]? GetBytes(int, Span<byte>) public long GetBytes(int ordinal, Span<byte> buffer) Parameters ordinal int buffer Span<byte> Returns long GetDateOnly(int) public DateOnly GetDateOnly(int ordinal) Parameters ordinal int Returns DateOnly GetGuid(int) public Guid GetGuid(int ordinal) Parameters ordinal int Returns Guid GetInt32(int) public int GetInt32(int ordinal) Parameters ordinal int Returns int GetOrdinal(string) public int GetOrdinal(string name) Parameters name string Returns int GetString(int) public string GetString(int ordinal) Parameters ordinal int Returns string GetValue(int) public object GetValue(int ordinal) Parameters ordinal int Returns object GetValue<T>(ColumnDefinition) public T? GetValue<T>(ColumnDefinition column) Parameters column ColumnDefinition Returns T? Type Parameters T GetValue<T>(ColumnDefinition, int) public T? GetValue<T>(ColumnDefinition column, int ordinal) Parameters column ColumnDefinition ordinal int Returns T? Type Parameters T IsDbNull(int) public bool IsDbNull(int ordinal) Parameters ordinal int Returns bool ReadNextRow() public bool ReadNextRow() Returns bool"
  },
  "api/DataLinq.SQLite.SQLiteDataLinqDataWriter.html": {
    "href": "api/DataLinq.SQLite.SQLiteDataLinqDataWriter.html",
    "title": "Class SQLiteDataLinqDataWriter | DataLinq",
    "summary": "Class SQLiteDataLinqDataWriter Namespace DataLinq.SQLite Assembly DataLinq.SQLite.dll Represents a data writer for SQLite database. public class SQLiteDataLinqDataWriter : IDataLinqDataWriter Inheritance object SQLiteDataLinqDataWriter Implements IDataLinqDataWriter Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Extension Methods DataWriter.ConvertColumnValue(IDataLinqDataWriter, ColumnDefinition, object?) Constructors SQLiteDataLinqDataWriter() Initializes a new instance of the DataLinq.SQLite.SQLiteDataLinqDataWriter class. public SQLiteDataLinqDataWriter() Methods ConvertValue(ColumnDefinition, object?) Converts the specified value to the appropriate type for the specified column. public object? ConvertValue(ColumnDefinition column, object? value) Parameters column ColumnDefinition The column metadata. value object? The value to convert. Returns object? The converted value."
  },
  "api/DataLinq.SQLite.SQLiteDatabase-1.html": {
    "href": "api/DataLinq.SQLite.SQLiteDatabase-1.html",
    "title": "Class SQLiteDatabase<T> | DataLinq",
    "summary": "Class SQLiteDatabase<T> Namespace DataLinq.SQLite Assembly DataLinq.SQLite.dll public class SQLiteDatabase<T> : Database<T>, IDisposable where T : class, IDatabaseModel Type Parameters T Inheritance object Database<T> SQLiteDatabase<T> Implements IDisposable Inherited Members Database<T>.DatabaseType Database<T>.Provider Database<T>.FileOrServerExists() Database<T>.Exists(string?) Database<T>.Transaction(TransactionType) Database<T>.AttachTransaction(IDbTransaction, TransactionType) Database<T>.Query() Database<T>.From(string, string?) Database<T>.From(TableDefinition, string?) Database<T>.From<V>() Database<T>.Get<M>(IKey) Database<T>.Insert<M>(Mutable<M>, TransactionType) Database<T>.Update<M>(Mutable<M>, TransactionType) Database<T>.Save<M>(Mutable<M>, TransactionType) Database<T>.Delete<M>(M, TransactionType) Database<T>.Commit(Action<Transaction>, TransactionType) Database<T>.Commit<M>(Func<Transaction, M>, TransactionType) Database<T>.Dispose() object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors SQLiteDatabase(string) public SQLiteDatabase(string connectionString) Parameters connectionString string"
  },
  "api/DataLinq.SQLite.SQLiteDatabaseCreator.html": {
    "href": "api/DataLinq.SQLite.SQLiteDatabaseCreator.html",
    "title": "Class SQLiteDatabaseCreator | DataLinq",
    "summary": "Class SQLiteDatabaseCreator Namespace DataLinq.SQLite Assembly DataLinq.SQLite.dll public class SQLiteDatabaseCreator : IDatabaseProviderCreator Inheritance object SQLiteDatabaseCreator Implements IDatabaseProviderCreator Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Methods IsDatabaseType(string) public bool IsDatabaseType(string typeName) Parameters typeName string Returns bool UseLoggerFactory(ILoggerFactory?) public SQLiteDatabaseCreator UseLoggerFactory(ILoggerFactory? loggerFactory) Parameters loggerFactory ILoggerFactory? Returns SQLiteDatabaseCreator"
  },
  "api/DataLinq.SQLite.SQLiteDatabaseTransaction.html": {
    "href": "api/DataLinq.SQLite.SQLiteDatabaseTransaction.html",
    "title": "Class SQLiteDatabaseTransaction | DataLinq",
    "summary": "Class SQLiteDatabaseTransaction Namespace DataLinq.SQLite Assembly DataLinq.SQLite.dll public class SQLiteDatabaseTransaction : DatabaseTransaction, IDisposable Inheritance object DatabaseAccess DatabaseTransaction SQLiteDatabaseTransaction Implements IDisposable Inherited Members DatabaseTransaction.Status DatabaseTransaction.OnStatusChanged DatabaseTransaction.DbTransaction DatabaseTransaction.Type DatabaseTransaction.SetStatus(DatabaseTransactionStatus) DatabaseTransaction.Rollback() DatabaseTransaction.Commit() DatabaseTransaction.Dispose() DatabaseAccess.ExecuteReader(IDbCommand) DatabaseAccess.ExecuteReader(string) DatabaseAccess.ExecuteScalar(IDbCommand) DatabaseAccess.ExecuteScalar<T>(IDbCommand) DatabaseAccess.ExecuteScalar(string) DatabaseAccess.ExecuteScalar<T>(string) DatabaseAccess.ExecuteNonQuery(IDbCommand) DatabaseAccess.ExecuteNonQuery(string) DatabaseAccess.ReadReader(IDbCommand) DatabaseAccess.ReadReader(string) object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors SQLiteDatabaseTransaction(string, TransactionType) public SQLiteDatabaseTransaction(string connectionString, TransactionType type) Parameters connectionString string type TransactionType SQLiteDatabaseTransaction(IDbTransaction, TransactionType) public SQLiteDatabaseTransaction(IDbTransaction dbTransaction, TransactionType type) Parameters dbTransaction IDbTransaction type TransactionType Methods Commit() public override void Commit() Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public override void Dispose() ExecuteNonQuery(IDbCommand) public override int ExecuteNonQuery(IDbCommand command) Parameters command IDbCommand Returns int ExecuteNonQuery(string) public override int ExecuteNonQuery(string query) Parameters query string Returns int ExecuteReader(string) public override IDataLinqDataReader ExecuteReader(string query) Parameters query string Returns IDataLinqDataReader ExecuteReader(IDbCommand) Close this reader when done! (or use a using-statement) public override IDataLinqDataReader ExecuteReader(IDbCommand command) Parameters command IDbCommand Returns IDataLinqDataReader ExecuteScalar(string) public override object ExecuteScalar(string query) Parameters query string Returns object ExecuteScalar<T>(string) public override T ExecuteScalar<T>(string query) Parameters query string Returns T Type Parameters T ExecuteScalar<T>(IDbCommand) public override T ExecuteScalar<T>(IDbCommand command) Parameters command IDbCommand Returns T Type Parameters T ExecuteScalar(IDbCommand) public override object ExecuteScalar(IDbCommand command) Parameters command IDbCommand Returns object Rollback() public override void Rollback()"
  },
  "api/DataLinq.SQLite.SQLiteDbAccess.html": {
    "href": "api/DataLinq.SQLite.SQLiteDbAccess.html",
    "title": "Class SQLiteDbAccess | DataLinq",
    "summary": "Class SQLiteDbAccess Namespace DataLinq.SQLite Assembly DataLinq.SQLite.dll public class SQLiteDbAccess : DatabaseAccess Inheritance object DatabaseAccess SQLiteDbAccess Inherited Members DatabaseAccess.ExecuteReader(IDbCommand) DatabaseAccess.ExecuteReader(string) DatabaseAccess.ExecuteScalar(IDbCommand) DatabaseAccess.ExecuteScalar<T>(IDbCommand) DatabaseAccess.ExecuteScalar(string) DatabaseAccess.ExecuteScalar<T>(string) DatabaseAccess.ExecuteNonQuery(IDbCommand) DatabaseAccess.ExecuteNonQuery(string) DatabaseAccess.ReadReader(IDbCommand) DatabaseAccess.ReadReader(string) object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors SQLiteDbAccess(string) public SQLiteDbAccess(string connectionString) Parameters connectionString string Methods ExecuteNonQuery(IDbCommand) public override int ExecuteNonQuery(IDbCommand command) Parameters command IDbCommand Returns int ExecuteNonQuery(string) public override int ExecuteNonQuery(string query) Parameters query string Returns int ExecuteReader(IDbCommand) public override IDataLinqDataReader ExecuteReader(IDbCommand command) Parameters command IDbCommand Returns IDataLinqDataReader ExecuteReader(string) public override IDataLinqDataReader ExecuteReader(string query) Parameters query string Returns IDataLinqDataReader ExecuteScalar(string) public override object? ExecuteScalar(string query) Parameters query string Returns object? ExecuteScalar<T>(string) public override T ExecuteScalar<T>(string query) Parameters query string Returns T Type Parameters T ExecuteScalar<T>(IDbCommand) public override T ExecuteScalar<T>(IDbCommand command) Parameters command IDbCommand Returns T Type Parameters T ExecuteScalar(IDbCommand) public override object? ExecuteScalar(IDbCommand command) Parameters command IDbCommand Returns object?"
  },
  "api/DataLinq.SQLite.SQLiteGeneration.html": {
    "href": "api/DataLinq.SQLite.SQLiteGeneration.html",
    "title": "Class SQLiteGeneration | DataLinq",
    "summary": "Class SQLiteGeneration Namespace DataLinq.SQLite Assembly DataLinq.SQLite.dll public class SQLiteGeneration : SqlGeneration Inheritance object SqlGeneration SQLiteGeneration Inherited Members SqlGeneration.SortTablesByForeignKeys(List<TableDefinition>) SqlGeneration.SortViewsByForeignKeys(List<ViewDefinition>) SqlGeneration.IndentationSpaces SqlGeneration.QuoteCharacter SqlGeneration.Buffer SqlGeneration.sql SqlGeneration.NewRow() SqlGeneration.Add(string) SqlGeneration.NewLine() SqlGeneration.ColumnName(string) SqlGeneration.QuotedString(string) SqlGeneration.Space() SqlGeneration.QuotedParenthesis(string) SqlGeneration.Parenthesis(string) SqlGeneration.ParenthesisList(string[]) SqlGeneration.ValueWithSpace(string?) SqlGeneration.CreateTable(string, Action<SqlGeneration>) SqlGeneration.CreateView(string, string) SqlGeneration.Indent() SqlGeneration.NewLineComma() SqlGeneration.DefaultValue(string) SqlGeneration.Nullable(bool) SqlGeneration.Autoincrement(bool) SqlGeneration.Type(string, string, int) SqlGeneration.TypeLength(long?, int?) SqlGeneration.EnumValues(IEnumerable<string>) SqlGeneration.Unsigned(bool?) SqlGeneration.Align(int, string) SqlGeneration.Index(string, string?, string, params string[]) SqlGeneration.PrimaryKey(params string[]) SqlGeneration.UniqueKey(string, params string[]) SqlGeneration.ForeignKey(RelationPart, bool) SqlGeneration.ForeignKey(string?, string, string, string, bool) SqlGeneration.OnUpdateDelete(bool) object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors SQLiteGeneration(int, char, string) public SQLiteGeneration(int indentationSpaces = 4, char quoteChar = '`', string generatedText = \"\") Parameters indentationSpaces int quoteChar char generatedText string Methods UniqueKey(string, params string[]) public override SqlGeneration UniqueKey(string name, params string[] columns) Parameters name string columns string[] Returns SqlGeneration"
  },
  "api/DataLinq.SQLite.SQLiteJournalMode.html": {
    "href": "api/DataLinq.SQLite.SQLiteJournalMode.html",
    "title": "Enum SQLiteJournalMode | DataLinq",
    "summary": "Enum SQLiteJournalMode Namespace DataLinq.SQLite Assembly DataLinq.SQLite.dll public enum SQLiteJournalMode Fields DELETE = 1 MEMORY = 4 OFF = 0 PERSIST = 3 TRUNCATE = 2 WAL = 5"
  },
  "api/DataLinq.SQLite.SQLiteProvider-1.html": {
    "href": "api/DataLinq.SQLite.SQLiteProvider-1.html",
    "title": "Class SQLiteProvider<T> | DataLinq",
    "summary": "Class SQLiteProvider<T> Namespace DataLinq.SQLite Assembly DataLinq.SQLite.dll public class SQLiteProvider<T> : DatabaseProvider<T>, IDatabaseProvider, IDisposable where T : class, IDatabaseModel Type Parameters T Inheritance object DatabaseProvider DatabaseProvider<T> SQLiteProvider<T> Implements IDatabaseProvider IDisposable Inherited Members DatabaseProvider<T>.TypedReadOnlyAccess DatabaseProvider.DatabaseName DatabaseProvider.CsModelType DatabaseProvider.DatabaseType DatabaseProvider.LoggingConfiguration DatabaseProvider.Constants DatabaseProvider.ConnectionString DatabaseProvider.DatabaseAccess DatabaseProvider.ReadOnlyAccess DatabaseProvider.Metadata DatabaseProvider.State DatabaseProvider.GetTableCache(TableDefinition) DatabaseProvider.StartTransaction(TransactionType) DatabaseProvider.Commit<M>(Func<Transaction, M>) DatabaseProvider.Commit(Action<Transaction>) DatabaseProvider.AttachTransaction(IDbTransaction, TransactionType) DatabaseProvider.ToDbCommand(IQuery) DatabaseProvider.GetLastIdQuery() DatabaseProvider.GetParameter(Sql, string, object?) DatabaseProvider.GetParameterValue(Sql, string) DatabaseProvider.GetParameterComparison(Sql, string, Relation, string[]) DatabaseProvider.GetLimitOffset(Sql, int?, int?) DatabaseProvider.GetTableName(Sql, string, string?) DatabaseProvider.GetCreateSql() DatabaseProvider.GetNewDatabaseTransaction(TransactionType) DatabaseProvider.AttachDatabaseTransaction(IDbTransaction, TransactionType) DatabaseProvider.DatabaseExists(string?) DatabaseProvider.FileOrServerExists() DatabaseProvider.GetWriter() DatabaseProvider.Dispose() object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors SQLiteProvider(string) public SQLiteProvider(string connectionString) Parameters connectionString string Properties Constants public override IDatabaseProviderConstants Constants { get; } Property Value IDatabaseProviderConstants DatabaseAccess public override DatabaseAccess DatabaseAccess { get; } Property Value DatabaseAccess Methods AttachDatabaseTransaction(IDbTransaction, TransactionType) public override DatabaseTransaction AttachDatabaseTransaction(IDbTransaction dbTransaction, TransactionType type) Parameters dbTransaction IDbTransaction type TransactionType Returns DatabaseTransaction DatabaseExists(string?) public override bool DatabaseExists(string? databaseName = null) Parameters databaseName string? Returns bool FileOrServerExists() public override bool FileOrServerExists() Returns bool GetCreateSql() public override Sql GetCreateSql() Returns Sql GetLastIdQuery() public override string GetLastIdQuery() Returns string GetLimitOffset(Sql, int?, int?) public override Sql GetLimitOffset(Sql sql, int? limit, int? offset) Parameters sql Sql limit int? offset int? Returns Sql GetNewDatabaseTransaction(TransactionType) public override DatabaseTransaction GetNewDatabaseTransaction(TransactionType type) Parameters type TransactionType Returns DatabaseTransaction GetParameter(Sql, string, object?) public override Sql GetParameter(Sql sql, string key, object? value) Parameters sql Sql key string value object? Returns Sql GetParameterComparison(Sql, string, Relation, string[]) public override Sql GetParameterComparison(Sql sql, string field, Relation relation, string[] key) Parameters sql Sql field string relation Relation key string[] Returns Sql GetParameterValue(Sql, string) public override Sql GetParameterValue(Sql sql, string key) Parameters sql Sql key string Returns Sql GetTableName(Sql, string, string?) public override Sql GetTableName(Sql sql, string tableName, string? alias = null) Parameters sql Sql tableName string alias string? Returns Sql GetWriter() public override IDataLinqDataWriter GetWriter() Returns IDataLinqDataWriter SetJournalMode(SQLiteJournalMode) public void SetJournalMode(SQLiteJournalMode journalMode) Parameters journalMode SQLiteJournalMode ToDbCommand(IQuery) public override IDbCommand ToDbCommand(IQuery query) Parameters query IQuery Returns IDbCommand"
  },
  "api/DataLinq.SQLite.SQLiteProvider.html": {
    "href": "api/DataLinq.SQLite.SQLiteProvider.html",
    "title": "Class SQLiteProvider | DataLinq",
    "summary": "Class SQLiteProvider Namespace DataLinq.SQLite Assembly DataLinq.SQLite.dll public class SQLiteProvider : IDatabaseProviderRegister Inheritance object SQLiteProvider Implements IDatabaseProviderRegister Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Properties HasBeenRegistered public static bool HasBeenRegistered { get; } Property Value bool Methods RegisterProvider() public static void RegisterProvider()"
  },
  "api/DataLinq.SQLite.SQLiteProviderConstants.html": {
    "href": "api/DataLinq.SQLite.SQLiteProviderConstants.html",
    "title": "Class SQLiteProviderConstants | DataLinq",
    "summary": "Class SQLiteProviderConstants Namespace DataLinq.SQLite Assembly DataLinq.SQLite.dll public class SQLiteProviderConstants : IDatabaseProviderConstants Inheritance object SQLiteProviderConstants Implements IDatabaseProviderConstants Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Properties EscapeCharacter public string EscapeCharacter { get; } Property Value string LastInsertCommand public string LastInsertCommand { get; } Property Value string ParameterSign public string ParameterSign { get; } Property Value string SupportsMultipleDatabases public bool SupportsMultipleDatabases { get; } Property Value bool"
  },
  "api/DataLinq.SQLite.SqlFromMetadataFactory.html": {
    "href": "api/DataLinq.SQLite.SqlFromMetadataFactory.html",
    "title": "Class SqlFromMetadataFactory | DataLinq",
    "summary": "Class SqlFromMetadataFactory Namespace DataLinq.SQLite Assembly DataLinq.SQLite.dll public class SqlFromMetadataFactory : ISqlFromMetadataFactory Inheritance object SqlFromMetadataFactory Implements ISqlFromMetadataFactory Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Methods CreateDatabase(Sql, string, string, bool) public Option<int, IDLOptionFailure> CreateDatabase(Sql sql, string databaseName, string connectionString, bool foreignKeyRestrict) Parameters sql Sql databaseName string connectionString string foreignKeyRestrict bool Returns Option<int, IDLOptionFailure> GetCreateTables(DatabaseDefinition, bool) public Option<Sql, IDLOptionFailure> GetCreateTables(DatabaseDefinition metadata, bool foreignKeyRestrict) Parameters metadata DatabaseDefinition foreignKeyRestrict bool Returns Option<Sql, IDLOptionFailure> GetDbType(ColumnDefinition) public static DatabaseColumnType GetDbType(ColumnDefinition column) Parameters column ColumnDefinition Returns DatabaseColumnType"
  },
  "api/DataLinq.SQLite.html": {
    "href": "api/DataLinq.SQLite.html",
    "title": "Namespace DataLinq.SQLite | DataLinq",
    "summary": "Namespace DataLinq.SQLite Classes MetadataFromSQLiteFactory MetadataFromSQLiteFactoryCreator SQLiteDataLinqDataReader SQLiteDataLinqDataWriter Represents a data writer for SQLite database. SQLiteDatabase<T> SQLiteDatabaseCreator SQLiteDatabaseTransaction SQLiteDbAccess SQLiteGeneration SQLiteProvider<T> SQLiteProvider SQLiteProviderConstants SqlFromMetadataFactory Enums SQLiteJournalMode"
  },
  "api/DataLinq.SourceGenerators.ModelGenerator.html": {
    "href": "api/DataLinq.SourceGenerators.ModelGenerator.html",
    "title": "Class ModelGenerator | DataLinq",
    "summary": "Class ModelGenerator Namespace DataLinq.SourceGenerators Assembly DataLinq.Generators.dll [IncrementalGenerator] public class ModelGenerator : IncrementalGenerator, IDisposable Inheritance object IncrementalGenerator ModelGenerator Implements IDisposable Inherited Members IncrementalGenerator.OnInitialize(SgfInitializationContext) IncrementalGenerator.Dispose() IncrementalGenerator.AttachDebugger() IncrementalGenerator.OnException(Exception) IncrementalGenerator.Name IncrementalGenerator.Logger IncrementalGenerator.ExceptionHandler object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ModelGenerator() public ModelGenerator() Methods OnInitialize(SgfInitializationContext) public override void OnInitialize(SgfInitializationContext context) Parameters context SgfInitializationContext"
  },
  "api/DataLinq.SourceGenerators.html": {
    "href": "api/DataLinq.SourceGenerators.html",
    "title": "Namespace DataLinq.SourceGenerators | DataLinq",
    "summary": "Namespace DataLinq.SourceGenerators Classes ModelGenerator"
  },
  "api/DataLinq.Tools.DatabaseCreator.html": {
    "href": "api/DataLinq.Tools.DatabaseCreator.html",
    "title": "Class DatabaseCreator | DataLinq",
    "summary": "Class DatabaseCreator Namespace DataLinq.Tools Assembly DataLinq.Tools.dll public class DatabaseCreator : Generator Inheritance object Generator DatabaseCreator Inherited Members Generator.log Generator.ParseExistingFilesAndDirs(string, List<string>) object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors DatabaseCreator(Action<string>, DatabaseCreatorOptions) public DatabaseCreator(Action<string> log, DatabaseCreatorOptions options) Parameters log Action<string> options DatabaseCreatorOptions Methods Create(DataLinqDatabaseConnection, string, string) public Option<int, IDLOptionFailure> Create(DataLinqDatabaseConnection connection, string basePath, string databaseName) Parameters connection DataLinqDatabaseConnection basePath string databaseName string Returns Option<int, IDLOptionFailure>"
  },
  "api/DataLinq.Tools.DatabaseCreatorError.html": {
    "href": "api/DataLinq.Tools.DatabaseCreatorError.html",
    "title": "Enum DatabaseCreatorError | DataLinq",
    "summary": "Enum DatabaseCreatorError Namespace DataLinq.Tools Assembly DataLinq.Tools.dll public enum DatabaseCreatorError Fields CouldNotCreateDatabase = 2 DestDirectoryNotFound = 0 UnableToParseModelFiles = 1"
  },
  "api/DataLinq.Tools.DatabaseCreatorOptions.html": {
    "href": "api/DataLinq.Tools.DatabaseCreatorOptions.html",
    "title": "Struct DatabaseCreatorOptions | DataLinq",
    "summary": "Struct DatabaseCreatorOptions Namespace DataLinq.Tools Assembly DataLinq.Tools.dll public struct DatabaseCreatorOptions Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.ReferenceEquals(object?, object?) object.ToString()"
  },
  "api/DataLinq.Tools.Generator.html": {
    "href": "api/DataLinq.Tools.Generator.html",
    "title": "Class Generator | DataLinq",
    "summary": "Class Generator Namespace DataLinq.Tools Assembly DataLinq.Tools.dll public class Generator Inheritance object Generator Derived DatabaseCreator ModelGenerator ModelReader SqlGenerator Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors Generator(Action<string>) public Generator(Action<string> log) Parameters log Action<string> Fields log protected Action<string> log Field Value Action<string> Methods ParseExistingFilesAndDirs(string, List<string>) protected IEnumerable<Option<string, IDLOptionFailure>> ParseExistingFilesAndDirs(string basePath, List<string> paths) Parameters basePath string paths List<string> Returns IEnumerable<Option<string, IDLOptionFailure>>"
  },
  "api/DataLinq.Tools.ModelGenerator.html": {
    "href": "api/DataLinq.Tools.ModelGenerator.html",
    "title": "Class ModelGenerator | DataLinq",
    "summary": "Class ModelGenerator Namespace DataLinq.Tools Assembly DataLinq.Tools.dll public class ModelGenerator : Generator Inheritance object Generator ModelGenerator Inherited Members Generator.log Generator.ParseExistingFilesAndDirs(string, List<string>) object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors ModelGenerator(Action<string>, ModelGeneratorOptions) public ModelGenerator(Action<string> log, ModelGeneratorOptions options) Parameters log Action<string> options ModelGeneratorOptions Methods CreateModels(DataLinqDatabaseConnection, string, string) public Option<DatabaseDefinition, IDLOptionFailure> CreateModels(DataLinqDatabaseConnection connection, string basePath, string databaseName) Parameters connection DataLinqDatabaseConnection basePath string databaseName string Returns Option<DatabaseDefinition, IDLOptionFailure>"
  },
  "api/DataLinq.Tools.ModelGeneratorError.html": {
    "href": "api/DataLinq.Tools.ModelGeneratorError.html",
    "title": "Enum ModelGeneratorError | DataLinq",
    "summary": "Enum ModelGeneratorError Namespace DataLinq.Tools Assembly DataLinq.Tools.dll public enum ModelGeneratorError Fields UnableToParseSourceFiles = 0"
  },
  "api/DataLinq.Tools.ModelGeneratorOptions.html": {
    "href": "api/DataLinq.Tools.ModelGeneratorOptions.html",
    "title": "Struct ModelGeneratorOptions | DataLinq",
    "summary": "Struct ModelGeneratorOptions Namespace DataLinq.Tools Assembly DataLinq.Tools.dll public struct ModelGeneratorOptions Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.ReferenceEquals(object?, object?) object.ToString() Constructors ModelGeneratorOptions() public ModelGeneratorOptions() Properties CapitalizeNames public bool CapitalizeNames { readonly get; set; } Property Value bool DeclareEnumsInClass public bool DeclareEnumsInClass { readonly get; set; } Property Value bool OverwriteExistingModels public bool OverwriteExistingModels { readonly get; set; } Property Value bool ReadSourceModels public bool ReadSourceModels { readonly get; set; } Property Value bool SeparateTablesAndViews public bool SeparateTablesAndViews { readonly get; set; } Property Value bool Tables public List<string> Tables { readonly get; set; } Property Value List<string> Views public List<string> Views { readonly get; set; } Property Value List<string>"
  },
  "api/DataLinq.Tools.ModelReader.html": {
    "href": "api/DataLinq.Tools.ModelReader.html",
    "title": "Class ModelReader | DataLinq",
    "summary": "Class ModelReader Namespace DataLinq.Tools Assembly DataLinq.Tools.dll public class ModelReader : Generator Inheritance object Generator ModelReader Inherited Members Generator.log Generator.ParseExistingFilesAndDirs(string, List<string>) object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors ModelReader(Action<string>) public ModelReader(Action<string> log) Parameters log Action<string> Methods Read(DataLinqConfig, string) public Option<bool> Read(DataLinqConfig config, string basePath) Parameters config DataLinqConfig basePath string Returns Option<bool> Read(DataLinqDatabaseConfig, string) public Option<bool> Read(DataLinqDatabaseConfig db, string basePath) Parameters db DataLinqDatabaseConfig basePath string Returns Option<bool>"
  },
  "api/DataLinq.Tools.SqlGenerator.html": {
    "href": "api/DataLinq.Tools.SqlGenerator.html",
    "title": "Class SqlGenerator | DataLinq",
    "summary": "Class SqlGenerator Namespace DataLinq.Tools Assembly DataLinq.Tools.dll public class SqlGenerator : Generator Inheritance object Generator SqlGenerator Inherited Members Generator.log Generator.ParseExistingFilesAndDirs(string, List<string>) object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors SqlGenerator(Action<string>, SqlGeneratorOptions) public SqlGenerator(Action<string> log, SqlGeneratorOptions options) Parameters log Action<string> options SqlGeneratorOptions Methods Create(DataLinqDatabaseConnection, string, string) public Option<Sql, SqlGeneratorError> Create(DataLinqDatabaseConnection connection, string basePath, string writePath) Parameters connection DataLinqDatabaseConnection basePath string writePath string Returns Option<Sql, SqlGeneratorError>"
  },
  "api/DataLinq.Tools.SqlGeneratorError.html": {
    "href": "api/DataLinq.Tools.SqlGeneratorError.html",
    "title": "Enum SqlGeneratorError | DataLinq",
    "summary": "Enum SqlGeneratorError Namespace DataLinq.Tools Assembly DataLinq.Tools.dll public enum SqlGeneratorError Fields CouldNotGenerateSql = 2 DestDirectoryNotFound = 0 UnableToParseModelFiles = 1"
  },
  "api/DataLinq.Tools.SqlGeneratorOptions.html": {
    "href": "api/DataLinq.Tools.SqlGeneratorOptions.html",
    "title": "Struct SqlGeneratorOptions | DataLinq",
    "summary": "Struct SqlGeneratorOptions Namespace DataLinq.Tools Assembly DataLinq.Tools.dll public struct SqlGeneratorOptions Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.ReferenceEquals(object?, object?) object.ToString()"
  },
  "api/DataLinq.Tools.html": {
    "href": "api/DataLinq.Tools.html",
    "title": "Namespace DataLinq.Tools | DataLinq",
    "summary": "Namespace DataLinq.Tools Classes DatabaseCreator Generator ModelGenerator ModelReader SqlGenerator Structs DatabaseCreatorOptions ModelGeneratorOptions SqlGeneratorOptions Enums DatabaseCreatorError ModelGeneratorError SqlGeneratorError"
  },
  "api/DataLinq.Utils.FileSizeExtensions.html": {
    "href": "api/DataLinq.Utils.FileSizeExtensions.html",
    "title": "Class FileSizeExtensions | DataLinq",
    "summary": "Class FileSizeExtensions Namespace DataLinq.Utils Assembly DataLinq.dll public static class FileSizeExtensions Inheritance object FileSizeExtensions Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Methods ToFileSize(long, bool) public static string ToFileSize(this long l, bool hideEmpty = false) Parameters l long hideEmpty bool Returns string"
  },
  "api/DataLinq.Utils.FileSizeFormatProvider.html": {
    "href": "api/DataLinq.Utils.FileSizeFormatProvider.html",
    "title": "Class FileSizeFormatProvider | DataLinq",
    "summary": "Class FileSizeFormatProvider Namespace DataLinq.Utils Assembly DataLinq.dll public class FileSizeFormatProvider : IFormatProvider, ICustomFormatter Inheritance object FileSizeFormatProvider Implements IFormatProvider ICustomFormatter Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Methods Format(string?, object?, IFormatProvider?) Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information. public string Format(string? format, object? arg, IFormatProvider? formatProvider) Parameters format string? A format string containing formatting specifications. arg object? An object to format. formatProvider IFormatProvider? An object that supplies format information about the current instance. Returns string The string representation of the value of arg, formatted as specified by format and formatProvider. GetFormat(Type?) Returns an object that provides formatting services for the specified type. public object? GetFormat(Type? formatType) Parameters formatType Type? An object that specifies the type of format object to return. Returns object? An instance of the object specified by formatType, if the System.IFormatProvider implementation can supply that type of object; otherwise, null."
  },
  "api/DataLinq.Utils.NonNegativeInt.html": {
    "href": "api/DataLinq.Utils.NonNegativeInt.html",
    "title": "Class NonNegativeInt | DataLinq",
    "summary": "Class NonNegativeInt Namespace DataLinq.Utils Assembly DataLinq.dll public class NonNegativeInt Inheritance object NonNegativeInt Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors NonNegativeInt(int) public NonNegativeInt(int initialValue = 0) Parameters initialValue int Properties Value public int Value { get; } Property Value int Methods Decrement() public int Decrement() Returns int Increment() public int Increment() Returns int ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/DataLinq.Utils.TypeUtils.html": {
    "href": "api/DataLinq.Utils.TypeUtils.html",
    "title": "Class TypeUtils | DataLinq",
    "summary": "Class TypeUtils Namespace DataLinq.Utils Assembly DataLinq.dll public static class TypeUtils Inheritance object TypeUtils Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Methods GetNullableConversionType(Type) public static Type GetNullableConversionType(Type returnType) Parameters returnType Type Returns Type"
  },
  "api/DataLinq.Utils.html": {
    "href": "api/DataLinq.Utils.html",
    "title": "Namespace DataLinq.Utils | DataLinq",
    "summary": "Namespace DataLinq.Utils Classes FileSizeExtensions FileSizeFormatProvider NonNegativeInt TypeUtils"
  },
  "api/DataLinq.Workers.CleanCacheWorker.html": {
    "href": "api/DataLinq.Workers.CleanCacheWorker.html",
    "title": "Class CleanCacheWorker | DataLinq",
    "summary": "Class CleanCacheWorker Namespace DataLinq.Workers Assembly DataLinq.dll public class CleanCacheWorker : ThreadWorker<int>, IDisposable Inheritance object ThreadWorker<int> CleanCacheWorker Implements IDisposable Inherited Members ThreadWorker<int>.Status ThreadWorker<int>.ThreadCreator ThreadWorker<int>.WorkQueue ThreadWorker<int>.WaitingUntil ThreadWorker<int>.AddWork(int) ThreadWorker<int>.Start() ThreadWorker<int>.Stop() ThreadWorker<int>.Run() ThreadWorker<int>.Wait(TimeSpan) ThreadWorker<int>.SetStatus(WorkerStatus) ThreadWorker<int>.WorkLoop(IWorkQueue<int>, CancellationToken) ThreadWorker<int>.DoWork(int) ThreadWorker<int>.Dispose() object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors CleanCacheWorker(IDatabaseProvider, IThreadCreator, TimeSpan) public CleanCacheWorker(IDatabaseProvider database, IThreadCreator threadCreator, TimeSpan waitTime) Parameters database IDatabaseProvider threadCreator IThreadCreator waitTime TimeSpan Properties DatabaseProvider protected IDatabaseProvider DatabaseProvider { get; } Property Value IDatabaseProvider WaitTime public TimeSpan WaitTime { get; } Property Value TimeSpan Methods DoWork(int) protected override void DoWork(int value) Parameters value int"
  },
  "api/DataLinq.Workers.IThreadCreator.html": {
    "href": "api/DataLinq.Workers.IThreadCreator.html",
    "title": "Interface IThreadCreator | DataLinq",
    "summary": "Interface IThreadCreator Namespace DataLinq.Workers Assembly DataLinq.dll public interface IThreadCreator Methods CreateNewThread(Action<CancellationToken>) void CreateNewThread(Action<CancellationToken> arbete) Parameters arbete Action<CancellationToken>"
  },
  "api/DataLinq.Workers.IWorkQueue-1.html": {
    "href": "api/DataLinq.Workers.IWorkQueue-1.html",
    "title": "Interface IWorkQueue<T> | DataLinq",
    "summary": "Interface IWorkQueue<T> Namespace DataLinq.Workers Assembly DataLinq.dll public interface IWorkQueue<T> Type Parameters T Properties Count int Count { get; } Property Value int Methods Add(T) void Add(T varde) Parameters varde T Take(CancellationToken) T Take(CancellationToken ct) Parameters ct CancellationToken Returns T Values() T[] Values() Returns T[]"
  },
  "api/DataLinq.Workers.LongRunningTaskCreator.html": {
    "href": "api/DataLinq.Workers.LongRunningTaskCreator.html",
    "title": "Class LongRunningTaskCreator | DataLinq",
    "summary": "Class LongRunningTaskCreator Namespace DataLinq.Workers Assembly DataLinq.dll public class LongRunningTaskCreator : IThreadCreator Inheritance object LongRunningTaskCreator Implements IThreadCreator Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Methods CreateNewThread(Action<CancellationToken>) public void CreateNewThread(Action<CancellationToken> arbete) Parameters arbete Action<CancellationToken>"
  },
  "api/DataLinq.Workers.ThreadWorker-1.html": {
    "href": "api/DataLinq.Workers.ThreadWorker-1.html",
    "title": "Class ThreadWorker<T> | DataLinq",
    "summary": "Class ThreadWorker<T> Namespace DataLinq.Workers Assembly DataLinq.dll public abstract class ThreadWorker<T> : IDisposable Type Parameters T Inheritance object ThreadWorker<T> Implements IDisposable Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors ThreadWorker(IThreadCreator) public ThreadWorker(IThreadCreator threadCreator) Parameters threadCreator IThreadCreator Properties Status public WorkerStatus Status { get; } Property Value WorkerStatus ThreadCreator protected IThreadCreator ThreadCreator { get; } Property Value IThreadCreator WaitingUntil public DateTime? WaitingUntil { get; } Property Value DateTime? WorkQueue protected IWorkQueue<T> WorkQueue { get; } Property Value IWorkQueue<T> Methods AddWork(T) public void AddWork(T work) Parameters work T Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() DoWork(T) protected abstract void DoWork(T value) Parameters value T Run() public void Run() SetStatus(WorkerStatus) protected void SetStatus(WorkerStatus status) Parameters status WorkerStatus Start() public void Start() Stop() public void Stop() Wait(TimeSpan) protected void Wait(TimeSpan tid) Parameters tid TimeSpan WorkLoop(IWorkQueue<T>, CancellationToken) protected void WorkLoop(IWorkQueue<T> queue, CancellationToken ct) Parameters queue IWorkQueue<T> ct CancellationToken"
  },
  "api/DataLinq.Workers.WorkQueue-1.html": {
    "href": "api/DataLinq.Workers.WorkQueue-1.html",
    "title": "Class WorkQueue<T> | DataLinq",
    "summary": "Class WorkQueue<T> Namespace DataLinq.Workers Assembly DataLinq.dll public class WorkQueue<T> : IWorkQueue<T> Type Parameters T Inheritance object WorkQueue<T> Implements IWorkQueue<T> Inherited Members object.Equals(object?) object.Equals(object?, object?) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object?, object?) object.ToString() Constructors WorkQueue(IProducerConsumerCollection<T>) public WorkQueue(IProducerConsumerCollection<T> collection) Parameters collection IProducerConsumerCollection<T> Properties Count public int Count { get; } Property Value int Methods Add(T) public void Add(T varde) Parameters varde T NewStandardQueue() public static WorkQueue<T> NewStandardQueue() Returns WorkQueue<T> Take(CancellationToken) public T Take(CancellationToken ct) Parameters ct CancellationToken Returns T Values() public T[] Values() Returns T[]"
  },
  "api/DataLinq.Workers.WorkerStatus.html": {
    "href": "api/DataLinq.Workers.WorkerStatus.html",
    "title": "Enum WorkerStatus | DataLinq",
    "summary": "Enum WorkerStatus Namespace DataLinq.Workers Assembly DataLinq.dll public enum WorkerStatus Fields Running = 2 Stopped = 0 Stopping = 1 WaitingForJob = 3 WaitingUntilTime = 4"
  },
  "api/DataLinq.Workers.html": {
    "href": "api/DataLinq.Workers.html",
    "title": "Namespace DataLinq.Workers | DataLinq",
    "summary": "Namespace DataLinq.Workers Classes CleanCacheWorker LongRunningTaskCreator ThreadWorker<T> WorkQueue<T> Interfaces IThreadCreator IWorkQueue<T> Enums WorkerStatus"
  },
  "api/DataLinq.html": {
    "href": "api/DataLinq.html",
    "title": "Namespace DataLinq | DataLinq",
    "summary": "Namespace DataLinq Namespaces DataLinq.Attributes DataLinq.Cache DataLinq.Config DataLinq.ErrorHandling DataLinq.Exceptions DataLinq.Instances DataLinq.Interfaces DataLinq.Logging DataLinq.Metadata DataLinq.Mutation DataLinq.MySql DataLinq.Query DataLinq.SQLite DataLinq.SourceGenerators DataLinq.Tools DataLinq.Utils DataLinq.Workers Classes DataReader DataWriter Provides extension methods for converting data to be written to the database. Database<T> The main interface for working with the database. DatabaseAccess DatabaseProvider Abstract base class for database providers, encapsulating common database operations and properties. DatabaseProvider<T> Provides a generic abstract database provider for a specific type of database model. DatabaseTransaction DatabaseTransactionStatusChangeEventArgs DbRead<T> Represents a class to connect the models to Linq. IModelExtensions Queryable<T> Interfaces IDataLinqDataReader IDataLinqDataWriter Interface for writing data to a database. Enums DatabaseTransactionStatus DatabaseType Enumeration of database types."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "API Documentation | DataLinq",
    "summary": "API Documentation Welcome to the DataLinq API documentation."
  },
  "docs/CLI Documentation.html": {
    "href": "docs/CLI Documentation.html",
    "title": "DataLinq CLI Documentation | DataLinq",
    "summary": "DataLinq CLI Documentation The DataLinq CLI tool lets you manage your database and model generation tasks from the command line. It is installed as a global dotnet tool. Below is a summary of the available commands and their options. General Options All commands accept the following general options: -v, --verbose Enable verbose output for more detailed logging. -c, --config Specify the path to the configuration file (e.g., datalinq.json). (Optional) Commands 1. create-database Purpose: Creates the target database using the model metadata and configuration settings. Usage: datalinq create-database [options] Options: -d, --datasource Description: Name of the database instance on the server or the file on disk (depending on the connection type). Optional -n, --name Description: The name as defined in the DataLinq configuration file. Optional -t, --type Description: Specifies the database connection type to create the database for (e.g., MySQL, SQLite). Optional 2. create-sql Purpose: Generates SQL scripts for creating the database schema based on the model definitions. Usage: datalinq create-sql -o <output-file> [other options] Options: -o, --output Description: Path to the output file where the generated SQL script will be saved. Required -d, --datasource Description: Name of the database instance on the server or the file on disk. Optional -n, --name Description: The name as defined in the DataLinq configuration file. Optional -t, --type Description: Specifies the database connection type (e.g., MySQL, SQLite). Optional Additionally, the general options (-v, --verbose and -c, --config) can also be used. 3. create-models Purpose: Generates data model classes (both immutable and mutable) directly from your database schema. Usage: datalinq create-models [options] Options: -s, --skip-source Description: Skip reading from source models during generation (boolean flag). Optional -d, --datasource Description: Name of the database instance on the server or the file on disk. Optional -n, --name Description: The name as defined in the DataLinq configuration file. Optional -t, --type Description: Specifies the database connection type (e.g., MySQL, SQLite). Optional General options (-v, --verbose and -c, --config) are also available. 4. list Purpose: Lists all databases defined in your DataLinq configuration file. Usage: datalinq list [options] Options: -v, --verbose Description: Enable verbose output for detailed listing. Optional -c, --config Description: Path to the configuration file (e.g., datalinq.json). Optional Example Usages Creating a Database: datalinq create-database -n MyDatabase -t MySQL Generating SQL Script: datalinq create-sql -o schema.sql -n MyDatabase -t SQLite Generating Models: datalinq create-models -n MyDatabase --skip-source Listing Databases from Config: datalinq list -c ./datalinq.json -v"
  },
  "docs/Caching and Mutation.html": {
    "href": "docs/Caching and Mutation.html",
    "title": "Caching & Mutation Strategies | DataLinq",
    "summary": "Caching & Mutation Strategies DataLinq’s design is built around maximizing read performance and ensuring consistency in a concurrent environment. This is achieved by splitting data access into two distinct phases—query translation with selective data fetching, and subsequent caching/mutation workflows. In this document, we explain how DataLinq optimizes queries by first retrieving primary keys only, then fetching missing rows in bulk; how relation caches are built and maintained; and we provide detailed examples covering various mutation scenarios, including transactions with commits and rollbacks. 1. Query Execution & Selective Data Fetching Primary Key-First Querying When you execute a LINQ query (e.g. using standard LINQ expressions), DataLinq translates it in two stages: Primary Key Extraction: The query is first executed to return only the primary keys of the matching rows. This lightweight step reduces overhead by avoiding the full object materialization if parts of the data are already cached. Cache Check & Bulk Fetching: With the list of primary keys in hand, the system checks the Global Cache. Cached Rows: Rows already present are returned directly. Missing Rows: If some rows are not in the cache, DataLinq fetches them in a single bulk call from the database. These new rows are then added to the cache so that subsequent requests benefit from the cached data. This two-step approach ensures that even complex queries incur minimal overhead by avoiding redundant data loads. Relation Cache Mechanics DataLinq maintains an index for foreign key relations, effectively building a relation cache. Here’s how it works: Indexing Foreign Keys: For each relation, an index is created that maps a foreign key to its corresponding primary keys. This index enables rapid resolution of related entities by simply looking up the primary key(s) in the relation cache. Dynamic Updates: Whenever data mutations occur (inserts, updates, or deletes), the relation cache is updated automatically. This means that even if a mutation occurs within a transaction, related collections are refreshed so that navigating relationships always returns the current state of the data. These mechanisms are critical for scenarios where related data is frequently accessed, and they ensure that even after mutations, the caches remain consistent with the underlying database . 2. Mutation Workflow Immutable by Default, Mutable on Demand All records are initially loaded as immutable objects for safety and performance. When a change is needed, you call the Mutate() method. This creates a mutable copy with the following steps: Conversion to Mutable: The immutable object is converted into a mutable instance. For example, if required properties are specified, the mutation process enforces that they are provided. Performing Mutations: Changes can be made on the mutable object using standard property setters. DataLinq supports not only simple property changes but also updates where some properties are required for the mutation to be valid. Transactional Updates: The mutable object is then committed within a transaction: Commit: On a successful transaction, a new immutable instance is created from the updated mutable data. This new instance is added to the Global Cache, replacing the outdated version. Rollback: If an error occurs during the transaction, the mutation is discarded and the original immutable object remains unchanged. Automatic Maintenance of Relation Collections One key advantage of DataLinq is that related collections (such as a department’s list of managers) are automatically kept up to date: Within Transactions: Even if mutations occur as part of a larger transaction, the relation caches are updated so that any subsequent query on the same entity returns the latest set of related entities. Post-Mutation Synchronization: Once a mutation is committed, the system updates both the Global Cache and any relevant relation indices, ensuring that all relationships reflect the new state. 3. Practical Code Examples Example 1: Simple Mutation and Update // Retrieve an immutable record from the cache or database var user = usersDb.Query().Users.Single(u => u.Id == 1); // Create a mutable copy with updated required properties (if any) var mutableUser = user.Mutate(u => u.Name = \"Updated Name\"); // Commit the mutation within a transaction, updating the cache var updatedUser = mutableUser.Save(); Example 2: Inserting a New Record with Required Properties // For inserting, the mutable object can be initialized with required properties var newUser = new MutableUser(requiredProperty1, requiredProperty2); newUser.Name = \"New User\"; newUser.Email = \"new.user@example.com\"; // Insert the new record and commit the transaction var insertedUser = newUser.Insert(); Example 3: Transaction with Multiple Mutations, Commit & Rollback // Start a transaction using (var transaction = usersDb.BeginTransaction()) { try { // Update an existing user var user = usersDb.Query().Users.Single(u => u.Id == 1); var updatedUser = user.Mutate(u => u.Name = \"Transactional Name\").Save(transaction); // Insert a new record within the same transaction var newUser = new MutableUser(requiredProperty1, requiredProperty2) { Name = \"New Transaction User\", Email = \"txn.user@example.com\" }; var insertedUser = newUser.Insert(transaction); // The relation cache for associated entities (like user orders) is updated automatically // Commit the transaction to apply all changes transaction.Commit(); } catch (Exception ex) { // Rollback in case of any error transaction.Rollback(); throw; } } In this example, both the update and insert are performed within a single transaction. If any step fails, the rollback ensures that neither change is applied. Additionally, any related collections (for instance, if the user has associated orders or contacts) are automatically refreshed to reflect the new state. 4. Summary DataLinq’s approach to caching and mutation is designed to: Optimize Queries: By initially fetching only primary keys and then bulk-loading missing rows, it minimizes overhead. Ensure Consistency: Immutable objects, combined with transactional caches, guarantee that data remains consistent even during concurrent operations. Automate Relation Updates: Relation caches maintain indices of foreign key mappings, ensuring that related collections are always current—even when data is mutated within a transaction. Provide a Robust Mutation API: With clear methods for updating, inserting, committing, and rolling back changes, DataLinq makes it straightforward to work with data while keeping performance and integrity front and center. These strategies empower developers to build high-performance, scalable applications with confidence."
  },
  "docs/Configuration files.html": {
    "href": "docs/Configuration files.html",
    "title": "DataLinq Configuration Files | DataLinq",
    "summary": "DataLinq Configuration Files DataLinq uses JSON-based configuration files to define your databases, connections, and model-generation settings. There are two configuration files: datalinq.json: The primary configuration file. datalinq.user.json: An optional file used to override or extend settings from datalinq.json for user-specific or local changes. These files are used by the DataLinq CLI tool, it reads the main configuration file and then checks if a corresponding datalinq.user.json exists (by replacing the extension); if found, its settings are merged with the main configuration file. Overall Structure Both configuration files adhere to the same schema. The top-level JSON object contains: Databases: An array of database configuration objects. Database Configuration Object Each entry in the Databases array represents a database and includes the following properties: Name (string, required): The unique name of the database configuration. This name is later used to select a specific database. CsType (string, optional): The C# type name to be used when generating database classes. If not specified, the value of Name is used by default. Namespace (string, optional): The C# namespace for generated models. Defaults to \"Models\" if not provided. SourceDirectories (array of strings, optional): A list of directories where the source model files are located. These paths are used during model generation. DestinationDirectory (string, optional): The output directory for generated model files. Tables (array of strings, optional): A filter list specifying which tables to include when generating models. Views (array of strings, optional): Similar to Tables, but for database views. UseRecord (boolean, optional): Determines whether generated models should use C# record types. Defaults to false. UseFileScopedNamespaces (boolean, optional): When set to true, the generated code will use file-scoped namespaces (available in C# 10+). UseNullableReferenceTypes (boolean, optional): Enables nullable reference types in the generated code. CapitalizeNames (boolean, optional): If true, property names and other generated identifiers will be capitalized. RemoveInterfacePrefix (boolean, optional): When true (the default), any leading \"I\" on interface names is removed during code generation. SeparateTablesAndViews (boolean, optional): Indicates whether generated files should be placed in separate folders based on whether they represent tables or views. Connections (array, required): An array of connection objects (see below) that specify how to connect to the database. FileEncoding (string, required): The encoding to use when reading/writing files (for example, \"UTF8\" or \"UTF8BOM\"). If omitted, UTF-8 without BOM is used by default. Connection Configuration Object Each connection object (found in the Connections array) defines how to connect to the database. Its properties include: Type (string, required): A string that identifies the type of database connection. This value is parsed to match a supported database provider (for example, \"MySQL\" or \"SQLite\"). DatabaseName (string, optional): An alternative name for the database; if not provided, the value of DataSourceName is used. DataSourceName (string, required): The primary name for the data source. Depending on the connection type, this might represent a server name, file name, or other identifier. ConnectionString (string, required): The full connection string used to establish a connection with the database. Merging datalinq.user.json When DataLinq reads the configuration using the DataLinqConfig.FindAndReadConfigs method \uE200cite\uE202turn1file0\uE201, it: Reads the main datalinq.json file. Checks for a corresponding datalinq.user.json file (by replacing the extension). Merges the settings from the user file into the main configuration. In this process, for any matching database (by name), properties in the user file override those in the main file. For example, if CapitalizeNames or the list of Connections are specified in the user file, those values will replace or augment the main configuration. Example: datalinq.json Below is a simplified example of a datalinq.json file: { \"Databases\": [ { \"Name\": \"MyDatabase\", \"CsType\": \"MyDatabase\", \"Namespace\": \"MyApp.Models\", \"SourceDirectories\": [ \"Models/Source\" ], \"DestinationDirectory\": \"Models/Generated\", \"Tables\": [ \"Users\", \"Orders\" ], \"Views\": [ \"ActiveUsers\" ], \"UseRecord\": true, \"UseFileScopedNamespaces\": false, \"UseNullableReferenceTypes\": true, \"CapitalizeNames\": true, \"RemoveInterfacePrefix\": true, \"SeparateTablesAndViews\": false, \"FileEncoding\": \"UTF8\" } ] } Example: datalinq.user.json A datalinq.user.json file may override or extend the main settings. For example: { \"Databases\": [ { \"Name\": \"MyDatabase\", \"CapitalizeNames\": false, \"Connections\": [ { \"Type\": \"SQLite\", \"DataSourceName\": \"MyDatabase.db\", \"ConnectionString\": \"Data Source=MyDatabase.db;Cache=Shared;\" } ] } ] } In this example, for the database named \"MyDatabase\", the user-specific file turns off name capitalization and provides a connection using SQLite. During initialization, these settings will be merged with the ones from the main file. Summary The datalinq.json file is the main configuration file and defines an array of databases with their settings. This file should be checked in to source control. datalinq.user.json is an optional file that overrides or extends settings from datalinq.json, allowing local or user-specific configuration changes, like connections strings and secret passwords. This file should typically not be checked in to source control."
  },
  "docs/Contributing.html": {
    "href": "docs/Contributing.html",
    "title": "Contributing to DataLinq | DataLinq",
    "summary": "Contributing to DataLinq Thank you for your interest in contributing to DataLinq! We welcome improvements of all kinds—from bug fixes and documentation updates to entirely new features. This guide will walk you through the contribution process and provide best practices for working with the DataLinq codebase. 1. Getting Started 1.1 Fork and Clone Fork the Repository: Click the Fork button on the project’s GitHub page to create a personal copy of the repository. Clone Your Fork Locally: git clone https://github.com/YourUsername/DataLinq.git cd DataLinq Add Upstream Remote (Optional but Recommended): git remote add upstream https://github.com/DataLinqOrg/DataLinq.git This helps you keep your fork in sync with the official repository. 1.2 Setting Up Your Environment Install .NET SDK: DataLinq targets .NET 6 or higher. Make sure you have the corresponding .NET SDK installed. Restore NuGet Packages: From the root directory, run: dotnet restore Build the Solution: dotnet build Ensure the solution builds without errors before proceeding. 1.3 Exploring the Codebase src Contains the main DataLinq libraries (e.g., DataLinq.Core, DataLinq.MySql, DataLinq.SQLite, etc.). docs Holds the project’s documentation, including this contributing guide. tests (If present) Contains unit and integration tests. Some test projects may also live under src/DataLinq.Tests or similar directories. 2. Coding Guidelines Style and Conventions: Use .NET naming conventions (PascalCase for classes and methods, camelCase for private fields, etc.). Keep lines reasonably short (e.g., under 120 characters). Avoid overly long methods; aim for clear, maintainable functions. Comments and Documentation: Document complex logic or non-obvious decisions using /// XML doc comments or inline comments. If you’re adding a new public API, consider adding or updating doc comments to explain usage. Commit Messages: Use short, descriptive commit messages. Include references to issues or pull requests when applicable (e.g., “Fix #123: Add caching for user profiles”). 3. Testing 3.1 Running Tests DataLinq includes unit and integration tests to ensure reliability and prevent regressions: dotnet test Unit Tests: Focus on isolated components (e.g., caching, query parsing). Integration Tests: Validate end-to-end scenarios, often requiring a running database (e.g., MySQL or SQLite). 3.2 Adding New Tests Whenever you fix a bug or add a feature: Write or Update Tests: Confirm that your changes work as intended and do not break existing functionality. Test Locally: Ensure all tests pass before pushing your changes. 4. Submitting a Pull Request Create a Feature Branch: git checkout -b feature/my-new-feature Make Your Changes: Commit early and often. Keep commits atomic and focused on a single topic. Push to Your Fork: git push origin feature/my-new-feature Open a Pull Request: On GitHub, open a PR from your feature branch to the main (or relevant) branch in the official DataLinq repository. Review Process: A maintainer or community member may review your changes. Be prepared to address comments or requested revisions. Once approved, the PR is merged into the main repository. 5. Communication Issues: Use GitHub Issues for bug reports, feature requests, and discussion. Provide clear steps to reproduce bugs or rationale for new features. Discussions / Forum (If Available): If the project maintains a separate discussion board, consider posting general or open-ended questions there. 6. Code of Conduct We strive to maintain a friendly, respectful community. By participating in this project, you agree to uphold a Code of Conduct that fosters a welcoming environment for all contributors. 7. License DataLinq is open source software, released under the MIT License. By contributing, you agree that your contributions will be licensed under the same license. 8. Thank You! Your contributions make DataLinq a better tool for everyone. Whether you’re fixing a typo, adding a new feature, or improving test coverage, we appreciate your effort. Feel free to reach out if you have any questions about contributing. Happy coding!"
  },
  "docs/Implementing a new backend.html": {
    "href": "docs/Implementing a new backend.html",
    "title": "Implementing a New Backend for DataLinq | DataLinq",
    "summary": "Implementing a New Backend for DataLinq DataLinq’s architecture is designed to be backend agnostic by isolating database-specific functionality behind well-defined interfaces and adapter classes. To implement a new backend, you must address three key areas: Reading Metadata Definitions Generating SQL Scripts from Models Reading and Writing Data to the Backend Below is a breakdown of what each area entails and how existing providers (e.g., MySQL and SQLite) implement these features. 1. Reading Metadata Definitions Purpose The first step in integrating a new backend is to read and interpret the database’s schema. This process converts system-specific metadata (often stored in system tables like information_schema) into DataLinq’s internal representations (such as DatabaseDefinition, TableDefinition, and ColumnDefinition). How It’s Done in DataLinq Metadata Factories: DataLinq uses specialized factories (e.g., MetadataFromMySqlFactory and MetadataFromSQLiteFactory) to connect to the database, query system tables, and build metadata objects. These factories map database-specific types to C# types and determine properties like primary keys, foreign keys, and indices. Core Methods: The factory methods parse table structures, extract column information, and apply attributes (such as [Table], [Column], and [Relation]) to construct a complete metadata model. This model then drives both code generation and SQL script creation. Steps to Implement Create a New Metadata Factory: Implement a factory class similar to MetadataFromMySqlFactory that connects to your new backend. Query the backend’s system tables to retrieve schema information. Map the retrieved metadata to DataLinq’s internal types (e.g., creating instances of TableDefinition and ColumnDefinition). Type Mapping: Implement logic to convert your database’s native data types into C# types using a helper similar to MetadataTypeConverter. Testing: Ensure that the factory properly handles edge cases (e.g., composite primary keys, nullable columns) and that the resulting metadata accurately reflects the database schema. 2. Generating SQL Scripts from Models Purpose For SQL-based databases, it’s essential to generate database schema creation scripts based on the metadata extracted from your models. This script ensures that your database schema aligns with the definitions in your code. How It’s Done in DataLinq SQL Generation Factories: Providers like MySQL and SQLite include classes such as SqlFromMetadataFactory that take a DatabaseDefinition object and produce a complete SQL script. Script Components: The generator constructs SQL commands for creating tables, indices, and constraints. It leverages the metadata information (table names, column definitions, indices) to produce the necessary DDL statements. Steps to Implement Develop a SQL Generator Class: Create a class similar to SqlFromMetadataFactory that accepts the metadata and outputs SQL commands. Handle database-specific syntax, including differences in data types, quoting, and command structure. Integration with Metadata: Ensure that your generator reads from the same metadata produced by your new metadata factory. Verify that table definitions, columns (with attributes like NOT NULL, AUTO_INCREMENT), primary keys, foreign keys, and indices are correctly translated into SQL. Output Options: Provide options for writing the script to a file or returning it as a string for further processing. 3. Reading and Writing Data to the Backend Purpose Beyond schema management, the new backend must support data operations such as querying, inserting, updating, and deleting records. DataLinq abstracts these operations into a set of classes and interfaces to maintain consistency across backends. How It’s Done in DataLinq Data Access Classes: Each provider implements classes for data reading and writing. For example, MySQL has MySqlDataLinqDataReader and MySqlDataLinqDataWriter that wrap native ADO.NET objects. Connection and Transaction Management: Providers include classes such as MySqlDatabase and MySqlDatabaseTransaction that implement operations defined in the common interfaces (e.g., IDatabaseProvider, IDataSourceAccess). Query Execution: The LINQ query translator works with the backend provider to execute queries. The provider must support: Executing parameterized queries. Returning results as DataReaders that can be mapped to immutable objects. Handling batch operations for efficient bulk fetches (such as fetching missing rows based on primary key lists). Steps to Implement Implement the Provider Interface: Create a new provider class (e.g., NewBackendProvider) that implements required interfaces like IDatabaseProvider. Define methods for opening connections, executing queries, and managing transactions. Data Reader and Writer Classes: Develop classes that wrap the new backend’s native data reader/writer objects. Ensure these classes support efficient reading (e.g., supporting the “primary key-first” approach) and writing of data. Transaction Handling: Implement a transaction class to support commit and rollback operations. Make sure that updates to the Global Cache and relation caches occur only after successful commits. Error Handling and Logging: Integrate robust exception management and logging similar to what is present in the MySQL/SQLite implementations. 4. Registering the New Backend Once the new backend classes are implemented, you must register the provider with DataLinq. This is typically done in your application’s startup code: // Register the new backend provider NewBackendProvider.RegisterProvider(); The RegisterProvider method should add your provider to DataLinq’s internal registry so that it can be selected via the configuration file (e.g., in datalinq.json, specify \"Type\": \"NewBackend\"). 5. Summary To implement a new backend in DataLinq, follow these key steps: Metadata Reading: Develop a metadata factory to query system tables, map types, and construct a complete schema definition. SQL Script Generation: Create a SQL generator class that translates metadata into DDL statements tailored to your backend’s syntax. Data Access: Implement provider classes for opening connections, executing queries, and managing transactions. Develop data reader and writer classes to support efficient data operations. Registration: Register your new backend so that it becomes available for configuration and use within the DataLinq framework. This modular approach—demonstrated by the existing MySQL and SQLite implementations—ensures that new backends can be added with minimal impact on the core architecture while offering all the benefits of DataLinq’s caching, mutation, and query optimization strategies."
  },
  "docs/Index.html": {
    "href": "docs/Index.html",
    "title": "DataLinq Documentation Index | DataLinq",
    "summary": "DataLinq Documentation Index Welcome to the DataLinq documentation! This index is designed to help you quickly find the resources you need—whether you’re just starting to use DataLinq or diving into advanced customization and backend development. 1. Getting Started & Usage CLI Documentation Provides an overview of the DataLinq CLI tool and its commands (create-database, create-sql, create-models, list) along with usage examples. Configuration Files Describes the structure and options for datalinq.json and datalinq.user.json, explaining how to configure your database connections, model generation settings, and more. Querying (TBD) Mutation (TBD) Transactions (TBD) Required, Optional and Default Values (TBD) Supported LINQ Queries (TBD) Alternative Query Syntax (TBD) Cache Invalidation (TBD) Attributes (TBD) API Documentation with Examples (TBD) 2. Internals & Architecture Project Specification Outlines DataLinq’s overarching goals, design principles, and architectural vision. Technical Documentation Offers an in-depth overview of the library’s core components, covering caching, mutation, query processing, and general design decisions. Metadata Structure Explains how DataLinq maps databases to C# models through its metadata model—covering tables, columns, relationships, and more. Source Generator Describes how DataLinq’s source generator creates immutable and mutable model classes from the metadata, minimizing boilerplate and ensuring consistency. Query Translator Details how LINQ expressions are converted into backend-specific SQL, including an explanation of expression visitors and other helper classes. Caching and Mutation A dedicated guide to DataLinq’s caching architecture (including the primary-key-first approach) and mutation workflow (immutable data, transactional updates, commits, and rollbacks). 3. Extensibility & Advanced Development Implementing a new backend Walks through creating support for additional data sources by implementing metadata readers, SQL generation logic, and data read/write classes behind DataLinq’s provider interfaces. Additional Topics Contribution Guidelines A guide for new contributors covering coding standards, how to run tests, and submission guidelines. Testing & Benchmarking (TBD) Documentation detailing how to run and write tests for DataLinq, as well as interpret performance benchmarks. FAQ / Troubleshooting (TBD) A list of frequently asked questions, common issues, and troubleshooting tips. Migration & Extensibility (TBD) Guidance on migrating from earlier versions or more advanced customizations—some aspects are partially covered in “Implementing a new backend.”"
  },
  "docs/Metadata Structure.html": {
    "href": "docs/Metadata Structure.html",
    "title": "| DataLinq",
    "summary": "Metadata Structure DataLinq’s source generator relies on a rich metadata model to describe both the database schema and the corresponding object models. This metadata serves as the foundation for generating the strongly typed immutable and mutable classes, as well as their related interfaces and extension methods. The key components of this metadata structure are outlined below. 1. DatabaseDefinition Purpose: Represents an entire database, including its name, caching policies, and the collection of tables/views (encapsulated as TableModels). Key Points: Holds global attributes (such as caching limits and cleanup settings) that apply to the database. Contains a set of TableModels which tie together table definitions and their associated model definitions. Maintains a C# type declaration that is used to generate the main database class. 2. TableModel and TableDefinition TableModel: Acts as the bridge between the database and the model. It links: ModelDefinition: The description of the C# model. TableDefinition: The structure of the underlying table or view. A designated property name (used in generated code) that represents the table within the database class. TableDefinition: Describes a single database table or view. Contains the database table name (DbName), a collection of ColumnDefinition objects, and an array of primary key columns. Supports indices via a collection of ColumnIndex objects, which are later used for relation mapping and performance optimizations. Indicates whether the definition represents a table or a view, and holds any caching configuration specific to the table. 3. ColumnDefinition and ColumnIndex ColumnDefinition: Represents a single column in a table. Specifies the column’s database name, the associated database types (through DatabaseColumnType), and flags such as whether the column is a primary key, auto-incremented, nullable, or part of a foreign key. Links to a ValueProperty that holds the C# type information and additional attributes (e.g., default values). ColumnIndex: Describes an index over one or more columns. Records the index name, type (such as BTREE, FULLTEXT, etc.), and its characteristic (e.g., primary key, unique). Aggregates columns that participate in the index and supports relation mapping by storing associated RelationPart objects. 4. CsTypeDeclaration Purpose: Encapsulates C# type information for models and properties. Key Points: Stores the type’s name, namespace, and categorizes it (e.g., Class, Record, Interface, Primitive). Used extensively during source generation to ensure that generated code uses the correct type names and that interface prefixes are removed as needed. Supports both runtime types (via reflection) and syntax-based types (from Roslyn), ensuring consistency between the defined models and the generated output. 5. ModelDefinition and PropertyDefinition ModelDefinition: Captures the definition of a model class. Includes its C# type declaration, a collection of using directives, and a list of properties. Differentiates between value properties and relation properties, and records any model-level attributes. Serves as the blueprint for generating the immutable and mutable classes. PropertyDefinition: The base abstraction for model properties. ValueProperty: Represents a simple column mapping, including type information, nullability, size, and any default values or enumeration details. RelationProperty: Represents relationships between models (foreign key associations), holding a reference to a RelationPart that links the property to the corresponding column index and relation definition. 6. RelationDefinition and RelationPart RelationDefinition: Defines a relationship between two tables. Typically represents a one-to-many relationship, specifying the constraint name and linking the foreign key side to the candidate key side. RelationPart: Describes one side of a relationship (either the foreign key or candidate key). Associates with a ColumnIndex and includes a C# name that is used in the generated model to reference the relationship. Provides helper methods to navigate to the “other side” of the relation, enabling bidirectional navigation in the ORM. Summary The metadata structure in DataLinq forms a comprehensive representation of the database schema and its corresponding C# models. It is divided into: Database and Table Definitions: Which capture the overall database and its individual tables or views. Column and Index Definitions: Which detail the structure of each table and support the mapping of relations. Model and Property Definitions: Which describe the C# representations of the data, including type details, attributes, and relationships. Relation Structures: Which define how tables are linked through foreign keys and candidate keys. This metadata is then consumed by the source generator to produce consistent, strongly typed model classes that adhere to DataLinq’s design principles of immutability, efficient caching, and seamless querying."
  },
  "docs/Project Specification.html": {
    "href": "docs/Project Specification.html",
    "title": "DataLinq Project Specification | DataLinq",
    "summary": "DataLinq Project Specification 1. Introduction 1.1 Purpose DataLinq is designed to be a lightweight, high-performance Object-Relational Mapping (ORM) framework that leverages immutable objects and robust caching to optimize read-heavy scenarios. By focusing on minimal memory allocations and rapid data retrieval, DataLinq aims to provide a reliable and efficient solution for smaller projects and databases. Additionally, the framework is built to support multiple backend data sources—including traditional relational databases (like MariaDB and SQLite) as well as non-relational formats (such as JSON, CSV, and XML)—thus offering flexibility for diverse application requirements. 1.2 Scope DataLinq encompasses: Immutable Entity Management: Utilizing a source generator, the framework automatically creates both immutable and mutable classes for each data model. Immutable objects ensure thread-safety and predictability during read operations. Caching: A dual-level caching strategy is implemented: A global cache stores immutable entities for reuse across sessions and requests. A transaction-specific cache holds objects undergoing updates to maintain consistency. Cache invalidation is managed automatically during mutations, manually by the user, via time-based expiration, backend polling, or notifications (e.g., through Apache Kafka). LINQ Integration: The primary querying mechanism is LINQ, offering a concise and familiar interface for developers. Backend Flexibility: The design facilitates easy swapping of backend sources with minimal code changes. This is essential for projects that may need to switch data storage strategies over time. Testability: Data Layer Testing: DataLinq is designed to make it straightforward for developers to test the data layer of their projects by providing clear interfaces and dedicated mocking classes. ORM Test Suite: In parallel, DataLinq itself includes a comprehensive suite of unit, integration, and benchmarking tests to ensure reliability and performance. 1.3 Audience This document is primarily intended for: Developers: Who will be integrating DataLinq into their applications and need to understand its design, usage, and customization points. Contributors: Who are interested in extending or improving the framework, ensuring adherence to its architectural principles and performance targets. 2. Project Overview 2.1 Goals and Objectives DataLinq is driven by several key objectives: Performance: Optimize read operations through aggressive caching and an immutable object model, with a target of zero memory allocations on cache hits. Simplicity and Flexibility: Provide a minimal yet powerful API modeled after Entity Framework, enabling seamless switching between different backend data sources with minimal code adjustments. Extensibility: Support various data sources including MariaDB, SQLite, JSON, CSV, and XML, thereby accommodating diverse application needs. Testability: Enable developers to easily test the data layers of their projects by offering clear interfaces and built-in mocking capabilities. Maintain a robust internal test suite to validate the ORM's performance and correctness. Scalability: Cater primarily to heavy-read scenarios in small-to-medium projects while laying the groundwork for potential expansion. 2.2 High-Level Architecture The architecture of DataLinq is organized around several core components: Immutable Entity Model: Data models are represented as immutable objects to ensure thread-safety and consistency. Mutations are handled by converting immutable objects into new mutable instances for modification. Once updated, these changes are reflected back into the cache by generating a new immutable object. Caching Mechanism: A global cache holds immutable objects to maximize reusability across sessions. A transactional cache manages updates within individual operations, ensuring that changes are consistently applied before synchronizing with the global cache. Multiple cache invalidation strategies are employed, including automatic invalidation on mutation, manual refresh, timer-based expiry, backend polling, and external notifications. LINQ-Based Querying: The ORM leverages LINQ as its primary query language, providing a concise and familiar syntax for data retrieval and manipulation. Backend Integration: Initially, DataLinq supports MariaDB and SQLite. Its modular design makes it straightforward to switch backends or add new ones, ensuring minimal impact on existing code when migrating between data sources. Source Generation: A source generator automates the creation of immutable and mutable classes for each model, reducing boilerplate code and enforcing consistency across the codebase. Testability: The framework is built with testability in mind, offering interfaces and mocking classes to facilitate both the testing of applications that use DataLinq and the rigorous internal testing of the ORM itself. Below is the updated System Architecture and Design section incorporating your feedback: 3. System Architecture and Design 3.1 Immutable Entity Model Immutable Objects: Data models in DataLinq are represented as immutable objects, ensuring thread-safety and consistency. Once created, the state of these objects cannot change. Mutation Workflow: When an update is required, the framework provides a Mutate() method. This method converts the immutable object into a mutable version for modifications. After saving these changes to the backend within a transaction, a new immutable instance is generated to replace the previous version in the cache. Notably, mutable objects are only used transiently in user code and are never stored in any cache. Source Generation: A source generator automates the creation of both immutable and mutable classes from abstract model classes. This minimizes boilerplate code and ensures consistency across the codebase. 3.2 Caching Mechanism Global Cache: A static, application-wide cache holds immutable objects. These objects are shared across sessions and threads, allowing rapid access with zero memory allocations on cache hits. Transactional Cache: During a transaction, any updated objects are read back as new immutable objects after being saved to the backend. These new immutable objects are stored in a dedicated transaction cache to maintain consistency until the transaction is complete. Cache Invalidation Strategies: Cache consistency is maintained through several mechanisms: Automatic Invalidation: Cache entries are automatically updated when objects are mutated within the library. Manual Refresh: Developers can explicitly refresh cache entries when necessary. Time-Based Expiry: Entries can expire based on a configurable timer. Backend Polling: The system may poll the backend using lightweight techniques (e.g., hash or timestamp comparisons) to detect changes. Event-Driven Updates: External notifications (such as through Apache Kafka) can trigger immediate cache invalidation upon data modifications. 3.3 LINQ-Based Querying Primary Query Interface: DataLinq uses LINQ as its core querying language, offering a concise, expressive, and familiar syntax for data retrieval and manipulation. Query Translation: LINQ queries are translated into the appropriate backend-specific commands, abstracting the underlying data source so that the same syntax works regardless of whether data comes from MariaDB, SQLite, or other supported formats. 3.4 Backend Integration and Modularity Pluggable Architecture: DataLinq is designed with a modular architecture that allows developers to easily swap one backend for another with minimal code changes. Backend interactions are abstracted behind interfaces and adapter patterns. Initial and Future Backends: While initial support is focused on MariaDB and SQLite, the architecture is readily extendable to additional data sources such as JSON, CSV, and XML. 3.5 Concurrency and Thread-Safety Immutability Benefits: The immutable design reduces the need for complex synchronization since immutable objects can be safely shared across threads. Thread-Safe Collections: For mutable scenarios, such as managing the transactional cache, thread-safety is ensured using locking mechanisms and thread-safe collections like ConcurrentDictionary. Minimized Locking: The overall design minimizes locking by isolating mutable operations and leveraging immutable data structures, which enhances performance in concurrent environments. 3.6 Source Generation and Code Consistency Automated Code Generation: The source generator creates both immutable and mutable classes automatically from abstract model definitions. This enforces a consistent pattern across data models and reduces the need for repetitive code. Reduction of Boilerplate: Automating the generation of model classes allows developers to focus on business logic, leading to more maintainable and readable code. 3.7 Testability and Mocking Clear Interfaces: The architecture is built around well-defined interfaces, making it simple to substitute real implementations with mocks during testing. Mocking Capabilities: Dedicated mocking classes are provided, enabling developers to write comprehensive tests for their applications without needing a live backend connection. Internal Test Suite: DataLinq includes a robust internal test suite with unit tests, integration tests, and performance benchmarks to ensure both correctness and efficiency. 3.8 CLI Tool and Code Generation Model Class Generation: DataLinq provides a CLI tool that reads the database structure and generates abstract model classes. These abstract classes serve as the basis from which immutable and mutable classes are generated via the source generator. Database Script Generation: The CLI tool can also generate a SQL script to create the database schema based on the model classes. This feature ensures consistency between the codebase and the actual database structure, facilitating smoother migrations and initial setups. 4. Functional Requirements 4.1 Data Access Operations CRUD Support: Create: Developers can insert new records by creating a new mutable instance derived from the abstract model. Once the instance is saved to the backend, a corresponding immutable object is generated and added to the global cache. Read: LINQ serves as the primary interface for querying data. Immutable objects are fetched from the global cache when available, ensuring minimal memory allocations and rapid retrieval. Update: Updates are initiated by calling the Mutate() method on an immutable object to obtain a mutable version. After modifications are saved to the backend within a transaction, a new immutable instance is created and cached. Delete: Deletion operations remove records from the backend. Upon successful deletion, the relevant immutable object is removed from both the global and transactional caches. Transaction Management: Each operation that involves mutations takes place within a transactional context. This ensures that all updates within a transaction are managed consistently. The transactional cache holds the new immutable objects after successful backend writes until the transaction is complete. 4.2 Query Processing and LINQ Integration LINQ-Based Queries: Developers write queries using LINQ syntax, which is then translated into backend-specific commands (e.g., SQL for MariaDB or SQLite). This translation layer abstracts away backend details, allowing a unified querying experience. Advanced query capabilities, including filtering, ordering, grouping, and joining across entities, are supported through standard LINQ expressions. Query Translation Layer: The translation component maps LINQ expressions to the specific SQL dialect or other query languages supported by the backend. This ensures that queries are both efficient and compatible with the targeted data source. 4.3 Data Mapping and Model Management Model Class Generation: A CLI tool is provided to generate abstract model classes by reading the database schema. These abstract classes serve as the blueprint for both immutable and mutable classes produced by the source generator. This process ensures that the generated model accurately reflects the structure of the underlying database, reducing manual coding and potential errors. Database Schema Generation: The CLI tool can also generate SQL scripts that create the database schema based on the model classes. This ensures consistency between the data models in the code and the actual database structure, simplifying initial setup and migrations. 4.4 Caching Behavior Global Cache Operations: When a read operation is performed, the system first checks the global cache for an immutable object. If present, the object is returned immediately without additional allocations. Cache misses trigger a backend query, after which the retrieved data is converted into an immutable object and stored in the global cache. Transactional Cache Operations: Updated objects within a transaction are handled by storing their newly generated immutable versions in a transactional cache. This cache isolates changes until the transaction is fully committed, after which the global cache is updated accordingly. Cache Invalidation: The system supports multiple invalidation strategies to ensure data consistency. These include: Automatic Invalidation: Upon mutation, affected cache entries are immediately refreshed. Manual Refresh: Developers can explicitly trigger a cache update. Time-Based Expiry: Cache entries can be configured to expire after a set period. Backend Polling and Notifications: Lightweight checks (via hash or timestamp) or external notifications (e.g., Apache Kafka) ensure the cache reflects the current state of the backend. 4.5 Backend Flexibility Seamless Backend Switching: DataLinq’s architecture abstracts backend-specific details through interfaces and adapter patterns. This allows developers to switch from one data source to another (e.g., from MariaDB to SQLite) with minimal or no changes to the application code. The modular design ensures that backend-specific optimizations or query translations can be implemented independently without affecting the overall API. 4.6 Error Handling and Logging Robust Exception Management: All CRUD and query operations include error handling to manage scenarios like connection failures, query timeouts, or data inconsistencies. Detailed logging mechanisms are integrated to capture the sequence of operations, errors, and any cache invalidation events, aiding in troubleshooting and performance tuning. 5. Non-Functional Requirements 5.1 Performance Optimized Read Operations: DataLinq is designed for heavy-read scenarios, with a target of zero memory allocations when fetching immutable objects from the cache. This is achieved through aggressive caching and careful management of object creation. Efficient Query Translation: LINQ queries are translated into backend-specific commands with minimal overhead, ensuring that query execution remains fast and efficient across different data sources. Benchmarking: A suite of performance benchmarks will be maintained to measure key metrics such as query latency, cache hit rates, and overall system throughput. These benchmarks will guide ongoing optimizations and ensure that performance targets are met. 5.2 Scalability Designed for Small-to-Medium Projects: While DataLinq is optimized for projects with smaller databases and heavy-read operations, the architecture is modular enough to be extended to larger datasets if needed. Modular Backend Integration: The ability to switch backends with minimal code changes ensures that the system can scale horizontally by integrating with more powerful data sources or distributed systems as project demands grow. Concurrent Access: The use of immutable objects and thread-safe collections minimizes the need for locks and supports high levels of concurrent access without significant performance degradation. 5.3 Maintainability and Extensibility Automated Code Generation: The use of a source generator to create both immutable and mutable classes from abstract model definitions reduces boilerplate code, leading to a more maintainable and consistent codebase. Clear Separation of Concerns: By abstracting backend interactions behind interfaces and adapter patterns, DataLinq allows developers to add or update components without affecting the overall system. This design simplifies future enhancements and troubleshooting. Comprehensive Documentation: Detailed documentation, including this specification, usage guides, and API references, will be maintained to ensure that developers and contributors can quickly understand and work with the framework. 5.4 Reliability and Robustness Robust Error Handling: All operations, including CRUD actions and query processing, are designed with robust exception management and logging. This ensures that failures are handled gracefully, and sufficient diagnostic information is available for troubleshooting. Internal Test Suite: A comprehensive suite of unit tests, integration tests, and performance benchmarks will be continually run to ensure that any changes maintain the expected behavior and performance characteristics of DataLinq. 5.5 Security Considerations Data Integrity: Mechanisms such as transactional caches and backend polling help maintain data consistency, reducing the risk of stale or inconsistent data being served. Secure Access: Although DataLinq focuses primarily on read performance, care is taken to ensure that backend connections and query executions adhere to security best practices, including proper exception handling and input validation. 6. API Design and Query Interface 6.1 Overview DataLinq’s API is designed to be both intuitive and powerful, drawing inspiration from established ORM frameworks like Entity Framework. The API is primarily built around LINQ, ensuring that developers can use a familiar and expressive syntax for data access and manipulation while benefiting from DataLinq’s high-performance caching and immutable data structures. 6.2 LINQ-Based Querying Unified Query Syntax: Developers write queries using standard LINQ expressions. DataLinq translates these queries into the appropriate backend-specific commands (e.g., SQL for MariaDB or SQLite), abstracting the underlying complexity and allowing the same query syntax to work across different data sources. Advanced Query Capabilities: The query interface supports advanced LINQ operations, including filtering, ordering, grouping, and joining, to cater to a wide range of data retrieval scenarios. This flexibility empowers developers to construct complex queries while keeping the code concise and readable. Query Translation Layer: A dedicated translation layer interprets LINQ expressions and optimizes them for the target backend. This ensures efficient query execution and allows for backend-specific optimizations without requiring changes to the developer’s query code. 6.3 Fluent Interface and API Methods Fluent API Design: DataLinq’s API incorporates a fluent interface for constructing queries and data operations. This design promotes readability and a natural coding style, enabling developers to chain methods together in a clear and coherent manner. Core Methods and Operations: Query Initialization: Methods for initiating LINQ queries that automatically check the global cache before executing a backend query. CRUD Operations: Create: Methods to generate new mutable instances from abstract model definitions, followed by saving these instances to the backend and updating the global cache with a new immutable object. Read: Methods that prioritize fetching immutable objects from the cache for read operations, falling back to backend queries as needed. Update: A Mutate() method to create a mutable copy of an immutable object for modifications. After saving changes within a transaction, a new immutable instance is produced and stored. Delete: Methods to remove records from the backend along with corresponding cache updates. Transaction Management: Methods that allow developers to execute a group of operations within a transactional context, ensuring that all updates are isolated and consistent until the transaction is committed. 6.4 Extensibility and Backend Switching Backend Abstraction: The API is designed with clear separation between the data access layer and backend-specific implementations. This is achieved through well-defined interfaces and adapter patterns, which enable developers to switch between different backends (e.g., MariaDB to SQLite) with minimal code changes. Custom Extensions: Developers can extend the API by implementing custom adapters or overriding default behaviors. This modular design ensures that DataLinq can evolve to support additional backends and specialized query optimizations without altering the core API. 6.5 Integration with Testing and Mocking Mocking Capabilities: To support robust testing of applications using DataLinq, the API exposes interfaces and provides dedicated mocking classes. This allows developers to simulate data layer interactions without requiring a live backend connection. Seamless Data Layer Testing: The API is designed to facilitate the testing of data access code. Clear and consistent interfaces ensure that unit tests can easily substitute real implementations with mocks, enabling comprehensive testing of both query logic and transactional behaviors. Below is a draft for the remaining sections of the DataLinq specification document: 7. Data Models and Backend Integration 7.1 Data Models Entity Definitions: DataLinq’s data models are defined via abstract base classes that represent the schema of the underlying data. These abstract classes are used by a source generator to automatically create both immutable and mutable concrete classes. Relationship Mapping: The framework supports various types of relationships—such as one-to-one, one-to-many, and many-to-many. These relationships are defined within the abstract models and are translated into the corresponding database relationships (foreign keys, join tables, etc.) during the model generation process. Schema Synchronization: A CLI tool is provided to read the database schema and generate the corresponding abstract model classes. Conversely, the same tool can generate SQL scripts to create or update the database schema based on the current model definitions, ensuring consistency between code and database. 7.2 Backend Integration Adapter Pattern: DataLinq abstracts backend-specific details using well-defined interfaces and adapter patterns. Each supported backend (e.g., MariaDB, SQLite) implements a common interface for CRUD operations and query execution, allowing the core framework to remain agnostic of the underlying data source. Modular Integration: The modular design facilitates the easy addition of new backends. Developers can implement additional adapters for other data sources (such as JSON, CSV, or XML) without altering the main codebase. This separation of concerns ensures that backend optimizations or changes do not affect the API or core logic. Configuration and Switching: Configuration options allow developers to specify the desired backend with minimal changes to the application code. The architecture is designed so that switching between supported data sources is a streamlined process. 8. Testing and Benchmarking Strategy 8.1 Testing Methodology Unit Testing: Each component of DataLinq, from the immutable model generation to cache management and query translation, is covered by comprehensive unit tests. These tests validate the correctness of individual functions and modules. Integration Testing: Integration tests are used to ensure that the various components work seamlessly together. This includes testing the end-to-end process of data retrieval, manipulation, and caching across different backends. Data Layer Testing for Client Applications: The framework provides clear interfaces and mocking capabilities so that developers can write tests for the data layer of their own projects without needing a live backend connection. 8.2 Benchmarking Performance Benchmarks: A dedicated suite of performance benchmarks is maintained to measure: Query latency and throughput Cache hit rates and memory allocation metrics (with a focus on achieving zero allocations for cache hits) Transaction processing times Continuous Integration: Benchmark tests are integrated into the CI/CD pipeline to ensure that performance regressions are caught early. Regular reporting of benchmark results helps guide ongoing optimizations. Monitoring and Logging: Detailed logging mechanisms capture performance-related metrics and cache events. These logs provide insights for performance tuning and troubleshooting. 9. Future Enhancements and Roadmap 9.1 Planned Features Expanded Backend Support: Future releases may include native support for additional data sources, such as NoSQL databases or distributed storage systems. Advanced Query Optimizations: Enhancements to the LINQ query translation layer could include more sophisticated optimizations, such as query caching and dynamic query planning tailored to specific backends. Enhanced Caching Strategies: Further improvements in caching may involve more granular invalidation policies, adaptive cache sizing, and integration with external cache providers. Developer Tooling: Additional CLI features and graphical tools could be introduced to assist developers in model management, schema migration, and performance monitoring. 9.2 Roadmap and Community Involvement Release Phases: The project roadmap outlines incremental release phases that focus on core functionality first, followed by performance optimizations and expanded backend integrations. Community Contributions: DataLinq welcomes community involvement. Clear contribution guidelines, a roadmap for feature requests, and regular community updates will be provided to foster an active development community. Documentation and Support: Ongoing efforts will be made to enhance documentation and provide comprehensive usage guides, tutorials, and API references to support both new and experienced developers. 10. Appendices 10.1 Glossary ORM (Object-Relational Mapping): A programming technique for converting data between incompatible type systems in object-oriented programming languages. LINQ (Language Integrated Query): A querying syntax integrated into .NET languages for working with data in a consistent manner. Immutable Object: An object whose state cannot be modified after it is created. Mutable Object: An object that can be modified after creation. Cache: A storage layer used to temporarily store frequently accessed data for faster retrieval. Adapter Pattern: A design pattern that allows incompatible interfaces to work together. CRUD: An acronym for Create, Read, Update, Delete—basic operations for persistent storage. 10.2 References Entity Framework Documentation: Provides context for LINQ-based querying and ORM design patterns. Design Patterns Literature: Sources on the adapter pattern, immutability, and caching strategies that inform DataLinq’s architecture. Performance Benchmarking Tools: Documentation for the benchmarking tools and techniques used within the project."
  },
  "docs/Query Translator.html": {
    "href": "docs/Query Translator.html",
    "title": "| DataLinq",
    "summary": "Query Translation and Execution DataLinq’s query translation subsystem transforms LINQ expressions into SQL commands tailored to the underlying database. This process is multi-staged, ensuring that the query is both optimized and fully parameterized before execution. The following subsections describe the key components and their roles. 1. Expression Simplification and Evaluation Evaluator.cs Purpose: Before translation begins, DataLinq partially evaluates the expression tree to simplify constant sub-expressions. Key Components: Nominator: Traverses the tree to determine which nodes can be evaluated locally. Parameters are explicitly excluded so that only independent expressions are replaced. SubtreeEvaluator: Replaces nominated subtrees with constant expressions by compiling and invoking them. Outcome: This reduces the complexity of the expression tree and ensures that only the relevant, variable-dependent parts are translated into SQL. 2. Queryable Interface and Integration Queryable.cs Role: This class provides the entry point for LINQ queries on DataLinq. It integrates with Remotion.Linq—a powerful query parsing framework—to interpret the LINQ expression trees. Mechanism: The default query parser is used to generate a QueryModel. The Queryable then hands off the QueryModel to our custom query executor. 3. Query Execution via QueryExecutor QueryExecutor.cs Overview: The QueryExecutor is central to transforming a QueryModel (obtained from Remotion.Linq) into a complete SQL statement. Steps in Query Translation: Extract QueryModel: The executor recursively examines the expression tree to extract the QueryModel, handling subqueries, member accesses, method calls, and unary expressions. Parse Body Clauses: Iterates over the query’s body clauses (such as WhereClause and OrderByClause). Uses specialized visitors (described below) to translate these clauses into SQL fragments. Result Operators: Recognizes operators such as Take, Skip, First(), Single(), etc. These operators adjust the SQL query by setting LIMIT, OFFSET, or ensuring only a specific number of rows are returned. Projection: The method GetSelectFunc<T> builds a selector function from the QueryModel’s SelectClause, handling both simple member accesses and more complex constructions (via anonymous types). Execution: After building the SQL query using the translator, the QueryExecutor calls the provider’s execution methods to retrieve data. Retrieved rows are mapped back to immutable model instances using the InstanceFactory. 4. Type System and Dynamic Determination TypeSystem.cs Function: Determines the element type of a sequence, especially when dealing with generic IEnumerable<T> types. This utility is critical when processing LINQ queries that return collections, ensuring that the correct model type is used during projection. 5. Clause Visitors OrderByVisitor.cs Functionality: Walks through the expression tree for OrderBy clauses. Extracts column information from member expressions and instructs the SQL query to apply ordering (ascending or descending) accordingly. WhereVisitor.cs Responsibilities: Traverses the expression tree representing a Where clause. Handles binary expressions (e.g., comparisons), method calls (for operations such as Contains, StartsWith, etc.), and logical operators (AND, OR, NOT). Converts each operation into its SQL equivalent by invoking helper methods that add SQL predicates. 6. Building WHERE Clauses Where.cs and WhereGroup.cs Where.cs: Represents individual conditions. Supports operations like equality, inequality, LIKE, IN, and range comparisons. Generates parameterized SQL snippets to ensure safety and performance. WhereGroup.cs: Allows grouping of multiple conditions using Boolean logic (AND/OR). Provides methods to combine conditions, add parentheses, and support nested groups. Works in tandem with the WhereVisitor to build the full WHERE clause. 7. SQL Query Construction SqlQuery.cs Purpose: Aggregates the different parts of a query—SELECT, FROM, JOIN, WHERE, ORDER BY, LIMIT, and OFFSET—into a complete SQL statement. Features: Handles aliasing, table naming, and column selection. Delegates parts of the SQL construction to helper methods and visitors. Integrates with the provider to ensure that database-specific syntax is respected (e.g., escape characters, parameter prefixes). Sql.cs Role: Acts as a mutable string builder for SQL commands. Maintains a list of parameters and manages parameter indexing. Provides methods to add text, format strings, join multiple clauses, and produce the final SQL command text. 8. DML Operations: Insert, Update, and Delete Insert.cs: Constructs an INSERT INTO command using values from the mutable model. Parameterizes the values and, if required, appends a command to retrieve the last inserted ID. Update.cs: Builds an UPDATE command with a SET clause derived from the model’s changed properties. Appends a WHERE clause to target specific rows. Delete.cs: Constructs a DELETE FROM command, leveraging the WHERE clause to specify which row(s) to remove. 9. JOIN Clauses Join.cs Functionality: Represents JOIN operations (inner, left outer, right outer). Provides an On method to specify join conditions, which are internally represented as a nested WhereGroup. Generates the appropriate JOIN clause in SQL, including table names, aliases, and ON conditions. 10. Miscellaneous Utilities Literal.cs: Represents literal SQL strings that can be embedded directly into queries. Useful for scenarios where a raw SQL fragment needs to be incorporated. QueryUtils.cs: Contains helper methods for parsing table and column names and extracting aliases. Simplifies the handling of name formats, ensuring consistency across queries. OrderBy.cs: Encapsulates details for ordering, including the column, alias, and direction (ascending or descending). Formats the ORDER BY clause using the database provider’s escape characters. IQueryPart.cs and QueryResult.cs: Define abstractions for parts of a query and for representing query results. Though QueryResult is minimal, it serves as a placeholder for future enhancements in result handling. Summary The Query Translator in DataLinq represents a cohesive system that: Simplifies and partially evaluates LINQ expression trees to isolate variable-dependent components. Integrates with Remotion.Linq to produce a QueryModel from high-level LINQ queries. Uses specialized visitors (WhereVisitor, OrderByVisitor) to convert LINQ clauses into SQL predicates. Builds complete SQL commands by assembling SELECT, FROM, JOIN, WHERE, ORDER BY, and LIMIT/OFFSET clauses. Handles DML operations (Insert, Update, Delete) with full parameterization. Leverages dynamic type determination and projection to convert SQL results back into immutable model instances."
  },
  "docs/Source Generator.html": {
    "href": "docs/Source Generator.html",
    "title": "| DataLinq",
    "summary": "Source Generator Overview The DataLinq source generator automates the creation of immutable and mutable model classes, along with associated interfaces and extension methods. Its primary goal is to eliminate boilerplate code while ensuring that the generated models accurately reflect the underlying database schema and developer-defined attributes. The source generator accomplishes this by analyzing existing source code to build a comprehensive metadata representation, then using that metadata to produce additional source files that are incorporated into the compilation. Key Components and Workflow 1. Model and Syntax Collection Syntax Provider: The generator starts by scanning the source code using Roslyn’s syntax provider. It identifies candidate model declarations by checking for classes that implement one of the key model interfaces (e.g., ITableModel, IViewModel, or custom variants). The predicate function (IsModelDeclaration) quickly filters out irrelevant syntax nodes, while a transformation function extracts the corresponding TypeDeclarationSyntax for further analysis. 2. Metadata Extraction SyntaxParser: Processes the collected syntax trees to extract model information. It parses class declarations to create a ModelDefinition that includes C# type details, properties, attributes, and using directives. It distinguishes between value properties and relation properties, building a detailed blueprint for each model. Metadata Factories: Two primary factories convert syntax into metadata: MetadataFromModelsFactory: Consumes the TypeDeclarationSyntax nodes to produce a DatabaseDefinition that aggregates all model definitions, table definitions, and relational mappings. MetadataFromFileFactory: Offers an alternative approach by reading source files from specified directories, enabling external models to be integrated into the metadata. MetadataFactory and Transformers: The MetadataFactory converts ModelDefinition instances into TableDefinition or ViewDefinition objects, applying attributes such as [Table], [UseCache], and caching limits. The MetadataTransformer further refines the metadata, for example, by removing interface prefixes and updating constraint names as needed. MetadataTypeConverter assists by mapping C# type names to their database equivalents and calculating sizes and nullability. 3. File Generation GeneratorFileFactory: This component is responsible for producing the output files based on the extracted metadata. It defines options such as namespace, tab indentation, and whether to generate records or use file-scoped namespaces. The factory constructs file headers (including using directives and namespace declarations), generates the body of the file by combining model properties, attributes, and method definitions, and then appends footers. It produces files for both the main database definition and each individual table or view model. ModelFileFactory: Further refines the file generation for individual models. It creates files that include generated interfaces, immutable class definitions, mutable class definitions, and extension methods. This component ensures that all aspects of a model (from column mapping to relation handling) are represented in the generated code. 4. Integration into Compilation ModelGenerator (IIncrementalGenerator): The entry point for the source generator. It registers the syntax provider to continuously monitor changes in the source code. The generator combines the collected syntax nodes with the overall compilation and then passes them to the metadata factories. Generated files are then added to the compilation context via context.AddSource, ensuring that they become part of the project without requiring manual inclusion. Configuration and Options: The generator checks compilation options (such as nullable reference types) and applies settings accordingly. This ensures that generated code aligns with the project’s language version and coding standards. Summary The DataLinq source generator operates in four key phases: Collection: It scans the codebase for model declarations using Roslyn’s syntax provider. Metadata Extraction: It transforms syntax nodes into rich metadata representations, capturing database schema, column definitions, relations, and model attributes. File Generation: Using the metadata, it generates source files that define immutable and mutable models, interfaces, and extension methods. These files include all necessary attributes, property definitions, and helper methods for CRUD operations. Compilation Integration: The generated files are seamlessly added to the compilation, ensuring that the ORM remains in sync with the underlying model definitions. This modular approach minimizes boilerplate, enforces consistency, and allows developers to focus on business logic rather than repetitive code. The source generator’s design also facilitates easy customization and extension, making it a core strength of the DataLinq project."
  },
  "docs/Technical documentation.html": {
    "href": "docs/Technical documentation.html",
    "title": "DataLinq Technical Documentation | DataLinq",
    "summary": "Below is a draft of the technical documentation for DataLinq. This document covers the architectural overview, core components, caching and mutation subsystems, query handling, and testing strategies. It’s intended to help developers and contributors understand how the library works internally and to serve as a reference for future improvements. DataLinq Technical Documentation 1. Overview DataLinq is a lightweight, high-performance ORM designed primarily for read-heavy scenarios in small to medium projects. The library emphasizes immutability, efficient caching, and seamless backend integration. Its core features include: Immutable Models: Models are represented as immutable objects to ensure thread-safety and minimize side effects during data reads. When updates are necessary, the system creates a mutable copy via a defined mutation workflow. Source Generation: A source generator produces both immutable and mutable classes from abstract model definitions. This reduces boilerplate and enforces a consistent pattern across the codebase. LINQ Integration: Queries are written using standard LINQ expressions, which are translated into backend-specific commands, allowing a unified querying experience. Robust Caching: A multi-layered caching subsystem—including row, index, and key caches—ensures that repeated data accesses incur minimal overhead. Backend Flexibility: The architecture abstracts backend details behind interfaces and adapters, enabling easy switching between data sources (e.g., MariaDB, SQLite, JSON, CSV). 2. Architecture DataLinq is organized into several interconnected layers that work together to deliver its performance and flexibility: Model Layer: Consists of abstract model classes decorated with attributes (e.g., [Table], [Column], [PrimaryKey]) that describe how classes map to database tables. These definitions are used by the source generator to create concrete immutable and mutable classes (see Department.cs \uE200cite\uE202turn0file0\uE201, Employee.cs \uE200cite\uE202turn0file2\uE201). Instance Creation and Mutation: Immutable objects are created dynamically based on RowData provided by data readers. When mutation is required, methods like Mutate() generate a mutable version, which can be updated and then saved back to the backend. The mutation workflow ensures that only immutable instances are stored in caches, preserving thread-safety and performance (see Immutable.cs \uE200cite\uE202turn1file2\uE201 and Mutable.cs \uE200cite\uE202turn1file6\uE201). Caching Subsystem: The caching mechanism is divided into several parts: RowCache: Caches immutable row objects keyed by their primary keys, tracking insertion ticks and sizes for eviction based on time, row count, or memory limits (see RowCache.cs \uE200cite\uE202turn2file2\uE201). IndexCache and KeyCache: Manage mappings between foreign keys and primary keys, and cache key instances for fast lookups (see IndexCache.cs \uE200cite\uE202turn2file0\uE201 and KeyCache.cs \uE200cite\uE202turn2file1\uE201). TableCache: Aggregates the various caches for an entire table, provides methods to update or remove rows based on changes, and supports preloading indices for faster query responses (see TableCache.cs \uE200cite\uE202turn2file3\uE201). Query Engine: DataLinq uses LINQ as the primary query language. LINQ expressions are parsed and translated into backend-specific SQL (or other query languages), with support for filtering, ordering, grouping, and pagination. The query system leverages caching to avoid unnecessary database round trips, as demonstrated in the extensive unit tests (see QueryTests.cs \uE200cite\uE202turn2file9\uE201). Testing Infrastructure: The library is accompanied by a comprehensive suite of unit and integration tests. These tests verify everything from model instantiation and mutation to complex LINQ query operations and cache behavior (see CacheTests.cs \uE200cite\uE202turn2file5\uE201, MutationTests.cs \uE200cite\uE202turn2file8\uE201, and CoreTests.cs \uE200cite\uE202turn2file6\uE201). 3. Core Components 3.1 Model and Source Generation Abstract Models: Developers define models using abstract classes and decorate them with attributes to specify table names, column types, and relationships. For example, the Department class declares properties like DeptNo and Name, and defines relations to employees and managers. Source-Generated Classes: A source generator processes these abstract definitions to generate: Immutable classes: Provide read-only access to data, with lazy loading of related objects. Mutable classes: Allow modification of model properties via a Mutate() method, and support transactional updates. Interfaces: Generated interfaces (e.g., IDepartmentWithChangedName) ensure consistency and facilitate mocking in tests. 3.2 Instance Management and Mutation Immutable Base Class: The base class for immutable models handles: Retrieving values from underlying RowData. Lazy evaluation of properties. Managing relations through helper methods that load related entities only when needed. Mutable Wrapper: The Mutable<T> class encapsulates changes in a separate MutableRowData structure. This ensures that modifications are isolated until explicitly committed, after which a new immutable instance is generated to update the cache. Factory Methods: The InstanceFactory provides methods to create immutable instances dynamically. Reflection is used to instantiate models based on metadata extracted from attributes. 3.3 Caching Mechanisms RowCache: Stores immutable instances keyed by their primary keys. Tracks insertion ticks and sizes to enforce eviction policies based on time, count, or memory usage. This ensures repeated reads return cached objects without additional allocations. IndexCache and KeyCache: IndexCache: Maps foreign keys to arrays of primary keys and maintains a tick queue to remove old entries. KeyCache: Caches key instances to prevent redundant key creation, enhancing lookup performance. TableCache: Combines row and index caches for a given table. Handles state changes such as inserts, updates, and deletions by updating the caches accordingly. It also supports methods for preloading indices and retrieving rows with or without ordering. 3.4 Query Handling LINQ Integration: Queries are written in LINQ, and the query engine translates them into backend-specific SQL commands. The translation layer is capable of handling various operations such as: Filtering using standard where clauses. Ordering, grouping, and pagination (using methods like OrderBy, Skip, and Take). Joins and relation traversals by leveraging the relation properties defined in models. Cache-Aware Query Execution: When a query is executed, the system first checks the cache (via TableCache and RowCache) for existing rows. If a row is missing, it retrieves the row data from the database, creates an immutable instance, and adds it to the cache. 3.5 Testing and Examples Unit Tests: The testing suite covers all aspects of the library: Cache Tests: Validate that duplicate rows are not created, and that eviction policies based on time, row count, and memory size work as expected. Mutation Tests: Ensure that mutable instances correctly capture changes, can be reset, and that saving changes properly updates the backend and cache. Query Tests: Provide extensive examples of LINQ query usage, demonstrating filtering, ordering, grouping, and handling of unsupported operations. Integration Tests: The DatabaseFixture sets up real database connections (e.g., to MariaDB and SQLite) and uses generated test data (via Bogus) to ensure that the entire flow—from data retrieval and caching to mutation and query execution—operates correctly. 4. Detailed Caching Workflow The caching subsystem is critical for achieving the zero-allocation goal in read-heavy scenarios. Here’s a closer look at the workflow: Insertion into Cache: When a new row is fetched from the database, its corresponding immutable instance is created using the InstanceFactory. This instance is then stored in the RowCache along with metadata (insertion ticks, size). Simultaneously, the IndexCache is updated to map foreign keys to this row’s primary key (see RowCache.cs \uE200cite\uE202turn2file2\uE201 and IndexCache.cs \uE200cite\uE202turn2file0\uE201). Cache Eviction: Time-Based Eviction: The system can remove rows that were inserted before a specific tick value. Row Count/Size Limits: Methods in RowCache allow the cache to enforce limits by removing the oldest rows until the count or total size is within the defined thresholds. Index Cache Maintenance: The IndexCache similarly purges outdated entries using its tick queue mechanism. Cache Retrieval: Before executing a query, the system checks the RowCache for the required rows. If a row is found, it’s returned directly. Otherwise, the query system retrieves the missing rows from the database and updates the cache. Transaction Awareness: The TableCache can maintain separate caches for transaction-specific data. This ensures that updates within a transaction do not affect the global cache until the transaction is committed. 5. Mutation and Data Consistency DataLinq ensures data consistency while allowing mutations through a well-defined process: Immutable to Mutable Conversion: The generated Mutate() methods (see source-generated Department file) allow conversion from an immutable instance to a mutable one. This is achieved using pattern matching, ensuring the proper type is returned regardless of whether the object is already mutable or not. Tracking Changes: The MutableRowData class tracks modifications in a dictionary. Methods such as Reset() allow reverting changes to the original state, while HasChanges() reports whether any properties have been modified. Saving Changes: When a mutable instance is saved, the updated data is written back to the backend. Upon successful commit, a new immutable instance is created to replace the old one in the cache. Extension methods in the generated code (e.g., Save, Update, InsertOrUpdate) abstract these operations, providing a seamless developer experience. 6. Future Directions and Developer Notes Additional Backends: Although initial support focuses on MariaDB and SQLite, the modular design facilitates easy addition of new data sources (e.g., NoSQL, JSON files). Enhanced Query Optimizations: Future enhancements could include query caching, more advanced translation strategies, and support for more complex LINQ expressions. Developer Contributions: Clear guidelines and extensive test coverage make it easier for contributors to understand and extend the library. Developers are encouraged to review both the generated code and supporting subsystems (caching, mutation, and query translation) for insights. Documentation Updates: This technical documentation is intended to evolve with the project. Feedback from developers and contributors is welcomed to ensure that the documentation remains accurate and helpful. 7. Conclusion DataLinq’s design centers on immutability, efficient caching, and flexible querying, making it an ideal ORM for heavy-read applications with a focus on performance. The separation of concerns between model mapping, caching, mutation, and query translation ensures that each component can be optimized independently while maintaining a consistent developer experience."
  },
  "index.html": {
    "href": "index.html",
    "title": "",
    "summary": ""
  }
}